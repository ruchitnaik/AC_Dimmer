
AC_Dimmer_Tim_SW.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004d60  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000270  08004ef0  08004ef0  00014ef0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08005160  08005160  00015160  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08005168  08005168  00015168  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800516c  0800516c  0001516c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000001dc  20000000  08005170  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ccmram       00000000  10000000  10000000  000201dc  2**0
                  CONTENTS
  8 .bss          0000018c  200001dc  200001dc  000201dc  2**2
                  ALLOC
  9 ._user_heap_stack 00000600  20000368  20000368  000201dc  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 11 .debug_info   00010152  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 00001af4  00000000  00000000  0003035e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00000dc0  00000000  00000000  00031e58  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000d18  00000000  00000000  00032c18  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   000075b1  00000000  00000000  00033930  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00004503  00000000  00000000  0003aee1  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  0003f3e4  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000046cc  00000000  00000000  0003f460  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001dc 	.word	0x200001dc
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004ed8 	.word	0x08004ed8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e0 	.word	0x200001e0
 80001cc:	08004ed8 	.word	0x08004ed8

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b97a 	b.w	800057c <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	468c      	mov	ip, r1
 80002a6:	460d      	mov	r5, r1
 80002a8:	4604      	mov	r4, r0
 80002aa:	9e08      	ldr	r6, [sp, #32]
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d151      	bne.n	8000354 <__udivmoddi4+0xb4>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4617      	mov	r7, r2
 80002b4:	d96d      	bls.n	8000392 <__udivmoddi4+0xf2>
 80002b6:	fab2 fe82 	clz	lr, r2
 80002ba:	f1be 0f00 	cmp.w	lr, #0
 80002be:	d00b      	beq.n	80002d8 <__udivmoddi4+0x38>
 80002c0:	f1ce 0c20 	rsb	ip, lr, #32
 80002c4:	fa01 f50e 	lsl.w	r5, r1, lr
 80002c8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002cc:	fa02 f70e 	lsl.w	r7, r2, lr
 80002d0:	ea4c 0c05 	orr.w	ip, ip, r5
 80002d4:	fa00 f40e 	lsl.w	r4, r0, lr
 80002d8:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 80002dc:	0c25      	lsrs	r5, r4, #16
 80002de:	fbbc f8fa 	udiv	r8, ip, sl
 80002e2:	fa1f f987 	uxth.w	r9, r7
 80002e6:	fb0a cc18 	mls	ip, sl, r8, ip
 80002ea:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 80002ee:	fb08 f309 	mul.w	r3, r8, r9
 80002f2:	42ab      	cmp	r3, r5
 80002f4:	d90a      	bls.n	800030c <__udivmoddi4+0x6c>
 80002f6:	19ed      	adds	r5, r5, r7
 80002f8:	f108 32ff 	add.w	r2, r8, #4294967295
 80002fc:	f080 8123 	bcs.w	8000546 <__udivmoddi4+0x2a6>
 8000300:	42ab      	cmp	r3, r5
 8000302:	f240 8120 	bls.w	8000546 <__udivmoddi4+0x2a6>
 8000306:	f1a8 0802 	sub.w	r8, r8, #2
 800030a:	443d      	add	r5, r7
 800030c:	1aed      	subs	r5, r5, r3
 800030e:	b2a4      	uxth	r4, r4
 8000310:	fbb5 f0fa 	udiv	r0, r5, sl
 8000314:	fb0a 5510 	mls	r5, sl, r0, r5
 8000318:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800031c:	fb00 f909 	mul.w	r9, r0, r9
 8000320:	45a1      	cmp	r9, r4
 8000322:	d909      	bls.n	8000338 <__udivmoddi4+0x98>
 8000324:	19e4      	adds	r4, r4, r7
 8000326:	f100 33ff 	add.w	r3, r0, #4294967295
 800032a:	f080 810a 	bcs.w	8000542 <__udivmoddi4+0x2a2>
 800032e:	45a1      	cmp	r9, r4
 8000330:	f240 8107 	bls.w	8000542 <__udivmoddi4+0x2a2>
 8000334:	3802      	subs	r0, #2
 8000336:	443c      	add	r4, r7
 8000338:	eba4 0409 	sub.w	r4, r4, r9
 800033c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000340:	2100      	movs	r1, #0
 8000342:	2e00      	cmp	r6, #0
 8000344:	d061      	beq.n	800040a <__udivmoddi4+0x16a>
 8000346:	fa24 f40e 	lsr.w	r4, r4, lr
 800034a:	2300      	movs	r3, #0
 800034c:	6034      	str	r4, [r6, #0]
 800034e:	6073      	str	r3, [r6, #4]
 8000350:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000354:	428b      	cmp	r3, r1
 8000356:	d907      	bls.n	8000368 <__udivmoddi4+0xc8>
 8000358:	2e00      	cmp	r6, #0
 800035a:	d054      	beq.n	8000406 <__udivmoddi4+0x166>
 800035c:	2100      	movs	r1, #0
 800035e:	e886 0021 	stmia.w	r6, {r0, r5}
 8000362:	4608      	mov	r0, r1
 8000364:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000368:	fab3 f183 	clz	r1, r3
 800036c:	2900      	cmp	r1, #0
 800036e:	f040 808e 	bne.w	800048e <__udivmoddi4+0x1ee>
 8000372:	42ab      	cmp	r3, r5
 8000374:	d302      	bcc.n	800037c <__udivmoddi4+0xdc>
 8000376:	4282      	cmp	r2, r0
 8000378:	f200 80fa 	bhi.w	8000570 <__udivmoddi4+0x2d0>
 800037c:	1a84      	subs	r4, r0, r2
 800037e:	eb65 0503 	sbc.w	r5, r5, r3
 8000382:	2001      	movs	r0, #1
 8000384:	46ac      	mov	ip, r5
 8000386:	2e00      	cmp	r6, #0
 8000388:	d03f      	beq.n	800040a <__udivmoddi4+0x16a>
 800038a:	e886 1010 	stmia.w	r6, {r4, ip}
 800038e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000392:	b912      	cbnz	r2, 800039a <__udivmoddi4+0xfa>
 8000394:	2701      	movs	r7, #1
 8000396:	fbb7 f7f2 	udiv	r7, r7, r2
 800039a:	fab7 fe87 	clz	lr, r7
 800039e:	f1be 0f00 	cmp.w	lr, #0
 80003a2:	d134      	bne.n	800040e <__udivmoddi4+0x16e>
 80003a4:	1beb      	subs	r3, r5, r7
 80003a6:	0c3a      	lsrs	r2, r7, #16
 80003a8:	fa1f fc87 	uxth.w	ip, r7
 80003ac:	2101      	movs	r1, #1
 80003ae:	fbb3 f8f2 	udiv	r8, r3, r2
 80003b2:	0c25      	lsrs	r5, r4, #16
 80003b4:	fb02 3318 	mls	r3, r2, r8, r3
 80003b8:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80003bc:	fb0c f308 	mul.w	r3, ip, r8
 80003c0:	42ab      	cmp	r3, r5
 80003c2:	d907      	bls.n	80003d4 <__udivmoddi4+0x134>
 80003c4:	19ed      	adds	r5, r5, r7
 80003c6:	f108 30ff 	add.w	r0, r8, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x132>
 80003cc:	42ab      	cmp	r3, r5
 80003ce:	f200 80d1 	bhi.w	8000574 <__udivmoddi4+0x2d4>
 80003d2:	4680      	mov	r8, r0
 80003d4:	1aed      	subs	r5, r5, r3
 80003d6:	b2a3      	uxth	r3, r4
 80003d8:	fbb5 f0f2 	udiv	r0, r5, r2
 80003dc:	fb02 5510 	mls	r5, r2, r0, r5
 80003e0:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 80003e4:	fb0c fc00 	mul.w	ip, ip, r0
 80003e8:	45a4      	cmp	ip, r4
 80003ea:	d907      	bls.n	80003fc <__udivmoddi4+0x15c>
 80003ec:	19e4      	adds	r4, r4, r7
 80003ee:	f100 33ff 	add.w	r3, r0, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x15a>
 80003f4:	45a4      	cmp	ip, r4
 80003f6:	f200 80b8 	bhi.w	800056a <__udivmoddi4+0x2ca>
 80003fa:	4618      	mov	r0, r3
 80003fc:	eba4 040c 	sub.w	r4, r4, ip
 8000400:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000404:	e79d      	b.n	8000342 <__udivmoddi4+0xa2>
 8000406:	4631      	mov	r1, r6
 8000408:	4630      	mov	r0, r6
 800040a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800040e:	f1ce 0420 	rsb	r4, lr, #32
 8000412:	fa05 f30e 	lsl.w	r3, r5, lr
 8000416:	fa07 f70e 	lsl.w	r7, r7, lr
 800041a:	fa20 f804 	lsr.w	r8, r0, r4
 800041e:	0c3a      	lsrs	r2, r7, #16
 8000420:	fa25 f404 	lsr.w	r4, r5, r4
 8000424:	ea48 0803 	orr.w	r8, r8, r3
 8000428:	fbb4 f1f2 	udiv	r1, r4, r2
 800042c:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000430:	fb02 4411 	mls	r4, r2, r1, r4
 8000434:	fa1f fc87 	uxth.w	ip, r7
 8000438:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 800043c:	fb01 f30c 	mul.w	r3, r1, ip
 8000440:	42ab      	cmp	r3, r5
 8000442:	fa00 f40e 	lsl.w	r4, r0, lr
 8000446:	d909      	bls.n	800045c <__udivmoddi4+0x1bc>
 8000448:	19ed      	adds	r5, r5, r7
 800044a:	f101 30ff 	add.w	r0, r1, #4294967295
 800044e:	f080 808a 	bcs.w	8000566 <__udivmoddi4+0x2c6>
 8000452:	42ab      	cmp	r3, r5
 8000454:	f240 8087 	bls.w	8000566 <__udivmoddi4+0x2c6>
 8000458:	3902      	subs	r1, #2
 800045a:	443d      	add	r5, r7
 800045c:	1aeb      	subs	r3, r5, r3
 800045e:	fa1f f588 	uxth.w	r5, r8
 8000462:	fbb3 f0f2 	udiv	r0, r3, r2
 8000466:	fb02 3310 	mls	r3, r2, r0, r3
 800046a:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 800046e:	fb00 f30c 	mul.w	r3, r0, ip
 8000472:	42ab      	cmp	r3, r5
 8000474:	d907      	bls.n	8000486 <__udivmoddi4+0x1e6>
 8000476:	19ed      	adds	r5, r5, r7
 8000478:	f100 38ff 	add.w	r8, r0, #4294967295
 800047c:	d26f      	bcs.n	800055e <__udivmoddi4+0x2be>
 800047e:	42ab      	cmp	r3, r5
 8000480:	d96d      	bls.n	800055e <__udivmoddi4+0x2be>
 8000482:	3802      	subs	r0, #2
 8000484:	443d      	add	r5, r7
 8000486:	1aeb      	subs	r3, r5, r3
 8000488:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800048c:	e78f      	b.n	80003ae <__udivmoddi4+0x10e>
 800048e:	f1c1 0720 	rsb	r7, r1, #32
 8000492:	fa22 f807 	lsr.w	r8, r2, r7
 8000496:	408b      	lsls	r3, r1
 8000498:	fa05 f401 	lsl.w	r4, r5, r1
 800049c:	ea48 0303 	orr.w	r3, r8, r3
 80004a0:	fa20 fe07 	lsr.w	lr, r0, r7
 80004a4:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 80004a8:	40fd      	lsrs	r5, r7
 80004aa:	ea4e 0e04 	orr.w	lr, lr, r4
 80004ae:	fbb5 f9fc 	udiv	r9, r5, ip
 80004b2:	ea4f 441e 	mov.w	r4, lr, lsr #16
 80004b6:	fb0c 5519 	mls	r5, ip, r9, r5
 80004ba:	fa1f f883 	uxth.w	r8, r3
 80004be:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 80004c2:	fb09 f408 	mul.w	r4, r9, r8
 80004c6:	42ac      	cmp	r4, r5
 80004c8:	fa02 f201 	lsl.w	r2, r2, r1
 80004cc:	fa00 fa01 	lsl.w	sl, r0, r1
 80004d0:	d908      	bls.n	80004e4 <__udivmoddi4+0x244>
 80004d2:	18ed      	adds	r5, r5, r3
 80004d4:	f109 30ff 	add.w	r0, r9, #4294967295
 80004d8:	d243      	bcs.n	8000562 <__udivmoddi4+0x2c2>
 80004da:	42ac      	cmp	r4, r5
 80004dc:	d941      	bls.n	8000562 <__udivmoddi4+0x2c2>
 80004de:	f1a9 0902 	sub.w	r9, r9, #2
 80004e2:	441d      	add	r5, r3
 80004e4:	1b2d      	subs	r5, r5, r4
 80004e6:	fa1f fe8e 	uxth.w	lr, lr
 80004ea:	fbb5 f0fc 	udiv	r0, r5, ip
 80004ee:	fb0c 5510 	mls	r5, ip, r0, r5
 80004f2:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 80004f6:	fb00 f808 	mul.w	r8, r0, r8
 80004fa:	45a0      	cmp	r8, r4
 80004fc:	d907      	bls.n	800050e <__udivmoddi4+0x26e>
 80004fe:	18e4      	adds	r4, r4, r3
 8000500:	f100 35ff 	add.w	r5, r0, #4294967295
 8000504:	d229      	bcs.n	800055a <__udivmoddi4+0x2ba>
 8000506:	45a0      	cmp	r8, r4
 8000508:	d927      	bls.n	800055a <__udivmoddi4+0x2ba>
 800050a:	3802      	subs	r0, #2
 800050c:	441c      	add	r4, r3
 800050e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000512:	eba4 0408 	sub.w	r4, r4, r8
 8000516:	fba0 8902 	umull	r8, r9, r0, r2
 800051a:	454c      	cmp	r4, r9
 800051c:	46c6      	mov	lr, r8
 800051e:	464d      	mov	r5, r9
 8000520:	d315      	bcc.n	800054e <__udivmoddi4+0x2ae>
 8000522:	d012      	beq.n	800054a <__udivmoddi4+0x2aa>
 8000524:	b156      	cbz	r6, 800053c <__udivmoddi4+0x29c>
 8000526:	ebba 030e 	subs.w	r3, sl, lr
 800052a:	eb64 0405 	sbc.w	r4, r4, r5
 800052e:	fa04 f707 	lsl.w	r7, r4, r7
 8000532:	40cb      	lsrs	r3, r1
 8000534:	431f      	orrs	r7, r3
 8000536:	40cc      	lsrs	r4, r1
 8000538:	6037      	str	r7, [r6, #0]
 800053a:	6074      	str	r4, [r6, #4]
 800053c:	2100      	movs	r1, #0
 800053e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000542:	4618      	mov	r0, r3
 8000544:	e6f8      	b.n	8000338 <__udivmoddi4+0x98>
 8000546:	4690      	mov	r8, r2
 8000548:	e6e0      	b.n	800030c <__udivmoddi4+0x6c>
 800054a:	45c2      	cmp	sl, r8
 800054c:	d2ea      	bcs.n	8000524 <__udivmoddi4+0x284>
 800054e:	ebb8 0e02 	subs.w	lr, r8, r2
 8000552:	eb69 0503 	sbc.w	r5, r9, r3
 8000556:	3801      	subs	r0, #1
 8000558:	e7e4      	b.n	8000524 <__udivmoddi4+0x284>
 800055a:	4628      	mov	r0, r5
 800055c:	e7d7      	b.n	800050e <__udivmoddi4+0x26e>
 800055e:	4640      	mov	r0, r8
 8000560:	e791      	b.n	8000486 <__udivmoddi4+0x1e6>
 8000562:	4681      	mov	r9, r0
 8000564:	e7be      	b.n	80004e4 <__udivmoddi4+0x244>
 8000566:	4601      	mov	r1, r0
 8000568:	e778      	b.n	800045c <__udivmoddi4+0x1bc>
 800056a:	3802      	subs	r0, #2
 800056c:	443c      	add	r4, r7
 800056e:	e745      	b.n	80003fc <__udivmoddi4+0x15c>
 8000570:	4608      	mov	r0, r1
 8000572:	e708      	b.n	8000386 <__udivmoddi4+0xe6>
 8000574:	f1a8 0802 	sub.w	r8, r8, #2
 8000578:	443d      	add	r5, r7
 800057a:	e72b      	b.n	80003d4 <__udivmoddi4+0x134>

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000584:	4a0e      	ldr	r2, [pc, #56]	; (80005c0 <HAL_Init+0x40>)
 8000586:	4b0e      	ldr	r3, [pc, #56]	; (80005c0 <HAL_Init+0x40>)
 8000588:	681b      	ldr	r3, [r3, #0]
 800058a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800058e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000590:	4a0b      	ldr	r2, [pc, #44]	; (80005c0 <HAL_Init+0x40>)
 8000592:	4b0b      	ldr	r3, [pc, #44]	; (80005c0 <HAL_Init+0x40>)
 8000594:	681b      	ldr	r3, [r3, #0]
 8000596:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800059a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800059c:	4a08      	ldr	r2, [pc, #32]	; (80005c0 <HAL_Init+0x40>)
 800059e:	4b08      	ldr	r3, [pc, #32]	; (80005c0 <HAL_Init+0x40>)
 80005a0:	681b      	ldr	r3, [r3, #0]
 80005a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80005a6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80005a8:	2003      	movs	r0, #3
 80005aa:	f000 f929 	bl	8000800 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80005ae:	2000      	movs	r0, #0
 80005b0:	f000 f808 	bl	80005c4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80005b4:	f002 fc70 	bl	8002e98 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80005b8:	2300      	movs	r3, #0
}
 80005ba:	4618      	mov	r0, r3
 80005bc:	bd80      	pop	{r7, pc}
 80005be:	bf00      	nop
 80005c0:	40023c00 	.word	0x40023c00

080005c4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b082      	sub	sp, #8
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80005cc:	4b12      	ldr	r3, [pc, #72]	; (8000618 <HAL_InitTick+0x54>)
 80005ce:	681a      	ldr	r2, [r3, #0]
 80005d0:	4b12      	ldr	r3, [pc, #72]	; (800061c <HAL_InitTick+0x58>)
 80005d2:	781b      	ldrb	r3, [r3, #0]
 80005d4:	4619      	mov	r1, r3
 80005d6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005da:	fbb3 f3f1 	udiv	r3, r3, r1
 80005de:	fbb2 f3f3 	udiv	r3, r2, r3
 80005e2:	4618      	mov	r0, r3
 80005e4:	f000 f941 	bl	800086a <HAL_SYSTICK_Config>
 80005e8:	4603      	mov	r3, r0
 80005ea:	2b00      	cmp	r3, #0
 80005ec:	d001      	beq.n	80005f2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80005ee:	2301      	movs	r3, #1
 80005f0:	e00e      	b.n	8000610 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	2b0f      	cmp	r3, #15
 80005f6:	d80a      	bhi.n	800060e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80005f8:	2200      	movs	r2, #0
 80005fa:	6879      	ldr	r1, [r7, #4]
 80005fc:	f04f 30ff 	mov.w	r0, #4294967295
 8000600:	f000 f909 	bl	8000816 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000604:	4a06      	ldr	r2, [pc, #24]	; (8000620 <HAL_InitTick+0x5c>)
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800060a:	2300      	movs	r3, #0
 800060c:	e000      	b.n	8000610 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800060e:	2301      	movs	r3, #1
}
 8000610:	4618      	mov	r0, r3
 8000612:	3708      	adds	r7, #8
 8000614:	46bd      	mov	sp, r7
 8000616:	bd80      	pop	{r7, pc}
 8000618:	20000008 	.word	0x20000008
 800061c:	20000004 	.word	0x20000004
 8000620:	20000000 	.word	0x20000000

08000624 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000624:	b480      	push	{r7}
 8000626:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000628:	4b06      	ldr	r3, [pc, #24]	; (8000644 <HAL_IncTick+0x20>)
 800062a:	781b      	ldrb	r3, [r3, #0]
 800062c:	461a      	mov	r2, r3
 800062e:	4b06      	ldr	r3, [pc, #24]	; (8000648 <HAL_IncTick+0x24>)
 8000630:	681b      	ldr	r3, [r3, #0]
 8000632:	4413      	add	r3, r2
 8000634:	4a04      	ldr	r2, [pc, #16]	; (8000648 <HAL_IncTick+0x24>)
 8000636:	6013      	str	r3, [r2, #0]
}
 8000638:	bf00      	nop
 800063a:	46bd      	mov	sp, r7
 800063c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000640:	4770      	bx	lr
 8000642:	bf00      	nop
 8000644:	20000004 	.word	0x20000004
 8000648:	20000214 	.word	0x20000214

0800064c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800064c:	b480      	push	{r7}
 800064e:	af00      	add	r7, sp, #0
  return uwTick;
 8000650:	4b03      	ldr	r3, [pc, #12]	; (8000660 <HAL_GetTick+0x14>)
 8000652:	681b      	ldr	r3, [r3, #0]
}
 8000654:	4618      	mov	r0, r3
 8000656:	46bd      	mov	sp, r7
 8000658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800065c:	4770      	bx	lr
 800065e:	bf00      	nop
 8000660:	20000214 	.word	0x20000214

08000664 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000664:	b480      	push	{r7}
 8000666:	b085      	sub	sp, #20
 8000668:	af00      	add	r7, sp, #0
 800066a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	f003 0307 	and.w	r3, r3, #7
 8000672:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000674:	4b0c      	ldr	r3, [pc, #48]	; (80006a8 <__NVIC_SetPriorityGrouping+0x44>)
 8000676:	68db      	ldr	r3, [r3, #12]
 8000678:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800067a:	68ba      	ldr	r2, [r7, #8]
 800067c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000680:	4013      	ands	r3, r2
 8000682:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000684:	68fb      	ldr	r3, [r7, #12]
 8000686:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000688:	68bb      	ldr	r3, [r7, #8]
 800068a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800068c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000690:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000694:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000696:	4a04      	ldr	r2, [pc, #16]	; (80006a8 <__NVIC_SetPriorityGrouping+0x44>)
 8000698:	68bb      	ldr	r3, [r7, #8]
 800069a:	60d3      	str	r3, [r2, #12]
}
 800069c:	bf00      	nop
 800069e:	3714      	adds	r7, #20
 80006a0:	46bd      	mov	sp, r7
 80006a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a6:	4770      	bx	lr
 80006a8:	e000ed00 	.word	0xe000ed00

080006ac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80006ac:	b480      	push	{r7}
 80006ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80006b0:	4b04      	ldr	r3, [pc, #16]	; (80006c4 <__NVIC_GetPriorityGrouping+0x18>)
 80006b2:	68db      	ldr	r3, [r3, #12]
 80006b4:	0a1b      	lsrs	r3, r3, #8
 80006b6:	f003 0307 	and.w	r3, r3, #7
}
 80006ba:	4618      	mov	r0, r3
 80006bc:	46bd      	mov	sp, r7
 80006be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c2:	4770      	bx	lr
 80006c4:	e000ed00 	.word	0xe000ed00

080006c8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80006c8:	b480      	push	{r7}
 80006ca:	b083      	sub	sp, #12
 80006cc:	af00      	add	r7, sp, #0
 80006ce:	4603      	mov	r3, r0
 80006d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80006d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	db0b      	blt.n	80006f2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80006da:	4909      	ldr	r1, [pc, #36]	; (8000700 <__NVIC_EnableIRQ+0x38>)
 80006dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006e0:	095b      	lsrs	r3, r3, #5
 80006e2:	79fa      	ldrb	r2, [r7, #7]
 80006e4:	f002 021f 	and.w	r2, r2, #31
 80006e8:	2001      	movs	r0, #1
 80006ea:	fa00 f202 	lsl.w	r2, r0, r2
 80006ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80006f2:	bf00      	nop
 80006f4:	370c      	adds	r7, #12
 80006f6:	46bd      	mov	sp, r7
 80006f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006fc:	4770      	bx	lr
 80006fe:	bf00      	nop
 8000700:	e000e100 	.word	0xe000e100

08000704 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000704:	b480      	push	{r7}
 8000706:	b083      	sub	sp, #12
 8000708:	af00      	add	r7, sp, #0
 800070a:	4603      	mov	r3, r0
 800070c:	6039      	str	r1, [r7, #0]
 800070e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000710:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000714:	2b00      	cmp	r3, #0
 8000716:	db0a      	blt.n	800072e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000718:	490d      	ldr	r1, [pc, #52]	; (8000750 <__NVIC_SetPriority+0x4c>)
 800071a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800071e:	683a      	ldr	r2, [r7, #0]
 8000720:	b2d2      	uxtb	r2, r2
 8000722:	0112      	lsls	r2, r2, #4
 8000724:	b2d2      	uxtb	r2, r2
 8000726:	440b      	add	r3, r1
 8000728:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800072c:	e00a      	b.n	8000744 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800072e:	4909      	ldr	r1, [pc, #36]	; (8000754 <__NVIC_SetPriority+0x50>)
 8000730:	79fb      	ldrb	r3, [r7, #7]
 8000732:	f003 030f 	and.w	r3, r3, #15
 8000736:	3b04      	subs	r3, #4
 8000738:	683a      	ldr	r2, [r7, #0]
 800073a:	b2d2      	uxtb	r2, r2
 800073c:	0112      	lsls	r2, r2, #4
 800073e:	b2d2      	uxtb	r2, r2
 8000740:	440b      	add	r3, r1
 8000742:	761a      	strb	r2, [r3, #24]
}
 8000744:	bf00      	nop
 8000746:	370c      	adds	r7, #12
 8000748:	46bd      	mov	sp, r7
 800074a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800074e:	4770      	bx	lr
 8000750:	e000e100 	.word	0xe000e100
 8000754:	e000ed00 	.word	0xe000ed00

08000758 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000758:	b480      	push	{r7}
 800075a:	b089      	sub	sp, #36	; 0x24
 800075c:	af00      	add	r7, sp, #0
 800075e:	60f8      	str	r0, [r7, #12]
 8000760:	60b9      	str	r1, [r7, #8]
 8000762:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000764:	68fb      	ldr	r3, [r7, #12]
 8000766:	f003 0307 	and.w	r3, r3, #7
 800076a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800076c:	69fb      	ldr	r3, [r7, #28]
 800076e:	f1c3 0307 	rsb	r3, r3, #7
 8000772:	2b04      	cmp	r3, #4
 8000774:	bf28      	it	cs
 8000776:	2304      	movcs	r3, #4
 8000778:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800077a:	69fb      	ldr	r3, [r7, #28]
 800077c:	3304      	adds	r3, #4
 800077e:	2b06      	cmp	r3, #6
 8000780:	d902      	bls.n	8000788 <NVIC_EncodePriority+0x30>
 8000782:	69fb      	ldr	r3, [r7, #28]
 8000784:	3b03      	subs	r3, #3
 8000786:	e000      	b.n	800078a <NVIC_EncodePriority+0x32>
 8000788:	2300      	movs	r3, #0
 800078a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800078c:	2201      	movs	r2, #1
 800078e:	69bb      	ldr	r3, [r7, #24]
 8000790:	fa02 f303 	lsl.w	r3, r2, r3
 8000794:	1e5a      	subs	r2, r3, #1
 8000796:	68bb      	ldr	r3, [r7, #8]
 8000798:	401a      	ands	r2, r3
 800079a:	697b      	ldr	r3, [r7, #20]
 800079c:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800079e:	2101      	movs	r1, #1
 80007a0:	697b      	ldr	r3, [r7, #20]
 80007a2:	fa01 f303 	lsl.w	r3, r1, r3
 80007a6:	1e59      	subs	r1, r3, #1
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007ac:	4313      	orrs	r3, r2
         );
}
 80007ae:	4618      	mov	r0, r3
 80007b0:	3724      	adds	r7, #36	; 0x24
 80007b2:	46bd      	mov	sp, r7
 80007b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b8:	4770      	bx	lr
	...

080007bc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	b082      	sub	sp, #8
 80007c0:	af00      	add	r7, sp, #0
 80007c2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	3b01      	subs	r3, #1
 80007c8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80007cc:	d301      	bcc.n	80007d2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80007ce:	2301      	movs	r3, #1
 80007d0:	e00f      	b.n	80007f2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80007d2:	4a0a      	ldr	r2, [pc, #40]	; (80007fc <SysTick_Config+0x40>)
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	3b01      	subs	r3, #1
 80007d8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80007da:	210f      	movs	r1, #15
 80007dc:	f04f 30ff 	mov.w	r0, #4294967295
 80007e0:	f7ff ff90 	bl	8000704 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80007e4:	4b05      	ldr	r3, [pc, #20]	; (80007fc <SysTick_Config+0x40>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80007ea:	4b04      	ldr	r3, [pc, #16]	; (80007fc <SysTick_Config+0x40>)
 80007ec:	2207      	movs	r2, #7
 80007ee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80007f0:	2300      	movs	r3, #0
}
 80007f2:	4618      	mov	r0, r3
 80007f4:	3708      	adds	r7, #8
 80007f6:	46bd      	mov	sp, r7
 80007f8:	bd80      	pop	{r7, pc}
 80007fa:	bf00      	nop
 80007fc:	e000e010 	.word	0xe000e010

08000800 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	b082      	sub	sp, #8
 8000804:	af00      	add	r7, sp, #0
 8000806:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000808:	6878      	ldr	r0, [r7, #4]
 800080a:	f7ff ff2b 	bl	8000664 <__NVIC_SetPriorityGrouping>
}
 800080e:	bf00      	nop
 8000810:	3708      	adds	r7, #8
 8000812:	46bd      	mov	sp, r7
 8000814:	bd80      	pop	{r7, pc}

08000816 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000816:	b580      	push	{r7, lr}
 8000818:	b086      	sub	sp, #24
 800081a:	af00      	add	r7, sp, #0
 800081c:	4603      	mov	r3, r0
 800081e:	60b9      	str	r1, [r7, #8]
 8000820:	607a      	str	r2, [r7, #4]
 8000822:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000824:	2300      	movs	r3, #0
 8000826:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000828:	f7ff ff40 	bl	80006ac <__NVIC_GetPriorityGrouping>
 800082c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800082e:	687a      	ldr	r2, [r7, #4]
 8000830:	68b9      	ldr	r1, [r7, #8]
 8000832:	6978      	ldr	r0, [r7, #20]
 8000834:	f7ff ff90 	bl	8000758 <NVIC_EncodePriority>
 8000838:	4602      	mov	r2, r0
 800083a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800083e:	4611      	mov	r1, r2
 8000840:	4618      	mov	r0, r3
 8000842:	f7ff ff5f 	bl	8000704 <__NVIC_SetPriority>
}
 8000846:	bf00      	nop
 8000848:	3718      	adds	r7, #24
 800084a:	46bd      	mov	sp, r7
 800084c:	bd80      	pop	{r7, pc}

0800084e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800084e:	b580      	push	{r7, lr}
 8000850:	b082      	sub	sp, #8
 8000852:	af00      	add	r7, sp, #0
 8000854:	4603      	mov	r3, r0
 8000856:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000858:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800085c:	4618      	mov	r0, r3
 800085e:	f7ff ff33 	bl	80006c8 <__NVIC_EnableIRQ>
}
 8000862:	bf00      	nop
 8000864:	3708      	adds	r7, #8
 8000866:	46bd      	mov	sp, r7
 8000868:	bd80      	pop	{r7, pc}

0800086a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800086a:	b580      	push	{r7, lr}
 800086c:	b082      	sub	sp, #8
 800086e:	af00      	add	r7, sp, #0
 8000870:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000872:	6878      	ldr	r0, [r7, #4]
 8000874:	f7ff ffa2 	bl	80007bc <SysTick_Config>
 8000878:	4603      	mov	r3, r0
}
 800087a:	4618      	mov	r0, r3
 800087c:	3708      	adds	r7, #8
 800087e:	46bd      	mov	sp, r7
 8000880:	bd80      	pop	{r7, pc}
	...

08000884 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000884:	b480      	push	{r7}
 8000886:	b089      	sub	sp, #36	; 0x24
 8000888:	af00      	add	r7, sp, #0
 800088a:	6078      	str	r0, [r7, #4]
 800088c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800088e:	2300      	movs	r3, #0
 8000890:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000892:	2300      	movs	r3, #0
 8000894:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000896:	2300      	movs	r3, #0
 8000898:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800089a:	2300      	movs	r3, #0
 800089c:	61fb      	str	r3, [r7, #28]
 800089e:	e16b      	b.n	8000b78 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80008a0:	2201      	movs	r2, #1
 80008a2:	69fb      	ldr	r3, [r7, #28]
 80008a4:	fa02 f303 	lsl.w	r3, r2, r3
 80008a8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80008aa:	683b      	ldr	r3, [r7, #0]
 80008ac:	681a      	ldr	r2, [r3, #0]
 80008ae:	697b      	ldr	r3, [r7, #20]
 80008b0:	4013      	ands	r3, r2
 80008b2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80008b4:	693a      	ldr	r2, [r7, #16]
 80008b6:	697b      	ldr	r3, [r7, #20]
 80008b8:	429a      	cmp	r2, r3
 80008ba:	f040 815a 	bne.w	8000b72 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80008be:	683b      	ldr	r3, [r7, #0]
 80008c0:	685b      	ldr	r3, [r3, #4]
 80008c2:	f003 0303 	and.w	r3, r3, #3
 80008c6:	2b01      	cmp	r3, #1
 80008c8:	d005      	beq.n	80008d6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80008ca:	683b      	ldr	r3, [r7, #0]
 80008cc:	685b      	ldr	r3, [r3, #4]
 80008ce:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80008d2:	2b02      	cmp	r3, #2
 80008d4:	d130      	bne.n	8000938 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	689b      	ldr	r3, [r3, #8]
 80008da:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80008dc:	69fb      	ldr	r3, [r7, #28]
 80008de:	005b      	lsls	r3, r3, #1
 80008e0:	2203      	movs	r2, #3
 80008e2:	fa02 f303 	lsl.w	r3, r2, r3
 80008e6:	43db      	mvns	r3, r3
 80008e8:	69ba      	ldr	r2, [r7, #24]
 80008ea:	4013      	ands	r3, r2
 80008ec:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80008ee:	683b      	ldr	r3, [r7, #0]
 80008f0:	68da      	ldr	r2, [r3, #12]
 80008f2:	69fb      	ldr	r3, [r7, #28]
 80008f4:	005b      	lsls	r3, r3, #1
 80008f6:	fa02 f303 	lsl.w	r3, r2, r3
 80008fa:	69ba      	ldr	r2, [r7, #24]
 80008fc:	4313      	orrs	r3, r2
 80008fe:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	69ba      	ldr	r2, [r7, #24]
 8000904:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	685b      	ldr	r3, [r3, #4]
 800090a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800090c:	2201      	movs	r2, #1
 800090e:	69fb      	ldr	r3, [r7, #28]
 8000910:	fa02 f303 	lsl.w	r3, r2, r3
 8000914:	43db      	mvns	r3, r3
 8000916:	69ba      	ldr	r2, [r7, #24]
 8000918:	4013      	ands	r3, r2
 800091a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800091c:	683b      	ldr	r3, [r7, #0]
 800091e:	685b      	ldr	r3, [r3, #4]
 8000920:	091b      	lsrs	r3, r3, #4
 8000922:	f003 0201 	and.w	r2, r3, #1
 8000926:	69fb      	ldr	r3, [r7, #28]
 8000928:	fa02 f303 	lsl.w	r3, r2, r3
 800092c:	69ba      	ldr	r2, [r7, #24]
 800092e:	4313      	orrs	r3, r2
 8000930:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	69ba      	ldr	r2, [r7, #24]
 8000936:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000938:	683b      	ldr	r3, [r7, #0]
 800093a:	685b      	ldr	r3, [r3, #4]
 800093c:	f003 0303 	and.w	r3, r3, #3
 8000940:	2b03      	cmp	r3, #3
 8000942:	d017      	beq.n	8000974 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	68db      	ldr	r3, [r3, #12]
 8000948:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800094a:	69fb      	ldr	r3, [r7, #28]
 800094c:	005b      	lsls	r3, r3, #1
 800094e:	2203      	movs	r2, #3
 8000950:	fa02 f303 	lsl.w	r3, r2, r3
 8000954:	43db      	mvns	r3, r3
 8000956:	69ba      	ldr	r2, [r7, #24]
 8000958:	4013      	ands	r3, r2
 800095a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800095c:	683b      	ldr	r3, [r7, #0]
 800095e:	689a      	ldr	r2, [r3, #8]
 8000960:	69fb      	ldr	r3, [r7, #28]
 8000962:	005b      	lsls	r3, r3, #1
 8000964:	fa02 f303 	lsl.w	r3, r2, r3
 8000968:	69ba      	ldr	r2, [r7, #24]
 800096a:	4313      	orrs	r3, r2
 800096c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	69ba      	ldr	r2, [r7, #24]
 8000972:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000974:	683b      	ldr	r3, [r7, #0]
 8000976:	685b      	ldr	r3, [r3, #4]
 8000978:	f003 0303 	and.w	r3, r3, #3
 800097c:	2b02      	cmp	r3, #2
 800097e:	d123      	bne.n	80009c8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000980:	69fb      	ldr	r3, [r7, #28]
 8000982:	08da      	lsrs	r2, r3, #3
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	3208      	adds	r2, #8
 8000988:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800098c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800098e:	69fb      	ldr	r3, [r7, #28]
 8000990:	f003 0307 	and.w	r3, r3, #7
 8000994:	009b      	lsls	r3, r3, #2
 8000996:	220f      	movs	r2, #15
 8000998:	fa02 f303 	lsl.w	r3, r2, r3
 800099c:	43db      	mvns	r3, r3
 800099e:	69ba      	ldr	r2, [r7, #24]
 80009a0:	4013      	ands	r3, r2
 80009a2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80009a4:	683b      	ldr	r3, [r7, #0]
 80009a6:	691a      	ldr	r2, [r3, #16]
 80009a8:	69fb      	ldr	r3, [r7, #28]
 80009aa:	f003 0307 	and.w	r3, r3, #7
 80009ae:	009b      	lsls	r3, r3, #2
 80009b0:	fa02 f303 	lsl.w	r3, r2, r3
 80009b4:	69ba      	ldr	r2, [r7, #24]
 80009b6:	4313      	orrs	r3, r2
 80009b8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80009ba:	69fb      	ldr	r3, [r7, #28]
 80009bc:	08da      	lsrs	r2, r3, #3
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	3208      	adds	r2, #8
 80009c2:	69b9      	ldr	r1, [r7, #24]
 80009c4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	681b      	ldr	r3, [r3, #0]
 80009cc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80009ce:	69fb      	ldr	r3, [r7, #28]
 80009d0:	005b      	lsls	r3, r3, #1
 80009d2:	2203      	movs	r2, #3
 80009d4:	fa02 f303 	lsl.w	r3, r2, r3
 80009d8:	43db      	mvns	r3, r3
 80009da:	69ba      	ldr	r2, [r7, #24]
 80009dc:	4013      	ands	r3, r2
 80009de:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80009e0:	683b      	ldr	r3, [r7, #0]
 80009e2:	685b      	ldr	r3, [r3, #4]
 80009e4:	f003 0203 	and.w	r2, r3, #3
 80009e8:	69fb      	ldr	r3, [r7, #28]
 80009ea:	005b      	lsls	r3, r3, #1
 80009ec:	fa02 f303 	lsl.w	r3, r2, r3
 80009f0:	69ba      	ldr	r2, [r7, #24]
 80009f2:	4313      	orrs	r3, r2
 80009f4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	69ba      	ldr	r2, [r7, #24]
 80009fa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80009fc:	683b      	ldr	r3, [r7, #0]
 80009fe:	685b      	ldr	r3, [r3, #4]
 8000a00:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	f000 80b4 	beq.w	8000b72 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	60fb      	str	r3, [r7, #12]
 8000a0e:	4a5f      	ldr	r2, [pc, #380]	; (8000b8c <HAL_GPIO_Init+0x308>)
 8000a10:	4b5e      	ldr	r3, [pc, #376]	; (8000b8c <HAL_GPIO_Init+0x308>)
 8000a12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a14:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a18:	6453      	str	r3, [r2, #68]	; 0x44
 8000a1a:	4b5c      	ldr	r3, [pc, #368]	; (8000b8c <HAL_GPIO_Init+0x308>)
 8000a1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a1e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a22:	60fb      	str	r3, [r7, #12]
 8000a24:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000a26:	4a5a      	ldr	r2, [pc, #360]	; (8000b90 <HAL_GPIO_Init+0x30c>)
 8000a28:	69fb      	ldr	r3, [r7, #28]
 8000a2a:	089b      	lsrs	r3, r3, #2
 8000a2c:	3302      	adds	r3, #2
 8000a2e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a32:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000a34:	69fb      	ldr	r3, [r7, #28]
 8000a36:	f003 0303 	and.w	r3, r3, #3
 8000a3a:	009b      	lsls	r3, r3, #2
 8000a3c:	220f      	movs	r2, #15
 8000a3e:	fa02 f303 	lsl.w	r3, r2, r3
 8000a42:	43db      	mvns	r3, r3
 8000a44:	69ba      	ldr	r2, [r7, #24]
 8000a46:	4013      	ands	r3, r2
 8000a48:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	4a51      	ldr	r2, [pc, #324]	; (8000b94 <HAL_GPIO_Init+0x310>)
 8000a4e:	4293      	cmp	r3, r2
 8000a50:	d02b      	beq.n	8000aaa <HAL_GPIO_Init+0x226>
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	4a50      	ldr	r2, [pc, #320]	; (8000b98 <HAL_GPIO_Init+0x314>)
 8000a56:	4293      	cmp	r3, r2
 8000a58:	d025      	beq.n	8000aa6 <HAL_GPIO_Init+0x222>
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	4a4f      	ldr	r2, [pc, #316]	; (8000b9c <HAL_GPIO_Init+0x318>)
 8000a5e:	4293      	cmp	r3, r2
 8000a60:	d01f      	beq.n	8000aa2 <HAL_GPIO_Init+0x21e>
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	4a4e      	ldr	r2, [pc, #312]	; (8000ba0 <HAL_GPIO_Init+0x31c>)
 8000a66:	4293      	cmp	r3, r2
 8000a68:	d019      	beq.n	8000a9e <HAL_GPIO_Init+0x21a>
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	4a4d      	ldr	r2, [pc, #308]	; (8000ba4 <HAL_GPIO_Init+0x320>)
 8000a6e:	4293      	cmp	r3, r2
 8000a70:	d013      	beq.n	8000a9a <HAL_GPIO_Init+0x216>
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	4a4c      	ldr	r2, [pc, #304]	; (8000ba8 <HAL_GPIO_Init+0x324>)
 8000a76:	4293      	cmp	r3, r2
 8000a78:	d00d      	beq.n	8000a96 <HAL_GPIO_Init+0x212>
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	4a4b      	ldr	r2, [pc, #300]	; (8000bac <HAL_GPIO_Init+0x328>)
 8000a7e:	4293      	cmp	r3, r2
 8000a80:	d007      	beq.n	8000a92 <HAL_GPIO_Init+0x20e>
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	4a4a      	ldr	r2, [pc, #296]	; (8000bb0 <HAL_GPIO_Init+0x32c>)
 8000a86:	4293      	cmp	r3, r2
 8000a88:	d101      	bne.n	8000a8e <HAL_GPIO_Init+0x20a>
 8000a8a:	2307      	movs	r3, #7
 8000a8c:	e00e      	b.n	8000aac <HAL_GPIO_Init+0x228>
 8000a8e:	2308      	movs	r3, #8
 8000a90:	e00c      	b.n	8000aac <HAL_GPIO_Init+0x228>
 8000a92:	2306      	movs	r3, #6
 8000a94:	e00a      	b.n	8000aac <HAL_GPIO_Init+0x228>
 8000a96:	2305      	movs	r3, #5
 8000a98:	e008      	b.n	8000aac <HAL_GPIO_Init+0x228>
 8000a9a:	2304      	movs	r3, #4
 8000a9c:	e006      	b.n	8000aac <HAL_GPIO_Init+0x228>
 8000a9e:	2303      	movs	r3, #3
 8000aa0:	e004      	b.n	8000aac <HAL_GPIO_Init+0x228>
 8000aa2:	2302      	movs	r3, #2
 8000aa4:	e002      	b.n	8000aac <HAL_GPIO_Init+0x228>
 8000aa6:	2301      	movs	r3, #1
 8000aa8:	e000      	b.n	8000aac <HAL_GPIO_Init+0x228>
 8000aaa:	2300      	movs	r3, #0
 8000aac:	69fa      	ldr	r2, [r7, #28]
 8000aae:	f002 0203 	and.w	r2, r2, #3
 8000ab2:	0092      	lsls	r2, r2, #2
 8000ab4:	4093      	lsls	r3, r2
 8000ab6:	69ba      	ldr	r2, [r7, #24]
 8000ab8:	4313      	orrs	r3, r2
 8000aba:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000abc:	4934      	ldr	r1, [pc, #208]	; (8000b90 <HAL_GPIO_Init+0x30c>)
 8000abe:	69fb      	ldr	r3, [r7, #28]
 8000ac0:	089b      	lsrs	r3, r3, #2
 8000ac2:	3302      	adds	r3, #2
 8000ac4:	69ba      	ldr	r2, [r7, #24]
 8000ac6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000aca:	4b3a      	ldr	r3, [pc, #232]	; (8000bb4 <HAL_GPIO_Init+0x330>)
 8000acc:	689b      	ldr	r3, [r3, #8]
 8000ace:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ad0:	693b      	ldr	r3, [r7, #16]
 8000ad2:	43db      	mvns	r3, r3
 8000ad4:	69ba      	ldr	r2, [r7, #24]
 8000ad6:	4013      	ands	r3, r2
 8000ad8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000ada:	683b      	ldr	r3, [r7, #0]
 8000adc:	685b      	ldr	r3, [r3, #4]
 8000ade:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	d003      	beq.n	8000aee <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8000ae6:	69ba      	ldr	r2, [r7, #24]
 8000ae8:	693b      	ldr	r3, [r7, #16]
 8000aea:	4313      	orrs	r3, r2
 8000aec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000aee:	4a31      	ldr	r2, [pc, #196]	; (8000bb4 <HAL_GPIO_Init+0x330>)
 8000af0:	69bb      	ldr	r3, [r7, #24]
 8000af2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000af4:	4b2f      	ldr	r3, [pc, #188]	; (8000bb4 <HAL_GPIO_Init+0x330>)
 8000af6:	68db      	ldr	r3, [r3, #12]
 8000af8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000afa:	693b      	ldr	r3, [r7, #16]
 8000afc:	43db      	mvns	r3, r3
 8000afe:	69ba      	ldr	r2, [r7, #24]
 8000b00:	4013      	ands	r3, r2
 8000b02:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000b04:	683b      	ldr	r3, [r7, #0]
 8000b06:	685b      	ldr	r3, [r3, #4]
 8000b08:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	d003      	beq.n	8000b18 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8000b10:	69ba      	ldr	r2, [r7, #24]
 8000b12:	693b      	ldr	r3, [r7, #16]
 8000b14:	4313      	orrs	r3, r2
 8000b16:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000b18:	4a26      	ldr	r2, [pc, #152]	; (8000bb4 <HAL_GPIO_Init+0x330>)
 8000b1a:	69bb      	ldr	r3, [r7, #24]
 8000b1c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000b1e:	4b25      	ldr	r3, [pc, #148]	; (8000bb4 <HAL_GPIO_Init+0x330>)
 8000b20:	685b      	ldr	r3, [r3, #4]
 8000b22:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000b24:	693b      	ldr	r3, [r7, #16]
 8000b26:	43db      	mvns	r3, r3
 8000b28:	69ba      	ldr	r2, [r7, #24]
 8000b2a:	4013      	ands	r3, r2
 8000b2c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000b2e:	683b      	ldr	r3, [r7, #0]
 8000b30:	685b      	ldr	r3, [r3, #4]
 8000b32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d003      	beq.n	8000b42 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8000b3a:	69ba      	ldr	r2, [r7, #24]
 8000b3c:	693b      	ldr	r3, [r7, #16]
 8000b3e:	4313      	orrs	r3, r2
 8000b40:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000b42:	4a1c      	ldr	r2, [pc, #112]	; (8000bb4 <HAL_GPIO_Init+0x330>)
 8000b44:	69bb      	ldr	r3, [r7, #24]
 8000b46:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000b48:	4b1a      	ldr	r3, [pc, #104]	; (8000bb4 <HAL_GPIO_Init+0x330>)
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000b4e:	693b      	ldr	r3, [r7, #16]
 8000b50:	43db      	mvns	r3, r3
 8000b52:	69ba      	ldr	r2, [r7, #24]
 8000b54:	4013      	ands	r3, r2
 8000b56:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000b58:	683b      	ldr	r3, [r7, #0]
 8000b5a:	685b      	ldr	r3, [r3, #4]
 8000b5c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d003      	beq.n	8000b6c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8000b64:	69ba      	ldr	r2, [r7, #24]
 8000b66:	693b      	ldr	r3, [r7, #16]
 8000b68:	4313      	orrs	r3, r2
 8000b6a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000b6c:	4a11      	ldr	r2, [pc, #68]	; (8000bb4 <HAL_GPIO_Init+0x330>)
 8000b6e:	69bb      	ldr	r3, [r7, #24]
 8000b70:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000b72:	69fb      	ldr	r3, [r7, #28]
 8000b74:	3301      	adds	r3, #1
 8000b76:	61fb      	str	r3, [r7, #28]
 8000b78:	69fb      	ldr	r3, [r7, #28]
 8000b7a:	2b0f      	cmp	r3, #15
 8000b7c:	f67f ae90 	bls.w	80008a0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000b80:	bf00      	nop
 8000b82:	3724      	adds	r7, #36	; 0x24
 8000b84:	46bd      	mov	sp, r7
 8000b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8a:	4770      	bx	lr
 8000b8c:	40023800 	.word	0x40023800
 8000b90:	40013800 	.word	0x40013800
 8000b94:	40020000 	.word	0x40020000
 8000b98:	40020400 	.word	0x40020400
 8000b9c:	40020800 	.word	0x40020800
 8000ba0:	40020c00 	.word	0x40020c00
 8000ba4:	40021000 	.word	0x40021000
 8000ba8:	40021400 	.word	0x40021400
 8000bac:	40021800 	.word	0x40021800
 8000bb0:	40021c00 	.word	0x40021c00
 8000bb4:	40013c00 	.word	0x40013c00

08000bb8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000bb8:	b480      	push	{r7}
 8000bba:	b083      	sub	sp, #12
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	6078      	str	r0, [r7, #4]
 8000bc0:	460b      	mov	r3, r1
 8000bc2:	807b      	strh	r3, [r7, #2]
 8000bc4:	4613      	mov	r3, r2
 8000bc6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000bc8:	787b      	ldrb	r3, [r7, #1]
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d003      	beq.n	8000bd6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000bce:	887a      	ldrh	r2, [r7, #2]
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000bd4:	e003      	b.n	8000bde <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000bd6:	887b      	ldrh	r3, [r7, #2]
 8000bd8:	041a      	lsls	r2, r3, #16
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	619a      	str	r2, [r3, #24]
}
 8000bde:	bf00      	nop
 8000be0:	370c      	adds	r7, #12
 8000be2:	46bd      	mov	sp, r7
 8000be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be8:	4770      	bx	lr

08000bea <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000bea:	b480      	push	{r7}
 8000bec:	b085      	sub	sp, #20
 8000bee:	af00      	add	r7, sp, #0
 8000bf0:	6078      	str	r0, [r7, #4]
 8000bf2:	460b      	mov	r3, r1
 8000bf4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	695b      	ldr	r3, [r3, #20]
 8000bfa:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000bfc:	887a      	ldrh	r2, [r7, #2]
 8000bfe:	68fb      	ldr	r3, [r7, #12]
 8000c00:	4013      	ands	r3, r2
 8000c02:	041a      	lsls	r2, r3, #16
 8000c04:	68fb      	ldr	r3, [r7, #12]
 8000c06:	43d9      	mvns	r1, r3
 8000c08:	887b      	ldrh	r3, [r7, #2]
 8000c0a:	400b      	ands	r3, r1
 8000c0c:	431a      	orrs	r2, r3
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	619a      	str	r2, [r3, #24]
}
 8000c12:	bf00      	nop
 8000c14:	3714      	adds	r7, #20
 8000c16:	46bd      	mov	sp, r7
 8000c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1c:	4770      	bx	lr
	...

08000c20 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b082      	sub	sp, #8
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	4603      	mov	r3, r0
 8000c28:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8000c2a:	4b08      	ldr	r3, [pc, #32]	; (8000c4c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000c2c:	695a      	ldr	r2, [r3, #20]
 8000c2e:	88fb      	ldrh	r3, [r7, #6]
 8000c30:	4013      	ands	r3, r2
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d006      	beq.n	8000c44 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000c36:	4a05      	ldr	r2, [pc, #20]	; (8000c4c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000c38:	88fb      	ldrh	r3, [r7, #6]
 8000c3a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000c3c:	88fb      	ldrh	r3, [r7, #6]
 8000c3e:	4618      	mov	r0, r3
 8000c40:	f002 f80a 	bl	8002c58 <HAL_GPIO_EXTI_Callback>
  }
}
 8000c44:	bf00      	nop
 8000c46:	3708      	adds	r7, #8
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	bd80      	pop	{r7, pc}
 8000c4c:	40013c00 	.word	0x40013c00

08000c50 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b086      	sub	sp, #24
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d101      	bne.n	8000c62 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000c5e:	2301      	movs	r3, #1
 8000c60:	e264      	b.n	800112c <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	f003 0301 	and.w	r3, r3, #1
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d075      	beq.n	8000d5a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000c6e:	4ba3      	ldr	r3, [pc, #652]	; (8000efc <HAL_RCC_OscConfig+0x2ac>)
 8000c70:	689b      	ldr	r3, [r3, #8]
 8000c72:	f003 030c 	and.w	r3, r3, #12
 8000c76:	2b04      	cmp	r3, #4
 8000c78:	d00c      	beq.n	8000c94 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000c7a:	4ba0      	ldr	r3, [pc, #640]	; (8000efc <HAL_RCC_OscConfig+0x2ac>)
 8000c7c:	689b      	ldr	r3, [r3, #8]
 8000c7e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000c82:	2b08      	cmp	r3, #8
 8000c84:	d112      	bne.n	8000cac <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000c86:	4b9d      	ldr	r3, [pc, #628]	; (8000efc <HAL_RCC_OscConfig+0x2ac>)
 8000c88:	685b      	ldr	r3, [r3, #4]
 8000c8a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000c8e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8000c92:	d10b      	bne.n	8000cac <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000c94:	4b99      	ldr	r3, [pc, #612]	; (8000efc <HAL_RCC_OscConfig+0x2ac>)
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d05b      	beq.n	8000d58 <HAL_RCC_OscConfig+0x108>
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	685b      	ldr	r3, [r3, #4]
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d157      	bne.n	8000d58 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8000ca8:	2301      	movs	r3, #1
 8000caa:	e23f      	b.n	800112c <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	685b      	ldr	r3, [r3, #4]
 8000cb0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000cb4:	d106      	bne.n	8000cc4 <HAL_RCC_OscConfig+0x74>
 8000cb6:	4a91      	ldr	r2, [pc, #580]	; (8000efc <HAL_RCC_OscConfig+0x2ac>)
 8000cb8:	4b90      	ldr	r3, [pc, #576]	; (8000efc <HAL_RCC_OscConfig+0x2ac>)
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000cc0:	6013      	str	r3, [r2, #0]
 8000cc2:	e01d      	b.n	8000d00 <HAL_RCC_OscConfig+0xb0>
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	685b      	ldr	r3, [r3, #4]
 8000cc8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000ccc:	d10c      	bne.n	8000ce8 <HAL_RCC_OscConfig+0x98>
 8000cce:	4a8b      	ldr	r2, [pc, #556]	; (8000efc <HAL_RCC_OscConfig+0x2ac>)
 8000cd0:	4b8a      	ldr	r3, [pc, #552]	; (8000efc <HAL_RCC_OscConfig+0x2ac>)
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000cd8:	6013      	str	r3, [r2, #0]
 8000cda:	4a88      	ldr	r2, [pc, #544]	; (8000efc <HAL_RCC_OscConfig+0x2ac>)
 8000cdc:	4b87      	ldr	r3, [pc, #540]	; (8000efc <HAL_RCC_OscConfig+0x2ac>)
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000ce4:	6013      	str	r3, [r2, #0]
 8000ce6:	e00b      	b.n	8000d00 <HAL_RCC_OscConfig+0xb0>
 8000ce8:	4a84      	ldr	r2, [pc, #528]	; (8000efc <HAL_RCC_OscConfig+0x2ac>)
 8000cea:	4b84      	ldr	r3, [pc, #528]	; (8000efc <HAL_RCC_OscConfig+0x2ac>)
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000cf2:	6013      	str	r3, [r2, #0]
 8000cf4:	4a81      	ldr	r2, [pc, #516]	; (8000efc <HAL_RCC_OscConfig+0x2ac>)
 8000cf6:	4b81      	ldr	r3, [pc, #516]	; (8000efc <HAL_RCC_OscConfig+0x2ac>)
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000cfe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	685b      	ldr	r3, [r3, #4]
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d013      	beq.n	8000d30 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d08:	f7ff fca0 	bl	800064c <HAL_GetTick>
 8000d0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d0e:	e008      	b.n	8000d22 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000d10:	f7ff fc9c 	bl	800064c <HAL_GetTick>
 8000d14:	4602      	mov	r2, r0
 8000d16:	693b      	ldr	r3, [r7, #16]
 8000d18:	1ad3      	subs	r3, r2, r3
 8000d1a:	2b64      	cmp	r3, #100	; 0x64
 8000d1c:	d901      	bls.n	8000d22 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8000d1e:	2303      	movs	r3, #3
 8000d20:	e204      	b.n	800112c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d22:	4b76      	ldr	r3, [pc, #472]	; (8000efc <HAL_RCC_OscConfig+0x2ac>)
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d0f0      	beq.n	8000d10 <HAL_RCC_OscConfig+0xc0>
 8000d2e:	e014      	b.n	8000d5a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d30:	f7ff fc8c 	bl	800064c <HAL_GetTick>
 8000d34:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000d36:	e008      	b.n	8000d4a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000d38:	f7ff fc88 	bl	800064c <HAL_GetTick>
 8000d3c:	4602      	mov	r2, r0
 8000d3e:	693b      	ldr	r3, [r7, #16]
 8000d40:	1ad3      	subs	r3, r2, r3
 8000d42:	2b64      	cmp	r3, #100	; 0x64
 8000d44:	d901      	bls.n	8000d4a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8000d46:	2303      	movs	r3, #3
 8000d48:	e1f0      	b.n	800112c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000d4a:	4b6c      	ldr	r3, [pc, #432]	; (8000efc <HAL_RCC_OscConfig+0x2ac>)
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d1f0      	bne.n	8000d38 <HAL_RCC_OscConfig+0xe8>
 8000d56:	e000      	b.n	8000d5a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000d58:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	f003 0302 	and.w	r3, r3, #2
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d063      	beq.n	8000e2e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000d66:	4b65      	ldr	r3, [pc, #404]	; (8000efc <HAL_RCC_OscConfig+0x2ac>)
 8000d68:	689b      	ldr	r3, [r3, #8]
 8000d6a:	f003 030c 	and.w	r3, r3, #12
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d00b      	beq.n	8000d8a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000d72:	4b62      	ldr	r3, [pc, #392]	; (8000efc <HAL_RCC_OscConfig+0x2ac>)
 8000d74:	689b      	ldr	r3, [r3, #8]
 8000d76:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000d7a:	2b08      	cmp	r3, #8
 8000d7c:	d11c      	bne.n	8000db8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000d7e:	4b5f      	ldr	r3, [pc, #380]	; (8000efc <HAL_RCC_OscConfig+0x2ac>)
 8000d80:	685b      	ldr	r3, [r3, #4]
 8000d82:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d116      	bne.n	8000db8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000d8a:	4b5c      	ldr	r3, [pc, #368]	; (8000efc <HAL_RCC_OscConfig+0x2ac>)
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	f003 0302 	and.w	r3, r3, #2
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d005      	beq.n	8000da2 <HAL_RCC_OscConfig+0x152>
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	68db      	ldr	r3, [r3, #12]
 8000d9a:	2b01      	cmp	r3, #1
 8000d9c:	d001      	beq.n	8000da2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8000d9e:	2301      	movs	r3, #1
 8000da0:	e1c4      	b.n	800112c <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000da2:	4956      	ldr	r1, [pc, #344]	; (8000efc <HAL_RCC_OscConfig+0x2ac>)
 8000da4:	4b55      	ldr	r3, [pc, #340]	; (8000efc <HAL_RCC_OscConfig+0x2ac>)
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	691b      	ldr	r3, [r3, #16]
 8000db0:	00db      	lsls	r3, r3, #3
 8000db2:	4313      	orrs	r3, r2
 8000db4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000db6:	e03a      	b.n	8000e2e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	68db      	ldr	r3, [r3, #12]
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	d020      	beq.n	8000e02 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000dc0:	4b4f      	ldr	r3, [pc, #316]	; (8000f00 <HAL_RCC_OscConfig+0x2b0>)
 8000dc2:	2201      	movs	r2, #1
 8000dc4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000dc6:	f7ff fc41 	bl	800064c <HAL_GetTick>
 8000dca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000dcc:	e008      	b.n	8000de0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000dce:	f7ff fc3d 	bl	800064c <HAL_GetTick>
 8000dd2:	4602      	mov	r2, r0
 8000dd4:	693b      	ldr	r3, [r7, #16]
 8000dd6:	1ad3      	subs	r3, r2, r3
 8000dd8:	2b02      	cmp	r3, #2
 8000dda:	d901      	bls.n	8000de0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8000ddc:	2303      	movs	r3, #3
 8000dde:	e1a5      	b.n	800112c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000de0:	4b46      	ldr	r3, [pc, #280]	; (8000efc <HAL_RCC_OscConfig+0x2ac>)
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	f003 0302 	and.w	r3, r3, #2
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	d0f0      	beq.n	8000dce <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000dec:	4943      	ldr	r1, [pc, #268]	; (8000efc <HAL_RCC_OscConfig+0x2ac>)
 8000dee:	4b43      	ldr	r3, [pc, #268]	; (8000efc <HAL_RCC_OscConfig+0x2ac>)
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	691b      	ldr	r3, [r3, #16]
 8000dfa:	00db      	lsls	r3, r3, #3
 8000dfc:	4313      	orrs	r3, r2
 8000dfe:	600b      	str	r3, [r1, #0]
 8000e00:	e015      	b.n	8000e2e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000e02:	4b3f      	ldr	r3, [pc, #252]	; (8000f00 <HAL_RCC_OscConfig+0x2b0>)
 8000e04:	2200      	movs	r2, #0
 8000e06:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000e08:	f7ff fc20 	bl	800064c <HAL_GetTick>
 8000e0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000e0e:	e008      	b.n	8000e22 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000e10:	f7ff fc1c 	bl	800064c <HAL_GetTick>
 8000e14:	4602      	mov	r2, r0
 8000e16:	693b      	ldr	r3, [r7, #16]
 8000e18:	1ad3      	subs	r3, r2, r3
 8000e1a:	2b02      	cmp	r3, #2
 8000e1c:	d901      	bls.n	8000e22 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8000e1e:	2303      	movs	r3, #3
 8000e20:	e184      	b.n	800112c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000e22:	4b36      	ldr	r3, [pc, #216]	; (8000efc <HAL_RCC_OscConfig+0x2ac>)
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	f003 0302 	and.w	r3, r3, #2
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d1f0      	bne.n	8000e10 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	f003 0308 	and.w	r3, r3, #8
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d030      	beq.n	8000e9c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	695b      	ldr	r3, [r3, #20]
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d016      	beq.n	8000e70 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000e42:	4b30      	ldr	r3, [pc, #192]	; (8000f04 <HAL_RCC_OscConfig+0x2b4>)
 8000e44:	2201      	movs	r2, #1
 8000e46:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000e48:	f7ff fc00 	bl	800064c <HAL_GetTick>
 8000e4c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000e4e:	e008      	b.n	8000e62 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000e50:	f7ff fbfc 	bl	800064c <HAL_GetTick>
 8000e54:	4602      	mov	r2, r0
 8000e56:	693b      	ldr	r3, [r7, #16]
 8000e58:	1ad3      	subs	r3, r2, r3
 8000e5a:	2b02      	cmp	r3, #2
 8000e5c:	d901      	bls.n	8000e62 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8000e5e:	2303      	movs	r3, #3
 8000e60:	e164      	b.n	800112c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000e62:	4b26      	ldr	r3, [pc, #152]	; (8000efc <HAL_RCC_OscConfig+0x2ac>)
 8000e64:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000e66:	f003 0302 	and.w	r3, r3, #2
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d0f0      	beq.n	8000e50 <HAL_RCC_OscConfig+0x200>
 8000e6e:	e015      	b.n	8000e9c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000e70:	4b24      	ldr	r3, [pc, #144]	; (8000f04 <HAL_RCC_OscConfig+0x2b4>)
 8000e72:	2200      	movs	r2, #0
 8000e74:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000e76:	f7ff fbe9 	bl	800064c <HAL_GetTick>
 8000e7a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000e7c:	e008      	b.n	8000e90 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000e7e:	f7ff fbe5 	bl	800064c <HAL_GetTick>
 8000e82:	4602      	mov	r2, r0
 8000e84:	693b      	ldr	r3, [r7, #16]
 8000e86:	1ad3      	subs	r3, r2, r3
 8000e88:	2b02      	cmp	r3, #2
 8000e8a:	d901      	bls.n	8000e90 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8000e8c:	2303      	movs	r3, #3
 8000e8e:	e14d      	b.n	800112c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000e90:	4b1a      	ldr	r3, [pc, #104]	; (8000efc <HAL_RCC_OscConfig+0x2ac>)
 8000e92:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000e94:	f003 0302 	and.w	r3, r3, #2
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d1f0      	bne.n	8000e7e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	f003 0304 	and.w	r3, r3, #4
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	f000 80a0 	beq.w	8000fea <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000eaa:	2300      	movs	r3, #0
 8000eac:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000eae:	4b13      	ldr	r3, [pc, #76]	; (8000efc <HAL_RCC_OscConfig+0x2ac>)
 8000eb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eb2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d10f      	bne.n	8000eda <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000eba:	2300      	movs	r3, #0
 8000ebc:	60bb      	str	r3, [r7, #8]
 8000ebe:	4a0f      	ldr	r2, [pc, #60]	; (8000efc <HAL_RCC_OscConfig+0x2ac>)
 8000ec0:	4b0e      	ldr	r3, [pc, #56]	; (8000efc <HAL_RCC_OscConfig+0x2ac>)
 8000ec2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ec4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ec8:	6413      	str	r3, [r2, #64]	; 0x40
 8000eca:	4b0c      	ldr	r3, [pc, #48]	; (8000efc <HAL_RCC_OscConfig+0x2ac>)
 8000ecc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ece:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ed2:	60bb      	str	r3, [r7, #8]
 8000ed4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000ed6:	2301      	movs	r3, #1
 8000ed8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000eda:	4b0b      	ldr	r3, [pc, #44]	; (8000f08 <HAL_RCC_OscConfig+0x2b8>)
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d121      	bne.n	8000f2a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000ee6:	4a08      	ldr	r2, [pc, #32]	; (8000f08 <HAL_RCC_OscConfig+0x2b8>)
 8000ee8:	4b07      	ldr	r3, [pc, #28]	; (8000f08 <HAL_RCC_OscConfig+0x2b8>)
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ef0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000ef2:	f7ff fbab 	bl	800064c <HAL_GetTick>
 8000ef6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000ef8:	e011      	b.n	8000f1e <HAL_RCC_OscConfig+0x2ce>
 8000efa:	bf00      	nop
 8000efc:	40023800 	.word	0x40023800
 8000f00:	42470000 	.word	0x42470000
 8000f04:	42470e80 	.word	0x42470e80
 8000f08:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000f0c:	f7ff fb9e 	bl	800064c <HAL_GetTick>
 8000f10:	4602      	mov	r2, r0
 8000f12:	693b      	ldr	r3, [r7, #16]
 8000f14:	1ad3      	subs	r3, r2, r3
 8000f16:	2b02      	cmp	r3, #2
 8000f18:	d901      	bls.n	8000f1e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8000f1a:	2303      	movs	r3, #3
 8000f1c:	e106      	b.n	800112c <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f1e:	4b85      	ldr	r3, [pc, #532]	; (8001134 <HAL_RCC_OscConfig+0x4e4>)
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d0f0      	beq.n	8000f0c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	689b      	ldr	r3, [r3, #8]
 8000f2e:	2b01      	cmp	r3, #1
 8000f30:	d106      	bne.n	8000f40 <HAL_RCC_OscConfig+0x2f0>
 8000f32:	4a81      	ldr	r2, [pc, #516]	; (8001138 <HAL_RCC_OscConfig+0x4e8>)
 8000f34:	4b80      	ldr	r3, [pc, #512]	; (8001138 <HAL_RCC_OscConfig+0x4e8>)
 8000f36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000f38:	f043 0301 	orr.w	r3, r3, #1
 8000f3c:	6713      	str	r3, [r2, #112]	; 0x70
 8000f3e:	e01c      	b.n	8000f7a <HAL_RCC_OscConfig+0x32a>
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	689b      	ldr	r3, [r3, #8]
 8000f44:	2b05      	cmp	r3, #5
 8000f46:	d10c      	bne.n	8000f62 <HAL_RCC_OscConfig+0x312>
 8000f48:	4a7b      	ldr	r2, [pc, #492]	; (8001138 <HAL_RCC_OscConfig+0x4e8>)
 8000f4a:	4b7b      	ldr	r3, [pc, #492]	; (8001138 <HAL_RCC_OscConfig+0x4e8>)
 8000f4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000f4e:	f043 0304 	orr.w	r3, r3, #4
 8000f52:	6713      	str	r3, [r2, #112]	; 0x70
 8000f54:	4a78      	ldr	r2, [pc, #480]	; (8001138 <HAL_RCC_OscConfig+0x4e8>)
 8000f56:	4b78      	ldr	r3, [pc, #480]	; (8001138 <HAL_RCC_OscConfig+0x4e8>)
 8000f58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000f5a:	f043 0301 	orr.w	r3, r3, #1
 8000f5e:	6713      	str	r3, [r2, #112]	; 0x70
 8000f60:	e00b      	b.n	8000f7a <HAL_RCC_OscConfig+0x32a>
 8000f62:	4a75      	ldr	r2, [pc, #468]	; (8001138 <HAL_RCC_OscConfig+0x4e8>)
 8000f64:	4b74      	ldr	r3, [pc, #464]	; (8001138 <HAL_RCC_OscConfig+0x4e8>)
 8000f66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000f68:	f023 0301 	bic.w	r3, r3, #1
 8000f6c:	6713      	str	r3, [r2, #112]	; 0x70
 8000f6e:	4a72      	ldr	r2, [pc, #456]	; (8001138 <HAL_RCC_OscConfig+0x4e8>)
 8000f70:	4b71      	ldr	r3, [pc, #452]	; (8001138 <HAL_RCC_OscConfig+0x4e8>)
 8000f72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000f74:	f023 0304 	bic.w	r3, r3, #4
 8000f78:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	689b      	ldr	r3, [r3, #8]
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d015      	beq.n	8000fae <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000f82:	f7ff fb63 	bl	800064c <HAL_GetTick>
 8000f86:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000f88:	e00a      	b.n	8000fa0 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000f8a:	f7ff fb5f 	bl	800064c <HAL_GetTick>
 8000f8e:	4602      	mov	r2, r0
 8000f90:	693b      	ldr	r3, [r7, #16]
 8000f92:	1ad3      	subs	r3, r2, r3
 8000f94:	f241 3288 	movw	r2, #5000	; 0x1388
 8000f98:	4293      	cmp	r3, r2
 8000f9a:	d901      	bls.n	8000fa0 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8000f9c:	2303      	movs	r3, #3
 8000f9e:	e0c5      	b.n	800112c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000fa0:	4b65      	ldr	r3, [pc, #404]	; (8001138 <HAL_RCC_OscConfig+0x4e8>)
 8000fa2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000fa4:	f003 0302 	and.w	r3, r3, #2
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d0ee      	beq.n	8000f8a <HAL_RCC_OscConfig+0x33a>
 8000fac:	e014      	b.n	8000fd8 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000fae:	f7ff fb4d 	bl	800064c <HAL_GetTick>
 8000fb2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000fb4:	e00a      	b.n	8000fcc <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000fb6:	f7ff fb49 	bl	800064c <HAL_GetTick>
 8000fba:	4602      	mov	r2, r0
 8000fbc:	693b      	ldr	r3, [r7, #16]
 8000fbe:	1ad3      	subs	r3, r2, r3
 8000fc0:	f241 3288 	movw	r2, #5000	; 0x1388
 8000fc4:	4293      	cmp	r3, r2
 8000fc6:	d901      	bls.n	8000fcc <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8000fc8:	2303      	movs	r3, #3
 8000fca:	e0af      	b.n	800112c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000fcc:	4b5a      	ldr	r3, [pc, #360]	; (8001138 <HAL_RCC_OscConfig+0x4e8>)
 8000fce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000fd0:	f003 0302 	and.w	r3, r3, #2
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d1ee      	bne.n	8000fb6 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8000fd8:	7dfb      	ldrb	r3, [r7, #23]
 8000fda:	2b01      	cmp	r3, #1
 8000fdc:	d105      	bne.n	8000fea <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000fde:	4a56      	ldr	r2, [pc, #344]	; (8001138 <HAL_RCC_OscConfig+0x4e8>)
 8000fe0:	4b55      	ldr	r3, [pc, #340]	; (8001138 <HAL_RCC_OscConfig+0x4e8>)
 8000fe2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fe4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000fe8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	699b      	ldr	r3, [r3, #24]
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	f000 809b 	beq.w	800112a <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8000ff4:	4b50      	ldr	r3, [pc, #320]	; (8001138 <HAL_RCC_OscConfig+0x4e8>)
 8000ff6:	689b      	ldr	r3, [r3, #8]
 8000ff8:	f003 030c 	and.w	r3, r3, #12
 8000ffc:	2b08      	cmp	r3, #8
 8000ffe:	d05c      	beq.n	80010ba <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	699b      	ldr	r3, [r3, #24]
 8001004:	2b02      	cmp	r3, #2
 8001006:	d141      	bne.n	800108c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001008:	4b4c      	ldr	r3, [pc, #304]	; (800113c <HAL_RCC_OscConfig+0x4ec>)
 800100a:	2200      	movs	r2, #0
 800100c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800100e:	f7ff fb1d 	bl	800064c <HAL_GetTick>
 8001012:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001014:	e008      	b.n	8001028 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001016:	f7ff fb19 	bl	800064c <HAL_GetTick>
 800101a:	4602      	mov	r2, r0
 800101c:	693b      	ldr	r3, [r7, #16]
 800101e:	1ad3      	subs	r3, r2, r3
 8001020:	2b02      	cmp	r3, #2
 8001022:	d901      	bls.n	8001028 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8001024:	2303      	movs	r3, #3
 8001026:	e081      	b.n	800112c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001028:	4b43      	ldr	r3, [pc, #268]	; (8001138 <HAL_RCC_OscConfig+0x4e8>)
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001030:	2b00      	cmp	r3, #0
 8001032:	d1f0      	bne.n	8001016 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001034:	4940      	ldr	r1, [pc, #256]	; (8001138 <HAL_RCC_OscConfig+0x4e8>)
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	69da      	ldr	r2, [r3, #28]
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	6a1b      	ldr	r3, [r3, #32]
 800103e:	431a      	orrs	r2, r3
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001044:	019b      	lsls	r3, r3, #6
 8001046:	431a      	orrs	r2, r3
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800104c:	085b      	lsrs	r3, r3, #1
 800104e:	3b01      	subs	r3, #1
 8001050:	041b      	lsls	r3, r3, #16
 8001052:	431a      	orrs	r2, r3
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001058:	061b      	lsls	r3, r3, #24
 800105a:	4313      	orrs	r3, r2
 800105c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800105e:	4b37      	ldr	r3, [pc, #220]	; (800113c <HAL_RCC_OscConfig+0x4ec>)
 8001060:	2201      	movs	r2, #1
 8001062:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001064:	f7ff faf2 	bl	800064c <HAL_GetTick>
 8001068:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800106a:	e008      	b.n	800107e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800106c:	f7ff faee 	bl	800064c <HAL_GetTick>
 8001070:	4602      	mov	r2, r0
 8001072:	693b      	ldr	r3, [r7, #16]
 8001074:	1ad3      	subs	r3, r2, r3
 8001076:	2b02      	cmp	r3, #2
 8001078:	d901      	bls.n	800107e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800107a:	2303      	movs	r3, #3
 800107c:	e056      	b.n	800112c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800107e:	4b2e      	ldr	r3, [pc, #184]	; (8001138 <HAL_RCC_OscConfig+0x4e8>)
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001086:	2b00      	cmp	r3, #0
 8001088:	d0f0      	beq.n	800106c <HAL_RCC_OscConfig+0x41c>
 800108a:	e04e      	b.n	800112a <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800108c:	4b2b      	ldr	r3, [pc, #172]	; (800113c <HAL_RCC_OscConfig+0x4ec>)
 800108e:	2200      	movs	r2, #0
 8001090:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001092:	f7ff fadb 	bl	800064c <HAL_GetTick>
 8001096:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001098:	e008      	b.n	80010ac <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800109a:	f7ff fad7 	bl	800064c <HAL_GetTick>
 800109e:	4602      	mov	r2, r0
 80010a0:	693b      	ldr	r3, [r7, #16]
 80010a2:	1ad3      	subs	r3, r2, r3
 80010a4:	2b02      	cmp	r3, #2
 80010a6:	d901      	bls.n	80010ac <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80010a8:	2303      	movs	r3, #3
 80010aa:	e03f      	b.n	800112c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80010ac:	4b22      	ldr	r3, [pc, #136]	; (8001138 <HAL_RCC_OscConfig+0x4e8>)
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d1f0      	bne.n	800109a <HAL_RCC_OscConfig+0x44a>
 80010b8:	e037      	b.n	800112a <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	699b      	ldr	r3, [r3, #24]
 80010be:	2b01      	cmp	r3, #1
 80010c0:	d101      	bne.n	80010c6 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80010c2:	2301      	movs	r3, #1
 80010c4:	e032      	b.n	800112c <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80010c6:	4b1c      	ldr	r3, [pc, #112]	; (8001138 <HAL_RCC_OscConfig+0x4e8>)
 80010c8:	685b      	ldr	r3, [r3, #4]
 80010ca:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	699b      	ldr	r3, [r3, #24]
 80010d0:	2b01      	cmp	r3, #1
 80010d2:	d028      	beq.n	8001126 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80010d4:	68fb      	ldr	r3, [r7, #12]
 80010d6:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80010de:	429a      	cmp	r2, r3
 80010e0:	d121      	bne.n	8001126 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80010e2:	68fb      	ldr	r3, [r7, #12]
 80010e4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80010ec:	429a      	cmp	r2, r3
 80010ee:	d11a      	bne.n	8001126 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80010f0:	68fa      	ldr	r2, [r7, #12]
 80010f2:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80010f6:	4013      	ands	r3, r2
 80010f8:	687a      	ldr	r2, [r7, #4]
 80010fa:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80010fc:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80010fe:	4293      	cmp	r3, r2
 8001100:	d111      	bne.n	8001126 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001102:	68fb      	ldr	r3, [r7, #12]
 8001104:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800110c:	085b      	lsrs	r3, r3, #1
 800110e:	3b01      	subs	r3, #1
 8001110:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001112:	429a      	cmp	r2, r3
 8001114:	d107      	bne.n	8001126 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001116:	68fb      	ldr	r3, [r7, #12]
 8001118:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001120:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001122:	429a      	cmp	r2, r3
 8001124:	d001      	beq.n	800112a <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8001126:	2301      	movs	r3, #1
 8001128:	e000      	b.n	800112c <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800112a:	2300      	movs	r3, #0
}
 800112c:	4618      	mov	r0, r3
 800112e:	3718      	adds	r7, #24
 8001130:	46bd      	mov	sp, r7
 8001132:	bd80      	pop	{r7, pc}
 8001134:	40007000 	.word	0x40007000
 8001138:	40023800 	.word	0x40023800
 800113c:	42470060 	.word	0x42470060

08001140 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	b084      	sub	sp, #16
 8001144:	af00      	add	r7, sp, #0
 8001146:	6078      	str	r0, [r7, #4]
 8001148:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	2b00      	cmp	r3, #0
 800114e:	d101      	bne.n	8001154 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001150:	2301      	movs	r3, #1
 8001152:	e0cc      	b.n	80012ee <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001154:	4b68      	ldr	r3, [pc, #416]	; (80012f8 <HAL_RCC_ClockConfig+0x1b8>)
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	f003 0207 	and.w	r2, r3, #7
 800115c:	683b      	ldr	r3, [r7, #0]
 800115e:	429a      	cmp	r2, r3
 8001160:	d20c      	bcs.n	800117c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001162:	4b65      	ldr	r3, [pc, #404]	; (80012f8 <HAL_RCC_ClockConfig+0x1b8>)
 8001164:	683a      	ldr	r2, [r7, #0]
 8001166:	b2d2      	uxtb	r2, r2
 8001168:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800116a:	4b63      	ldr	r3, [pc, #396]	; (80012f8 <HAL_RCC_ClockConfig+0x1b8>)
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	f003 0207 	and.w	r2, r3, #7
 8001172:	683b      	ldr	r3, [r7, #0]
 8001174:	429a      	cmp	r2, r3
 8001176:	d001      	beq.n	800117c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001178:	2301      	movs	r3, #1
 800117a:	e0b8      	b.n	80012ee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	f003 0302 	and.w	r3, r3, #2
 8001184:	2b00      	cmp	r3, #0
 8001186:	d020      	beq.n	80011ca <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	f003 0304 	and.w	r3, r3, #4
 8001190:	2b00      	cmp	r3, #0
 8001192:	d005      	beq.n	80011a0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001194:	4a59      	ldr	r2, [pc, #356]	; (80012fc <HAL_RCC_ClockConfig+0x1bc>)
 8001196:	4b59      	ldr	r3, [pc, #356]	; (80012fc <HAL_RCC_ClockConfig+0x1bc>)
 8001198:	689b      	ldr	r3, [r3, #8]
 800119a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800119e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	f003 0308 	and.w	r3, r3, #8
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d005      	beq.n	80011b8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80011ac:	4a53      	ldr	r2, [pc, #332]	; (80012fc <HAL_RCC_ClockConfig+0x1bc>)
 80011ae:	4b53      	ldr	r3, [pc, #332]	; (80012fc <HAL_RCC_ClockConfig+0x1bc>)
 80011b0:	689b      	ldr	r3, [r3, #8]
 80011b2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80011b6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80011b8:	4950      	ldr	r1, [pc, #320]	; (80012fc <HAL_RCC_ClockConfig+0x1bc>)
 80011ba:	4b50      	ldr	r3, [pc, #320]	; (80012fc <HAL_RCC_ClockConfig+0x1bc>)
 80011bc:	689b      	ldr	r3, [r3, #8]
 80011be:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	689b      	ldr	r3, [r3, #8]
 80011c6:	4313      	orrs	r3, r2
 80011c8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	f003 0301 	and.w	r3, r3, #1
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d044      	beq.n	8001260 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	685b      	ldr	r3, [r3, #4]
 80011da:	2b01      	cmp	r3, #1
 80011dc:	d107      	bne.n	80011ee <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011de:	4b47      	ldr	r3, [pc, #284]	; (80012fc <HAL_RCC_ClockConfig+0x1bc>)
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d119      	bne.n	800121e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80011ea:	2301      	movs	r3, #1
 80011ec:	e07f      	b.n	80012ee <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	685b      	ldr	r3, [r3, #4]
 80011f2:	2b02      	cmp	r3, #2
 80011f4:	d003      	beq.n	80011fe <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80011fa:	2b03      	cmp	r3, #3
 80011fc:	d107      	bne.n	800120e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80011fe:	4b3f      	ldr	r3, [pc, #252]	; (80012fc <HAL_RCC_ClockConfig+0x1bc>)
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001206:	2b00      	cmp	r3, #0
 8001208:	d109      	bne.n	800121e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800120a:	2301      	movs	r3, #1
 800120c:	e06f      	b.n	80012ee <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800120e:	4b3b      	ldr	r3, [pc, #236]	; (80012fc <HAL_RCC_ClockConfig+0x1bc>)
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	f003 0302 	and.w	r3, r3, #2
 8001216:	2b00      	cmp	r3, #0
 8001218:	d101      	bne.n	800121e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800121a:	2301      	movs	r3, #1
 800121c:	e067      	b.n	80012ee <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800121e:	4937      	ldr	r1, [pc, #220]	; (80012fc <HAL_RCC_ClockConfig+0x1bc>)
 8001220:	4b36      	ldr	r3, [pc, #216]	; (80012fc <HAL_RCC_ClockConfig+0x1bc>)
 8001222:	689b      	ldr	r3, [r3, #8]
 8001224:	f023 0203 	bic.w	r2, r3, #3
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	685b      	ldr	r3, [r3, #4]
 800122c:	4313      	orrs	r3, r2
 800122e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001230:	f7ff fa0c 	bl	800064c <HAL_GetTick>
 8001234:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001236:	e00a      	b.n	800124e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001238:	f7ff fa08 	bl	800064c <HAL_GetTick>
 800123c:	4602      	mov	r2, r0
 800123e:	68fb      	ldr	r3, [r7, #12]
 8001240:	1ad3      	subs	r3, r2, r3
 8001242:	f241 3288 	movw	r2, #5000	; 0x1388
 8001246:	4293      	cmp	r3, r2
 8001248:	d901      	bls.n	800124e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800124a:	2303      	movs	r3, #3
 800124c:	e04f      	b.n	80012ee <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800124e:	4b2b      	ldr	r3, [pc, #172]	; (80012fc <HAL_RCC_ClockConfig+0x1bc>)
 8001250:	689b      	ldr	r3, [r3, #8]
 8001252:	f003 020c 	and.w	r2, r3, #12
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	685b      	ldr	r3, [r3, #4]
 800125a:	009b      	lsls	r3, r3, #2
 800125c:	429a      	cmp	r2, r3
 800125e:	d1eb      	bne.n	8001238 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001260:	4b25      	ldr	r3, [pc, #148]	; (80012f8 <HAL_RCC_ClockConfig+0x1b8>)
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	f003 0207 	and.w	r2, r3, #7
 8001268:	683b      	ldr	r3, [r7, #0]
 800126a:	429a      	cmp	r2, r3
 800126c:	d90c      	bls.n	8001288 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800126e:	4b22      	ldr	r3, [pc, #136]	; (80012f8 <HAL_RCC_ClockConfig+0x1b8>)
 8001270:	683a      	ldr	r2, [r7, #0]
 8001272:	b2d2      	uxtb	r2, r2
 8001274:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001276:	4b20      	ldr	r3, [pc, #128]	; (80012f8 <HAL_RCC_ClockConfig+0x1b8>)
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	f003 0207 	and.w	r2, r3, #7
 800127e:	683b      	ldr	r3, [r7, #0]
 8001280:	429a      	cmp	r2, r3
 8001282:	d001      	beq.n	8001288 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001284:	2301      	movs	r3, #1
 8001286:	e032      	b.n	80012ee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	f003 0304 	and.w	r3, r3, #4
 8001290:	2b00      	cmp	r3, #0
 8001292:	d008      	beq.n	80012a6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001294:	4919      	ldr	r1, [pc, #100]	; (80012fc <HAL_RCC_ClockConfig+0x1bc>)
 8001296:	4b19      	ldr	r3, [pc, #100]	; (80012fc <HAL_RCC_ClockConfig+0x1bc>)
 8001298:	689b      	ldr	r3, [r3, #8]
 800129a:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	68db      	ldr	r3, [r3, #12]
 80012a2:	4313      	orrs	r3, r2
 80012a4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	f003 0308 	and.w	r3, r3, #8
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d009      	beq.n	80012c6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80012b2:	4912      	ldr	r1, [pc, #72]	; (80012fc <HAL_RCC_ClockConfig+0x1bc>)
 80012b4:	4b11      	ldr	r3, [pc, #68]	; (80012fc <HAL_RCC_ClockConfig+0x1bc>)
 80012b6:	689b      	ldr	r3, [r3, #8]
 80012b8:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	691b      	ldr	r3, [r3, #16]
 80012c0:	00db      	lsls	r3, r3, #3
 80012c2:	4313      	orrs	r3, r2
 80012c4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80012c6:	f000 f821 	bl	800130c <HAL_RCC_GetSysClockFreq>
 80012ca:	4601      	mov	r1, r0
 80012cc:	4b0b      	ldr	r3, [pc, #44]	; (80012fc <HAL_RCC_ClockConfig+0x1bc>)
 80012ce:	689b      	ldr	r3, [r3, #8]
 80012d0:	091b      	lsrs	r3, r3, #4
 80012d2:	f003 030f 	and.w	r3, r3, #15
 80012d6:	4a0a      	ldr	r2, [pc, #40]	; (8001300 <HAL_RCC_ClockConfig+0x1c0>)
 80012d8:	5cd3      	ldrb	r3, [r2, r3]
 80012da:	fa21 f303 	lsr.w	r3, r1, r3
 80012de:	4a09      	ldr	r2, [pc, #36]	; (8001304 <HAL_RCC_ClockConfig+0x1c4>)
 80012e0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80012e2:	4b09      	ldr	r3, [pc, #36]	; (8001308 <HAL_RCC_ClockConfig+0x1c8>)
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	4618      	mov	r0, r3
 80012e8:	f7ff f96c 	bl	80005c4 <HAL_InitTick>

  return HAL_OK;
 80012ec:	2300      	movs	r3, #0
}
 80012ee:	4618      	mov	r0, r3
 80012f0:	3710      	adds	r7, #16
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bd80      	pop	{r7, pc}
 80012f6:	bf00      	nop
 80012f8:	40023c00 	.word	0x40023c00
 80012fc:	40023800 	.word	0x40023800
 8001300:	08004f88 	.word	0x08004f88
 8001304:	20000008 	.word	0x20000008
 8001308:	20000000 	.word	0x20000000

0800130c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800130c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001310:	b08f      	sub	sp, #60	; 0x3c
 8001312:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001314:	2300      	movs	r3, #0
 8001316:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001318:	2300      	movs	r3, #0
 800131a:	637b      	str	r3, [r7, #52]	; 0x34
 800131c:	2300      	movs	r3, #0
 800131e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t sysclockfreq = 0U;
 8001320:	2300      	movs	r3, #0
 8001322:	633b      	str	r3, [r7, #48]	; 0x30

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001324:	4b62      	ldr	r3, [pc, #392]	; (80014b0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001326:	689b      	ldr	r3, [r3, #8]
 8001328:	f003 030c 	and.w	r3, r3, #12
 800132c:	2b04      	cmp	r3, #4
 800132e:	d007      	beq.n	8001340 <HAL_RCC_GetSysClockFreq+0x34>
 8001330:	2b08      	cmp	r3, #8
 8001332:	d008      	beq.n	8001346 <HAL_RCC_GetSysClockFreq+0x3a>
 8001334:	2b00      	cmp	r3, #0
 8001336:	f040 80b2 	bne.w	800149e <HAL_RCC_GetSysClockFreq+0x192>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800133a:	4b5e      	ldr	r3, [pc, #376]	; (80014b4 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800133c:	633b      	str	r3, [r7, #48]	; 0x30
       break;
 800133e:	e0b1      	b.n	80014a4 <HAL_RCC_GetSysClockFreq+0x198>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001340:	4b5d      	ldr	r3, [pc, #372]	; (80014b8 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8001342:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001344:	e0ae      	b.n	80014a4 <HAL_RCC_GetSysClockFreq+0x198>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001346:	4b5a      	ldr	r3, [pc, #360]	; (80014b0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001348:	685b      	ldr	r3, [r3, #4]
 800134a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800134e:	62fb      	str	r3, [r7, #44]	; 0x2c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001350:	4b57      	ldr	r3, [pc, #348]	; (80014b0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001352:	685b      	ldr	r3, [r3, #4]
 8001354:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001358:	2b00      	cmp	r3, #0
 800135a:	d04e      	beq.n	80013fa <HAL_RCC_GetSysClockFreq+0xee>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800135c:	4b54      	ldr	r3, [pc, #336]	; (80014b0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800135e:	685b      	ldr	r3, [r3, #4]
 8001360:	099b      	lsrs	r3, r3, #6
 8001362:	f04f 0400 	mov.w	r4, #0
 8001366:	f240 11ff 	movw	r1, #511	; 0x1ff
 800136a:	f04f 0200 	mov.w	r2, #0
 800136e:	ea01 0103 	and.w	r1, r1, r3
 8001372:	ea02 0204 	and.w	r2, r2, r4
 8001376:	460b      	mov	r3, r1
 8001378:	4614      	mov	r4, r2
 800137a:	0160      	lsls	r0, r4, #5
 800137c:	6278      	str	r0, [r7, #36]	; 0x24
 800137e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001380:	ea40 60d3 	orr.w	r0, r0, r3, lsr #27
 8001384:	6278      	str	r0, [r7, #36]	; 0x24
 8001386:	015b      	lsls	r3, r3, #5
 8001388:	623b      	str	r3, [r7, #32]
 800138a:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 800138e:	1a5b      	subs	r3, r3, r1
 8001390:	eb64 0402 	sbc.w	r4, r4, r2
 8001394:	ea4f 1984 	mov.w	r9, r4, lsl #6
 8001398:	ea49 6993 	orr.w	r9, r9, r3, lsr #26
 800139c:	ea4f 1883 	mov.w	r8, r3, lsl #6
 80013a0:	ebb8 0803 	subs.w	r8, r8, r3
 80013a4:	eb69 0904 	sbc.w	r9, r9, r4
 80013a8:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80013ac:	61fb      	str	r3, [r7, #28]
 80013ae:	69fb      	ldr	r3, [r7, #28]
 80013b0:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80013b4:	61fb      	str	r3, [r7, #28]
 80013b6:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 80013ba:	61bb      	str	r3, [r7, #24]
 80013bc:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 80013c0:	eb18 0801 	adds.w	r8, r8, r1
 80013c4:	eb49 0902 	adc.w	r9, r9, r2
 80013c8:	ea4f 2349 	mov.w	r3, r9, lsl #9
 80013cc:	617b      	str	r3, [r7, #20]
 80013ce:	697b      	ldr	r3, [r7, #20]
 80013d0:	ea43 53d8 	orr.w	r3, r3, r8, lsr #23
 80013d4:	617b      	str	r3, [r7, #20]
 80013d6:	ea4f 2348 	mov.w	r3, r8, lsl #9
 80013da:	613b      	str	r3, [r7, #16]
 80013dc:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 80013e0:	4640      	mov	r0, r8
 80013e2:	4649      	mov	r1, r9
 80013e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013e6:	f04f 0400 	mov.w	r4, #0
 80013ea:	461a      	mov	r2, r3
 80013ec:	4623      	mov	r3, r4
 80013ee:	f7fe ff3f 	bl	8000270 <__aeabi_uldivmod>
 80013f2:	4603      	mov	r3, r0
 80013f4:	460c      	mov	r4, r1
 80013f6:	637b      	str	r3, [r7, #52]	; 0x34
 80013f8:	e043      	b.n	8001482 <HAL_RCC_GetSysClockFreq+0x176>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80013fa:	4b2d      	ldr	r3, [pc, #180]	; (80014b0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80013fc:	685b      	ldr	r3, [r3, #4]
 80013fe:	099b      	lsrs	r3, r3, #6
 8001400:	f04f 0400 	mov.w	r4, #0
 8001404:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001408:	f04f 0200 	mov.w	r2, #0
 800140c:	ea01 0103 	and.w	r1, r1, r3
 8001410:	ea02 0204 	and.w	r2, r2, r4
 8001414:	460b      	mov	r3, r1
 8001416:	4614      	mov	r4, r2
 8001418:	0160      	lsls	r0, r4, #5
 800141a:	60f8      	str	r0, [r7, #12]
 800141c:	68f8      	ldr	r0, [r7, #12]
 800141e:	ea40 60d3 	orr.w	r0, r0, r3, lsr #27
 8001422:	60f8      	str	r0, [r7, #12]
 8001424:	015b      	lsls	r3, r3, #5
 8001426:	60bb      	str	r3, [r7, #8]
 8001428:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 800142c:	1a5b      	subs	r3, r3, r1
 800142e:	eb64 0402 	sbc.w	r4, r4, r2
 8001432:	01a6      	lsls	r6, r4, #6
 8001434:	ea46 6693 	orr.w	r6, r6, r3, lsr #26
 8001438:	019d      	lsls	r5, r3, #6
 800143a:	1aed      	subs	r5, r5, r3
 800143c:	eb66 0604 	sbc.w	r6, r6, r4
 8001440:	00f3      	lsls	r3, r6, #3
 8001442:	607b      	str	r3, [r7, #4]
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	ea43 7355 	orr.w	r3, r3, r5, lsr #29
 800144a:	607b      	str	r3, [r7, #4]
 800144c:	00eb      	lsls	r3, r5, #3
 800144e:	603b      	str	r3, [r7, #0]
 8001450:	e897 0060 	ldmia.w	r7, {r5, r6}
 8001454:	186d      	adds	r5, r5, r1
 8001456:	eb46 0602 	adc.w	r6, r6, r2
 800145a:	ea4f 2b86 	mov.w	fp, r6, lsl #10
 800145e:	ea4b 5b95 	orr.w	fp, fp, r5, lsr #22
 8001462:	ea4f 2a85 	mov.w	sl, r5, lsl #10
 8001466:	4655      	mov	r5, sl
 8001468:	465e      	mov	r6, fp
 800146a:	4628      	mov	r0, r5
 800146c:	4631      	mov	r1, r6
 800146e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001470:	f04f 0400 	mov.w	r4, #0
 8001474:	461a      	mov	r2, r3
 8001476:	4623      	mov	r3, r4
 8001478:	f7fe fefa 	bl	8000270 <__aeabi_uldivmod>
 800147c:	4603      	mov	r3, r0
 800147e:	460c      	mov	r4, r1
 8001480:	637b      	str	r3, [r7, #52]	; 0x34
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001482:	4b0b      	ldr	r3, [pc, #44]	; (80014b0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001484:	685b      	ldr	r3, [r3, #4]
 8001486:	0c1b      	lsrs	r3, r3, #16
 8001488:	f003 0303 	and.w	r3, r3, #3
 800148c:	3301      	adds	r3, #1
 800148e:	005b      	lsls	r3, r3, #1
 8001490:	62bb      	str	r3, [r7, #40]	; 0x28

      sysclockfreq = pllvco/pllp;
 8001492:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001494:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001496:	fbb2 f3f3 	udiv	r3, r2, r3
 800149a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800149c:	e002      	b.n	80014a4 <HAL_RCC_GetSysClockFreq+0x198>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800149e:	4b05      	ldr	r3, [pc, #20]	; (80014b4 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80014a0:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80014a2:	bf00      	nop
    }
  }
  return sysclockfreq;
 80014a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 80014a6:	4618      	mov	r0, r3
 80014a8:	373c      	adds	r7, #60	; 0x3c
 80014aa:	46bd      	mov	sp, r7
 80014ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80014b0:	40023800 	.word	0x40023800
 80014b4:	00f42400 	.word	0x00f42400
 80014b8:	007a1200 	.word	0x007a1200

080014bc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80014bc:	b480      	push	{r7}
 80014be:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80014c0:	4b03      	ldr	r3, [pc, #12]	; (80014d0 <HAL_RCC_GetHCLKFreq+0x14>)
 80014c2:	681b      	ldr	r3, [r3, #0]
}
 80014c4:	4618      	mov	r0, r3
 80014c6:	46bd      	mov	sp, r7
 80014c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014cc:	4770      	bx	lr
 80014ce:	bf00      	nop
 80014d0:	20000008 	.word	0x20000008

080014d4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80014d8:	f7ff fff0 	bl	80014bc <HAL_RCC_GetHCLKFreq>
 80014dc:	4601      	mov	r1, r0
 80014de:	4b05      	ldr	r3, [pc, #20]	; (80014f4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80014e0:	689b      	ldr	r3, [r3, #8]
 80014e2:	0a9b      	lsrs	r3, r3, #10
 80014e4:	f003 0307 	and.w	r3, r3, #7
 80014e8:	4a03      	ldr	r2, [pc, #12]	; (80014f8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80014ea:	5cd3      	ldrb	r3, [r2, r3]
 80014ec:	fa21 f303 	lsr.w	r3, r1, r3
}
 80014f0:	4618      	mov	r0, r3
 80014f2:	bd80      	pop	{r7, pc}
 80014f4:	40023800 	.word	0x40023800
 80014f8:	08004f98 	.word	0x08004f98

080014fc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001500:	f7ff ffdc 	bl	80014bc <HAL_RCC_GetHCLKFreq>
 8001504:	4601      	mov	r1, r0
 8001506:	4b05      	ldr	r3, [pc, #20]	; (800151c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001508:	689b      	ldr	r3, [r3, #8]
 800150a:	0b5b      	lsrs	r3, r3, #13
 800150c:	f003 0307 	and.w	r3, r3, #7
 8001510:	4a03      	ldr	r2, [pc, #12]	; (8001520 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001512:	5cd3      	ldrb	r3, [r2, r3]
 8001514:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001518:	4618      	mov	r0, r3
 800151a:	bd80      	pop	{r7, pc}
 800151c:	40023800 	.word	0x40023800
 8001520:	08004f98 	.word	0x08004f98

08001524 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	b082      	sub	sp, #8
 8001528:	af00      	add	r7, sp, #0
 800152a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	2b00      	cmp	r3, #0
 8001530:	d101      	bne.n	8001536 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001532:	2301      	movs	r3, #1
 8001534:	e07a      	b.n	800162c <HAL_SPI_Init+0x108>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800153a:	2b00      	cmp	r3, #0
 800153c:	d108      	bne.n	8001550 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	685b      	ldr	r3, [r3, #4]
 8001542:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001546:	d009      	beq.n	800155c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	2200      	movs	r2, #0
 800154c:	61da      	str	r2, [r3, #28]
 800154e:	e005      	b.n	800155c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	2200      	movs	r2, #0
 8001554:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	2200      	movs	r2, #0
 800155a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	2200      	movs	r2, #0
 8001560:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001568:	b2db      	uxtb	r3, r3
 800156a:	2b00      	cmp	r3, #0
 800156c:	d106      	bne.n	800157c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	2200      	movs	r2, #0
 8001572:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001576:	6878      	ldr	r0, [r7, #4]
 8001578:	f001 fcb6 	bl	8002ee8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	2202      	movs	r2, #2
 8001580:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	687a      	ldr	r2, [r7, #4]
 800158a:	6812      	ldr	r2, [r2, #0]
 800158c:	6812      	ldr	r2, [r2, #0]
 800158e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001592:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	687a      	ldr	r2, [r7, #4]
 800159a:	6852      	ldr	r2, [r2, #4]
 800159c:	f402 7182 	and.w	r1, r2, #260	; 0x104
 80015a0:	687a      	ldr	r2, [r7, #4]
 80015a2:	6892      	ldr	r2, [r2, #8]
 80015a4:	f402 4204 	and.w	r2, r2, #33792	; 0x8400
 80015a8:	4311      	orrs	r1, r2
 80015aa:	687a      	ldr	r2, [r7, #4]
 80015ac:	68d2      	ldr	r2, [r2, #12]
 80015ae:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80015b2:	4311      	orrs	r1, r2
 80015b4:	687a      	ldr	r2, [r7, #4]
 80015b6:	6912      	ldr	r2, [r2, #16]
 80015b8:	f002 0202 	and.w	r2, r2, #2
 80015bc:	4311      	orrs	r1, r2
 80015be:	687a      	ldr	r2, [r7, #4]
 80015c0:	6952      	ldr	r2, [r2, #20]
 80015c2:	f002 0201 	and.w	r2, r2, #1
 80015c6:	4311      	orrs	r1, r2
 80015c8:	687a      	ldr	r2, [r7, #4]
 80015ca:	6992      	ldr	r2, [r2, #24]
 80015cc:	f402 7200 	and.w	r2, r2, #512	; 0x200
 80015d0:	4311      	orrs	r1, r2
 80015d2:	687a      	ldr	r2, [r7, #4]
 80015d4:	69d2      	ldr	r2, [r2, #28]
 80015d6:	f002 0238 	and.w	r2, r2, #56	; 0x38
 80015da:	4311      	orrs	r1, r2
 80015dc:	687a      	ldr	r2, [r7, #4]
 80015de:	6a12      	ldr	r2, [r2, #32]
 80015e0:	f002 0280 	and.w	r2, r2, #128	; 0x80
 80015e4:	4311      	orrs	r1, r2
 80015e6:	687a      	ldr	r2, [r7, #4]
 80015e8:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80015ea:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80015ee:	430a      	orrs	r2, r1
 80015f0:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	687a      	ldr	r2, [r7, #4]
 80015f8:	6992      	ldr	r2, [r2, #24]
 80015fa:	0c12      	lsrs	r2, r2, #16
 80015fc:	f002 0104 	and.w	r1, r2, #4
 8001600:	687a      	ldr	r2, [r7, #4]
 8001602:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001604:	f002 0210 	and.w	r2, r2, #16
 8001608:	430a      	orrs	r2, r1
 800160a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	687a      	ldr	r2, [r7, #4]
 8001612:	6812      	ldr	r2, [r2, #0]
 8001614:	69d2      	ldr	r2, [r2, #28]
 8001616:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800161a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	2200      	movs	r2, #0
 8001620:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	2201      	movs	r2, #1
 8001626:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800162a:	2300      	movs	r3, #0
}
 800162c:	4618      	mov	r0, r3
 800162e:	3708      	adds	r7, #8
 8001630:	46bd      	mov	sp, r7
 8001632:	bd80      	pop	{r7, pc}

08001634 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	b082      	sub	sp, #8
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	2b00      	cmp	r3, #0
 8001640:	d101      	bne.n	8001646 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001642:	2301      	movs	r3, #1
 8001644:	e041      	b.n	80016ca <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800164c:	b2db      	uxtb	r3, r3
 800164e:	2b00      	cmp	r3, #0
 8001650:	d106      	bne.n	8001660 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	2200      	movs	r2, #0
 8001656:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800165a:	6878      	ldr	r0, [r7, #4]
 800165c:	f001 fce2 	bl	8003024 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	2202      	movs	r2, #2
 8001664:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681a      	ldr	r2, [r3, #0]
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	3304      	adds	r3, #4
 8001670:	4619      	mov	r1, r3
 8001672:	4610      	mov	r0, r2
 8001674:	f000 faba 	bl	8001bec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	2201      	movs	r2, #1
 800167c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	2201      	movs	r2, #1
 8001684:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	2201      	movs	r2, #1
 800168c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	2201      	movs	r2, #1
 8001694:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	2201      	movs	r2, #1
 800169c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	2201      	movs	r2, #1
 80016a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	2201      	movs	r2, #1
 80016ac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	2201      	movs	r2, #1
 80016b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	2201      	movs	r2, #1
 80016bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	2201      	movs	r2, #1
 80016c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80016c8:	2300      	movs	r3, #0
}
 80016ca:	4618      	mov	r0, r3
 80016cc:	3708      	adds	r7, #8
 80016ce:	46bd      	mov	sp, r7
 80016d0:	bd80      	pop	{r7, pc}
	...

080016d4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80016d4:	b480      	push	{r7}
 80016d6:	b085      	sub	sp, #20
 80016d8:	af00      	add	r7, sp, #0
 80016da:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80016e2:	b2db      	uxtb	r3, r3
 80016e4:	2b01      	cmp	r3, #1
 80016e6:	d001      	beq.n	80016ec <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80016e8:	2301      	movs	r3, #1
 80016ea:	e04e      	b.n	800178a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	2202      	movs	r2, #2
 80016f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	687a      	ldr	r2, [r7, #4]
 80016fa:	6812      	ldr	r2, [r2, #0]
 80016fc:	68d2      	ldr	r2, [r2, #12]
 80016fe:	f042 0201 	orr.w	r2, r2, #1
 8001702:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	4a23      	ldr	r2, [pc, #140]	; (8001798 <HAL_TIM_Base_Start_IT+0xc4>)
 800170a:	4293      	cmp	r3, r2
 800170c:	d022      	beq.n	8001754 <HAL_TIM_Base_Start_IT+0x80>
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001716:	d01d      	beq.n	8001754 <HAL_TIM_Base_Start_IT+0x80>
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	4a1f      	ldr	r2, [pc, #124]	; (800179c <HAL_TIM_Base_Start_IT+0xc8>)
 800171e:	4293      	cmp	r3, r2
 8001720:	d018      	beq.n	8001754 <HAL_TIM_Base_Start_IT+0x80>
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	4a1e      	ldr	r2, [pc, #120]	; (80017a0 <HAL_TIM_Base_Start_IT+0xcc>)
 8001728:	4293      	cmp	r3, r2
 800172a:	d013      	beq.n	8001754 <HAL_TIM_Base_Start_IT+0x80>
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	4a1c      	ldr	r2, [pc, #112]	; (80017a4 <HAL_TIM_Base_Start_IT+0xd0>)
 8001732:	4293      	cmp	r3, r2
 8001734:	d00e      	beq.n	8001754 <HAL_TIM_Base_Start_IT+0x80>
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	4a1b      	ldr	r2, [pc, #108]	; (80017a8 <HAL_TIM_Base_Start_IT+0xd4>)
 800173c:	4293      	cmp	r3, r2
 800173e:	d009      	beq.n	8001754 <HAL_TIM_Base_Start_IT+0x80>
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	4a19      	ldr	r2, [pc, #100]	; (80017ac <HAL_TIM_Base_Start_IT+0xd8>)
 8001746:	4293      	cmp	r3, r2
 8001748:	d004      	beq.n	8001754 <HAL_TIM_Base_Start_IT+0x80>
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	4a18      	ldr	r2, [pc, #96]	; (80017b0 <HAL_TIM_Base_Start_IT+0xdc>)
 8001750:	4293      	cmp	r3, r2
 8001752:	d111      	bne.n	8001778 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	689b      	ldr	r3, [r3, #8]
 800175a:	f003 0307 	and.w	r3, r3, #7
 800175e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	2b06      	cmp	r3, #6
 8001764:	d010      	beq.n	8001788 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	687a      	ldr	r2, [r7, #4]
 800176c:	6812      	ldr	r2, [r2, #0]
 800176e:	6812      	ldr	r2, [r2, #0]
 8001770:	f042 0201 	orr.w	r2, r2, #1
 8001774:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001776:	e007      	b.n	8001788 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	687a      	ldr	r2, [r7, #4]
 800177e:	6812      	ldr	r2, [r2, #0]
 8001780:	6812      	ldr	r2, [r2, #0]
 8001782:	f042 0201 	orr.w	r2, r2, #1
 8001786:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001788:	2300      	movs	r3, #0
}
 800178a:	4618      	mov	r0, r3
 800178c:	3714      	adds	r7, #20
 800178e:	46bd      	mov	sp, r7
 8001790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001794:	4770      	bx	lr
 8001796:	bf00      	nop
 8001798:	40010000 	.word	0x40010000
 800179c:	40000400 	.word	0x40000400
 80017a0:	40000800 	.word	0x40000800
 80017a4:	40000c00 	.word	0x40000c00
 80017a8:	40010400 	.word	0x40010400
 80017ac:	40014000 	.word	0x40014000
 80017b0:	40001800 	.word	0x40001800

080017b4 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80017b4:	b480      	push	{r7}
 80017b6:	b083      	sub	sp, #12
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	687a      	ldr	r2, [r7, #4]
 80017c2:	6812      	ldr	r2, [r2, #0]
 80017c4:	68d2      	ldr	r2, [r2, #12]
 80017c6:	f022 0201 	bic.w	r2, r2, #1
 80017ca:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	6a1a      	ldr	r2, [r3, #32]
 80017d2:	f241 1311 	movw	r3, #4369	; 0x1111
 80017d6:	4013      	ands	r3, r2
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d10f      	bne.n	80017fc <HAL_TIM_Base_Stop_IT+0x48>
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	6a1a      	ldr	r2, [r3, #32]
 80017e2:	f240 4344 	movw	r3, #1092	; 0x444
 80017e6:	4013      	ands	r3, r2
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d107      	bne.n	80017fc <HAL_TIM_Base_Stop_IT+0x48>
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	687a      	ldr	r2, [r7, #4]
 80017f2:	6812      	ldr	r2, [r2, #0]
 80017f4:	6812      	ldr	r2, [r2, #0]
 80017f6:	f022 0201 	bic.w	r2, r2, #1
 80017fa:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	2201      	movs	r2, #1
 8001800:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8001804:	2300      	movs	r3, #0
}
 8001806:	4618      	mov	r0, r3
 8001808:	370c      	adds	r7, #12
 800180a:	46bd      	mov	sp, r7
 800180c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001810:	4770      	bx	lr

08001812 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001812:	b580      	push	{r7, lr}
 8001814:	b082      	sub	sp, #8
 8001816:	af00      	add	r7, sp, #0
 8001818:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	691b      	ldr	r3, [r3, #16]
 8001820:	f003 0302 	and.w	r3, r3, #2
 8001824:	2b02      	cmp	r3, #2
 8001826:	d122      	bne.n	800186e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	68db      	ldr	r3, [r3, #12]
 800182e:	f003 0302 	and.w	r3, r3, #2
 8001832:	2b02      	cmp	r3, #2
 8001834:	d11b      	bne.n	800186e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	f06f 0202 	mvn.w	r2, #2
 800183e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	2201      	movs	r2, #1
 8001844:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	699b      	ldr	r3, [r3, #24]
 800184c:	f003 0303 	and.w	r3, r3, #3
 8001850:	2b00      	cmp	r3, #0
 8001852:	d003      	beq.n	800185c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001854:	6878      	ldr	r0, [r7, #4]
 8001856:	f000 f9aa 	bl	8001bae <HAL_TIM_IC_CaptureCallback>
 800185a:	e005      	b.n	8001868 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800185c:	6878      	ldr	r0, [r7, #4]
 800185e:	f000 f99c 	bl	8001b9a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001862:	6878      	ldr	r0, [r7, #4]
 8001864:	f000 f9ad 	bl	8001bc2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	2200      	movs	r2, #0
 800186c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	691b      	ldr	r3, [r3, #16]
 8001874:	f003 0304 	and.w	r3, r3, #4
 8001878:	2b04      	cmp	r3, #4
 800187a:	d122      	bne.n	80018c2 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	68db      	ldr	r3, [r3, #12]
 8001882:	f003 0304 	and.w	r3, r3, #4
 8001886:	2b04      	cmp	r3, #4
 8001888:	d11b      	bne.n	80018c2 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	f06f 0204 	mvn.w	r2, #4
 8001892:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	2202      	movs	r2, #2
 8001898:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	699b      	ldr	r3, [r3, #24]
 80018a0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d003      	beq.n	80018b0 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80018a8:	6878      	ldr	r0, [r7, #4]
 80018aa:	f000 f980 	bl	8001bae <HAL_TIM_IC_CaptureCallback>
 80018ae:	e005      	b.n	80018bc <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80018b0:	6878      	ldr	r0, [r7, #4]
 80018b2:	f000 f972 	bl	8001b9a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80018b6:	6878      	ldr	r0, [r7, #4]
 80018b8:	f000 f983 	bl	8001bc2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	2200      	movs	r2, #0
 80018c0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	691b      	ldr	r3, [r3, #16]
 80018c8:	f003 0308 	and.w	r3, r3, #8
 80018cc:	2b08      	cmp	r3, #8
 80018ce:	d122      	bne.n	8001916 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	68db      	ldr	r3, [r3, #12]
 80018d6:	f003 0308 	and.w	r3, r3, #8
 80018da:	2b08      	cmp	r3, #8
 80018dc:	d11b      	bne.n	8001916 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	f06f 0208 	mvn.w	r2, #8
 80018e6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	2204      	movs	r2, #4
 80018ec:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	69db      	ldr	r3, [r3, #28]
 80018f4:	f003 0303 	and.w	r3, r3, #3
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d003      	beq.n	8001904 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80018fc:	6878      	ldr	r0, [r7, #4]
 80018fe:	f000 f956 	bl	8001bae <HAL_TIM_IC_CaptureCallback>
 8001902:	e005      	b.n	8001910 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001904:	6878      	ldr	r0, [r7, #4]
 8001906:	f000 f948 	bl	8001b9a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800190a:	6878      	ldr	r0, [r7, #4]
 800190c:	f000 f959 	bl	8001bc2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	2200      	movs	r2, #0
 8001914:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	691b      	ldr	r3, [r3, #16]
 800191c:	f003 0310 	and.w	r3, r3, #16
 8001920:	2b10      	cmp	r3, #16
 8001922:	d122      	bne.n	800196a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	68db      	ldr	r3, [r3, #12]
 800192a:	f003 0310 	and.w	r3, r3, #16
 800192e:	2b10      	cmp	r3, #16
 8001930:	d11b      	bne.n	800196a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	f06f 0210 	mvn.w	r2, #16
 800193a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	2208      	movs	r2, #8
 8001940:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	69db      	ldr	r3, [r3, #28]
 8001948:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800194c:	2b00      	cmp	r3, #0
 800194e:	d003      	beq.n	8001958 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001950:	6878      	ldr	r0, [r7, #4]
 8001952:	f000 f92c 	bl	8001bae <HAL_TIM_IC_CaptureCallback>
 8001956:	e005      	b.n	8001964 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001958:	6878      	ldr	r0, [r7, #4]
 800195a:	f000 f91e 	bl	8001b9a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800195e:	6878      	ldr	r0, [r7, #4]
 8001960:	f000 f92f 	bl	8001bc2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	2200      	movs	r2, #0
 8001968:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	691b      	ldr	r3, [r3, #16]
 8001970:	f003 0301 	and.w	r3, r3, #1
 8001974:	2b01      	cmp	r3, #1
 8001976:	d10e      	bne.n	8001996 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	68db      	ldr	r3, [r3, #12]
 800197e:	f003 0301 	and.w	r3, r3, #1
 8001982:	2b01      	cmp	r3, #1
 8001984:	d107      	bne.n	8001996 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	f06f 0201 	mvn.w	r2, #1
 800198e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001990:	6878      	ldr	r0, [r7, #4]
 8001992:	f001 f983 	bl	8002c9c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	691b      	ldr	r3, [r3, #16]
 800199c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80019a0:	2b80      	cmp	r3, #128	; 0x80
 80019a2:	d10e      	bne.n	80019c2 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	68db      	ldr	r3, [r3, #12]
 80019aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80019ae:	2b80      	cmp	r3, #128	; 0x80
 80019b0:	d107      	bne.n	80019c2 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80019ba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80019bc:	6878      	ldr	r0, [r7, #4]
 80019be:	f000 fad5 	bl	8001f6c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	691b      	ldr	r3, [r3, #16]
 80019c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80019cc:	2b40      	cmp	r3, #64	; 0x40
 80019ce:	d10e      	bne.n	80019ee <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	68db      	ldr	r3, [r3, #12]
 80019d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80019da:	2b40      	cmp	r3, #64	; 0x40
 80019dc:	d107      	bne.n	80019ee <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80019e6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80019e8:	6878      	ldr	r0, [r7, #4]
 80019ea:	f000 f8f4 	bl	8001bd6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	691b      	ldr	r3, [r3, #16]
 80019f4:	f003 0320 	and.w	r3, r3, #32
 80019f8:	2b20      	cmp	r3, #32
 80019fa:	d10e      	bne.n	8001a1a <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	68db      	ldr	r3, [r3, #12]
 8001a02:	f003 0320 	and.w	r3, r3, #32
 8001a06:	2b20      	cmp	r3, #32
 8001a08:	d107      	bne.n	8001a1a <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	f06f 0220 	mvn.w	r2, #32
 8001a12:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001a14:	6878      	ldr	r0, [r7, #4]
 8001a16:	f000 fa9f 	bl	8001f58 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001a1a:	bf00      	nop
 8001a1c:	3708      	adds	r7, #8
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	bd80      	pop	{r7, pc}

08001a22 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8001a22:	b580      	push	{r7, lr}
 8001a24:	b084      	sub	sp, #16
 8001a26:	af00      	add	r7, sp, #0
 8001a28:	6078      	str	r0, [r7, #4]
 8001a2a:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001a36:	2b01      	cmp	r3, #1
 8001a38:	d101      	bne.n	8001a3e <HAL_TIM_ConfigClockSource+0x1c>
 8001a3a:	2302      	movs	r3, #2
 8001a3c:	e0a9      	b.n	8001b92 <HAL_TIM_ConfigClockSource+0x170>
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	2201      	movs	r2, #1
 8001a42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	2202      	movs	r2, #2
 8001a4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	689b      	ldr	r3, [r3, #8]
 8001a54:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001a56:	68bb      	ldr	r3, [r7, #8]
 8001a58:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8001a5c:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001a5e:	68bb      	ldr	r3, [r7, #8]
 8001a60:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001a64:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	68ba      	ldr	r2, [r7, #8]
 8001a6c:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8001a6e:	683b      	ldr	r3, [r7, #0]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	2b40      	cmp	r3, #64	; 0x40
 8001a74:	d067      	beq.n	8001b46 <HAL_TIM_ConfigClockSource+0x124>
 8001a76:	2b40      	cmp	r3, #64	; 0x40
 8001a78:	d80b      	bhi.n	8001a92 <HAL_TIM_ConfigClockSource+0x70>
 8001a7a:	2b10      	cmp	r3, #16
 8001a7c:	d073      	beq.n	8001b66 <HAL_TIM_ConfigClockSource+0x144>
 8001a7e:	2b10      	cmp	r3, #16
 8001a80:	d802      	bhi.n	8001a88 <HAL_TIM_ConfigClockSource+0x66>
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d06f      	beq.n	8001b66 <HAL_TIM_ConfigClockSource+0x144>
 8001a86:	e077      	b.n	8001b78 <HAL_TIM_ConfigClockSource+0x156>
 8001a88:	2b20      	cmp	r3, #32
 8001a8a:	d06c      	beq.n	8001b66 <HAL_TIM_ConfigClockSource+0x144>
 8001a8c:	2b30      	cmp	r3, #48	; 0x30
 8001a8e:	d06a      	beq.n	8001b66 <HAL_TIM_ConfigClockSource+0x144>
 8001a90:	e072      	b.n	8001b78 <HAL_TIM_ConfigClockSource+0x156>
 8001a92:	2b70      	cmp	r3, #112	; 0x70
 8001a94:	d00d      	beq.n	8001ab2 <HAL_TIM_ConfigClockSource+0x90>
 8001a96:	2b70      	cmp	r3, #112	; 0x70
 8001a98:	d804      	bhi.n	8001aa4 <HAL_TIM_ConfigClockSource+0x82>
 8001a9a:	2b50      	cmp	r3, #80	; 0x50
 8001a9c:	d033      	beq.n	8001b06 <HAL_TIM_ConfigClockSource+0xe4>
 8001a9e:	2b60      	cmp	r3, #96	; 0x60
 8001aa0:	d041      	beq.n	8001b26 <HAL_TIM_ConfigClockSource+0x104>
 8001aa2:	e069      	b.n	8001b78 <HAL_TIM_ConfigClockSource+0x156>
 8001aa4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001aa8:	d069      	beq.n	8001b7e <HAL_TIM_ConfigClockSource+0x15c>
 8001aaa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001aae:	d017      	beq.n	8001ae0 <HAL_TIM_ConfigClockSource+0xbe>
 8001ab0:	e062      	b.n	8001b78 <HAL_TIM_ConfigClockSource+0x156>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	6818      	ldr	r0, [r3, #0]
 8001ab6:	683b      	ldr	r3, [r7, #0]
 8001ab8:	6899      	ldr	r1, [r3, #8]
 8001aba:	683b      	ldr	r3, [r7, #0]
 8001abc:	685a      	ldr	r2, [r3, #4]
 8001abe:	683b      	ldr	r3, [r7, #0]
 8001ac0:	68db      	ldr	r3, [r3, #12]
 8001ac2:	f000 f9ad 	bl	8001e20 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	689b      	ldr	r3, [r3, #8]
 8001acc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001ace:	68bb      	ldr	r3, [r7, #8]
 8001ad0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8001ad4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	68ba      	ldr	r2, [r7, #8]
 8001adc:	609a      	str	r2, [r3, #8]
      break;
 8001ade:	e04f      	b.n	8001b80 <HAL_TIM_ConfigClockSource+0x15e>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	6818      	ldr	r0, [r3, #0]
 8001ae4:	683b      	ldr	r3, [r7, #0]
 8001ae6:	6899      	ldr	r1, [r3, #8]
 8001ae8:	683b      	ldr	r3, [r7, #0]
 8001aea:	685a      	ldr	r2, [r3, #4]
 8001aec:	683b      	ldr	r3, [r7, #0]
 8001aee:	68db      	ldr	r3, [r3, #12]
 8001af0:	f000 f996 	bl	8001e20 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	687a      	ldr	r2, [r7, #4]
 8001afa:	6812      	ldr	r2, [r2, #0]
 8001afc:	6892      	ldr	r2, [r2, #8]
 8001afe:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001b02:	609a      	str	r2, [r3, #8]
      break;
 8001b04:	e03c      	b.n	8001b80 <HAL_TIM_ConfigClockSource+0x15e>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	6818      	ldr	r0, [r3, #0]
 8001b0a:	683b      	ldr	r3, [r7, #0]
 8001b0c:	6859      	ldr	r1, [r3, #4]
 8001b0e:	683b      	ldr	r3, [r7, #0]
 8001b10:	68db      	ldr	r3, [r3, #12]
 8001b12:	461a      	mov	r2, r3
 8001b14:	f000 f90a 	bl	8001d2c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	2150      	movs	r1, #80	; 0x50
 8001b1e:	4618      	mov	r0, r3
 8001b20:	f000 f963 	bl	8001dea <TIM_ITRx_SetConfig>
      break;
 8001b24:	e02c      	b.n	8001b80 <HAL_TIM_ConfigClockSource+0x15e>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	6818      	ldr	r0, [r3, #0]
 8001b2a:	683b      	ldr	r3, [r7, #0]
 8001b2c:	6859      	ldr	r1, [r3, #4]
 8001b2e:	683b      	ldr	r3, [r7, #0]
 8001b30:	68db      	ldr	r3, [r3, #12]
 8001b32:	461a      	mov	r2, r3
 8001b34:	f000 f929 	bl	8001d8a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	2160      	movs	r1, #96	; 0x60
 8001b3e:	4618      	mov	r0, r3
 8001b40:	f000 f953 	bl	8001dea <TIM_ITRx_SetConfig>
      break;
 8001b44:	e01c      	b.n	8001b80 <HAL_TIM_ConfigClockSource+0x15e>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	6818      	ldr	r0, [r3, #0]
 8001b4a:	683b      	ldr	r3, [r7, #0]
 8001b4c:	6859      	ldr	r1, [r3, #4]
 8001b4e:	683b      	ldr	r3, [r7, #0]
 8001b50:	68db      	ldr	r3, [r3, #12]
 8001b52:	461a      	mov	r2, r3
 8001b54:	f000 f8ea 	bl	8001d2c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	2140      	movs	r1, #64	; 0x40
 8001b5e:	4618      	mov	r0, r3
 8001b60:	f000 f943 	bl	8001dea <TIM_ITRx_SetConfig>
      break;
 8001b64:	e00c      	b.n	8001b80 <HAL_TIM_ConfigClockSource+0x15e>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681a      	ldr	r2, [r3, #0]
 8001b6a:	683b      	ldr	r3, [r7, #0]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	4619      	mov	r1, r3
 8001b70:	4610      	mov	r0, r2
 8001b72:	f000 f93a 	bl	8001dea <TIM_ITRx_SetConfig>
      break;
 8001b76:	e003      	b.n	8001b80 <HAL_TIM_ConfigClockSource+0x15e>
    }

    default:
      status = HAL_ERROR;
 8001b78:	2301      	movs	r3, #1
 8001b7a:	73fb      	strb	r3, [r7, #15]
      break;
 8001b7c:	e000      	b.n	8001b80 <HAL_TIM_ConfigClockSource+0x15e>
      break;
 8001b7e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	2201      	movs	r2, #1
 8001b84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8001b90:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b92:	4618      	mov	r0, r3
 8001b94:	3710      	adds	r7, #16
 8001b96:	46bd      	mov	sp, r7
 8001b98:	bd80      	pop	{r7, pc}

08001b9a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001b9a:	b480      	push	{r7}
 8001b9c:	b083      	sub	sp, #12
 8001b9e:	af00      	add	r7, sp, #0
 8001ba0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001ba2:	bf00      	nop
 8001ba4:	370c      	adds	r7, #12
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bac:	4770      	bx	lr

08001bae <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001bae:	b480      	push	{r7}
 8001bb0:	b083      	sub	sp, #12
 8001bb2:	af00      	add	r7, sp, #0
 8001bb4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001bb6:	bf00      	nop
 8001bb8:	370c      	adds	r7, #12
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc0:	4770      	bx	lr

08001bc2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001bc2:	b480      	push	{r7}
 8001bc4:	b083      	sub	sp, #12
 8001bc6:	af00      	add	r7, sp, #0
 8001bc8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001bca:	bf00      	nop
 8001bcc:	370c      	adds	r7, #12
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd4:	4770      	bx	lr

08001bd6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001bd6:	b480      	push	{r7}
 8001bd8:	b083      	sub	sp, #12
 8001bda:	af00      	add	r7, sp, #0
 8001bdc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001bde:	bf00      	nop
 8001be0:	370c      	adds	r7, #12
 8001be2:	46bd      	mov	sp, r7
 8001be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be8:	4770      	bx	lr
	...

08001bec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001bec:	b480      	push	{r7}
 8001bee:	b085      	sub	sp, #20
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
 8001bf4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	4a40      	ldr	r2, [pc, #256]	; (8001d00 <TIM_Base_SetConfig+0x114>)
 8001c00:	4293      	cmp	r3, r2
 8001c02:	d013      	beq.n	8001c2c <TIM_Base_SetConfig+0x40>
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c0a:	d00f      	beq.n	8001c2c <TIM_Base_SetConfig+0x40>
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	4a3d      	ldr	r2, [pc, #244]	; (8001d04 <TIM_Base_SetConfig+0x118>)
 8001c10:	4293      	cmp	r3, r2
 8001c12:	d00b      	beq.n	8001c2c <TIM_Base_SetConfig+0x40>
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	4a3c      	ldr	r2, [pc, #240]	; (8001d08 <TIM_Base_SetConfig+0x11c>)
 8001c18:	4293      	cmp	r3, r2
 8001c1a:	d007      	beq.n	8001c2c <TIM_Base_SetConfig+0x40>
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	4a3b      	ldr	r2, [pc, #236]	; (8001d0c <TIM_Base_SetConfig+0x120>)
 8001c20:	4293      	cmp	r3, r2
 8001c22:	d003      	beq.n	8001c2c <TIM_Base_SetConfig+0x40>
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	4a3a      	ldr	r2, [pc, #232]	; (8001d10 <TIM_Base_SetConfig+0x124>)
 8001c28:	4293      	cmp	r3, r2
 8001c2a:	d108      	bne.n	8001c3e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001c32:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001c34:	683b      	ldr	r3, [r7, #0]
 8001c36:	685b      	ldr	r3, [r3, #4]
 8001c38:	68fa      	ldr	r2, [r7, #12]
 8001c3a:	4313      	orrs	r3, r2
 8001c3c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	4a2f      	ldr	r2, [pc, #188]	; (8001d00 <TIM_Base_SetConfig+0x114>)
 8001c42:	4293      	cmp	r3, r2
 8001c44:	d02b      	beq.n	8001c9e <TIM_Base_SetConfig+0xb2>
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c4c:	d027      	beq.n	8001c9e <TIM_Base_SetConfig+0xb2>
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	4a2c      	ldr	r2, [pc, #176]	; (8001d04 <TIM_Base_SetConfig+0x118>)
 8001c52:	4293      	cmp	r3, r2
 8001c54:	d023      	beq.n	8001c9e <TIM_Base_SetConfig+0xb2>
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	4a2b      	ldr	r2, [pc, #172]	; (8001d08 <TIM_Base_SetConfig+0x11c>)
 8001c5a:	4293      	cmp	r3, r2
 8001c5c:	d01f      	beq.n	8001c9e <TIM_Base_SetConfig+0xb2>
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	4a2a      	ldr	r2, [pc, #168]	; (8001d0c <TIM_Base_SetConfig+0x120>)
 8001c62:	4293      	cmp	r3, r2
 8001c64:	d01b      	beq.n	8001c9e <TIM_Base_SetConfig+0xb2>
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	4a29      	ldr	r2, [pc, #164]	; (8001d10 <TIM_Base_SetConfig+0x124>)
 8001c6a:	4293      	cmp	r3, r2
 8001c6c:	d017      	beq.n	8001c9e <TIM_Base_SetConfig+0xb2>
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	4a28      	ldr	r2, [pc, #160]	; (8001d14 <TIM_Base_SetConfig+0x128>)
 8001c72:	4293      	cmp	r3, r2
 8001c74:	d013      	beq.n	8001c9e <TIM_Base_SetConfig+0xb2>
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	4a27      	ldr	r2, [pc, #156]	; (8001d18 <TIM_Base_SetConfig+0x12c>)
 8001c7a:	4293      	cmp	r3, r2
 8001c7c:	d00f      	beq.n	8001c9e <TIM_Base_SetConfig+0xb2>
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	4a26      	ldr	r2, [pc, #152]	; (8001d1c <TIM_Base_SetConfig+0x130>)
 8001c82:	4293      	cmp	r3, r2
 8001c84:	d00b      	beq.n	8001c9e <TIM_Base_SetConfig+0xb2>
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	4a25      	ldr	r2, [pc, #148]	; (8001d20 <TIM_Base_SetConfig+0x134>)
 8001c8a:	4293      	cmp	r3, r2
 8001c8c:	d007      	beq.n	8001c9e <TIM_Base_SetConfig+0xb2>
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	4a24      	ldr	r2, [pc, #144]	; (8001d24 <TIM_Base_SetConfig+0x138>)
 8001c92:	4293      	cmp	r3, r2
 8001c94:	d003      	beq.n	8001c9e <TIM_Base_SetConfig+0xb2>
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	4a23      	ldr	r2, [pc, #140]	; (8001d28 <TIM_Base_SetConfig+0x13c>)
 8001c9a:	4293      	cmp	r3, r2
 8001c9c:	d108      	bne.n	8001cb0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001ca4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001ca6:	683b      	ldr	r3, [r7, #0]
 8001ca8:	68db      	ldr	r3, [r3, #12]
 8001caa:	68fa      	ldr	r2, [r7, #12]
 8001cac:	4313      	orrs	r3, r2
 8001cae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001cb6:	683b      	ldr	r3, [r7, #0]
 8001cb8:	695b      	ldr	r3, [r3, #20]
 8001cba:	4313      	orrs	r3, r2
 8001cbc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	68fa      	ldr	r2, [r7, #12]
 8001cc2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001cc4:	683b      	ldr	r3, [r7, #0]
 8001cc6:	689a      	ldr	r2, [r3, #8]
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001ccc:	683b      	ldr	r3, [r7, #0]
 8001cce:	681a      	ldr	r2, [r3, #0]
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	4a0a      	ldr	r2, [pc, #40]	; (8001d00 <TIM_Base_SetConfig+0x114>)
 8001cd8:	4293      	cmp	r3, r2
 8001cda:	d003      	beq.n	8001ce4 <TIM_Base_SetConfig+0xf8>
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	4a0c      	ldr	r2, [pc, #48]	; (8001d10 <TIM_Base_SetConfig+0x124>)
 8001ce0:	4293      	cmp	r3, r2
 8001ce2:	d103      	bne.n	8001cec <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001ce4:	683b      	ldr	r3, [r7, #0]
 8001ce6:	691a      	ldr	r2, [r3, #16]
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	2201      	movs	r2, #1
 8001cf0:	615a      	str	r2, [r3, #20]
}
 8001cf2:	bf00      	nop
 8001cf4:	3714      	adds	r7, #20
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfc:	4770      	bx	lr
 8001cfe:	bf00      	nop
 8001d00:	40010000 	.word	0x40010000
 8001d04:	40000400 	.word	0x40000400
 8001d08:	40000800 	.word	0x40000800
 8001d0c:	40000c00 	.word	0x40000c00
 8001d10:	40010400 	.word	0x40010400
 8001d14:	40014000 	.word	0x40014000
 8001d18:	40014400 	.word	0x40014400
 8001d1c:	40014800 	.word	0x40014800
 8001d20:	40001800 	.word	0x40001800
 8001d24:	40001c00 	.word	0x40001c00
 8001d28:	40002000 	.word	0x40002000

08001d2c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001d2c:	b480      	push	{r7}
 8001d2e:	b087      	sub	sp, #28
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	60f8      	str	r0, [r7, #12]
 8001d34:	60b9      	str	r1, [r7, #8]
 8001d36:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	6a1b      	ldr	r3, [r3, #32]
 8001d3c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	6a1b      	ldr	r3, [r3, #32]
 8001d42:	f023 0201 	bic.w	r2, r3, #1
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	699b      	ldr	r3, [r3, #24]
 8001d4e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001d50:	693b      	ldr	r3, [r7, #16]
 8001d52:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001d56:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	011b      	lsls	r3, r3, #4
 8001d5c:	693a      	ldr	r2, [r7, #16]
 8001d5e:	4313      	orrs	r3, r2
 8001d60:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001d62:	697b      	ldr	r3, [r7, #20]
 8001d64:	f023 030a 	bic.w	r3, r3, #10
 8001d68:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8001d6a:	697a      	ldr	r2, [r7, #20]
 8001d6c:	68bb      	ldr	r3, [r7, #8]
 8001d6e:	4313      	orrs	r3, r2
 8001d70:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	693a      	ldr	r2, [r7, #16]
 8001d76:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	697a      	ldr	r2, [r7, #20]
 8001d7c:	621a      	str	r2, [r3, #32]
}
 8001d7e:	bf00      	nop
 8001d80:	371c      	adds	r7, #28
 8001d82:	46bd      	mov	sp, r7
 8001d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d88:	4770      	bx	lr

08001d8a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001d8a:	b480      	push	{r7}
 8001d8c:	b087      	sub	sp, #28
 8001d8e:	af00      	add	r7, sp, #0
 8001d90:	60f8      	str	r0, [r7, #12]
 8001d92:	60b9      	str	r1, [r7, #8]
 8001d94:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	6a1b      	ldr	r3, [r3, #32]
 8001d9a:	f023 0210 	bic.w	r2, r3, #16
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	699b      	ldr	r3, [r3, #24]
 8001da6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	6a1b      	ldr	r3, [r3, #32]
 8001dac:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8001dae:	697b      	ldr	r3, [r7, #20]
 8001db0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8001db4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	031b      	lsls	r3, r3, #12
 8001dba:	697a      	ldr	r2, [r7, #20]
 8001dbc:	4313      	orrs	r3, r2
 8001dbe:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8001dc0:	693b      	ldr	r3, [r7, #16]
 8001dc2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8001dc6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8001dc8:	68bb      	ldr	r3, [r7, #8]
 8001dca:	011b      	lsls	r3, r3, #4
 8001dcc:	693a      	ldr	r2, [r7, #16]
 8001dce:	4313      	orrs	r3, r2
 8001dd0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	697a      	ldr	r2, [r7, #20]
 8001dd6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	693a      	ldr	r2, [r7, #16]
 8001ddc:	621a      	str	r2, [r3, #32]
}
 8001dde:	bf00      	nop
 8001de0:	371c      	adds	r7, #28
 8001de2:	46bd      	mov	sp, r7
 8001de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de8:	4770      	bx	lr

08001dea <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8001dea:	b480      	push	{r7}
 8001dec:	b085      	sub	sp, #20
 8001dee:	af00      	add	r7, sp, #0
 8001df0:	6078      	str	r0, [r7, #4]
 8001df2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	689b      	ldr	r3, [r3, #8]
 8001df8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001e00:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8001e02:	683a      	ldr	r2, [r7, #0]
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	4313      	orrs	r3, r2
 8001e08:	f043 0307 	orr.w	r3, r3, #7
 8001e0c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	68fa      	ldr	r2, [r7, #12]
 8001e12:	609a      	str	r2, [r3, #8]
}
 8001e14:	bf00      	nop
 8001e16:	3714      	adds	r7, #20
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1e:	4770      	bx	lr

08001e20 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8001e20:	b480      	push	{r7}
 8001e22:	b087      	sub	sp, #28
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	60f8      	str	r0, [r7, #12]
 8001e28:	60b9      	str	r1, [r7, #8]
 8001e2a:	607a      	str	r2, [r7, #4]
 8001e2c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	689b      	ldr	r3, [r3, #8]
 8001e32:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001e34:	697b      	ldr	r3, [r7, #20]
 8001e36:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001e3a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001e3c:	683b      	ldr	r3, [r7, #0]
 8001e3e:	021a      	lsls	r2, r3, #8
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	431a      	orrs	r2, r3
 8001e44:	68bb      	ldr	r3, [r7, #8]
 8001e46:	4313      	orrs	r3, r2
 8001e48:	697a      	ldr	r2, [r7, #20]
 8001e4a:	4313      	orrs	r3, r2
 8001e4c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	697a      	ldr	r2, [r7, #20]
 8001e52:	609a      	str	r2, [r3, #8]
}
 8001e54:	bf00      	nop
 8001e56:	371c      	adds	r7, #28
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5e:	4770      	bx	lr

08001e60 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8001e60:	b480      	push	{r7}
 8001e62:	b085      	sub	sp, #20
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
 8001e68:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001e70:	2b01      	cmp	r3, #1
 8001e72:	d101      	bne.n	8001e78 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8001e74:	2302      	movs	r3, #2
 8001e76:	e05a      	b.n	8001f2e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	2201      	movs	r2, #1
 8001e7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	2202      	movs	r2, #2
 8001e84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	685b      	ldr	r3, [r3, #4]
 8001e8e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	689b      	ldr	r3, [r3, #8]
 8001e96:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001e9e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8001ea0:	683b      	ldr	r3, [r7, #0]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	68fa      	ldr	r2, [r7, #12]
 8001ea6:	4313      	orrs	r3, r2
 8001ea8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	68fa      	ldr	r2, [r7, #12]
 8001eb0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	4a21      	ldr	r2, [pc, #132]	; (8001f3c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8001eb8:	4293      	cmp	r3, r2
 8001eba:	d022      	beq.n	8001f02 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ec4:	d01d      	beq.n	8001f02 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	4a1d      	ldr	r2, [pc, #116]	; (8001f40 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8001ecc:	4293      	cmp	r3, r2
 8001ece:	d018      	beq.n	8001f02 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	4a1b      	ldr	r2, [pc, #108]	; (8001f44 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8001ed6:	4293      	cmp	r3, r2
 8001ed8:	d013      	beq.n	8001f02 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	4a1a      	ldr	r2, [pc, #104]	; (8001f48 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8001ee0:	4293      	cmp	r3, r2
 8001ee2:	d00e      	beq.n	8001f02 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	4a18      	ldr	r2, [pc, #96]	; (8001f4c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8001eea:	4293      	cmp	r3, r2
 8001eec:	d009      	beq.n	8001f02 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	4a17      	ldr	r2, [pc, #92]	; (8001f50 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8001ef4:	4293      	cmp	r3, r2
 8001ef6:	d004      	beq.n	8001f02 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	4a15      	ldr	r2, [pc, #84]	; (8001f54 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8001efe:	4293      	cmp	r3, r2
 8001f00:	d10c      	bne.n	8001f1c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8001f02:	68bb      	ldr	r3, [r7, #8]
 8001f04:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001f08:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8001f0a:	683b      	ldr	r3, [r7, #0]
 8001f0c:	685b      	ldr	r3, [r3, #4]
 8001f0e:	68ba      	ldr	r2, [r7, #8]
 8001f10:	4313      	orrs	r3, r2
 8001f12:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	68ba      	ldr	r2, [r7, #8]
 8001f1a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	2201      	movs	r2, #1
 8001f20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	2200      	movs	r2, #0
 8001f28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8001f2c:	2300      	movs	r3, #0
}
 8001f2e:	4618      	mov	r0, r3
 8001f30:	3714      	adds	r7, #20
 8001f32:	46bd      	mov	sp, r7
 8001f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f38:	4770      	bx	lr
 8001f3a:	bf00      	nop
 8001f3c:	40010000 	.word	0x40010000
 8001f40:	40000400 	.word	0x40000400
 8001f44:	40000800 	.word	0x40000800
 8001f48:	40000c00 	.word	0x40000c00
 8001f4c:	40010400 	.word	0x40010400
 8001f50:	40014000 	.word	0x40014000
 8001f54:	40001800 	.word	0x40001800

08001f58 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001f58:	b480      	push	{r7}
 8001f5a:	b083      	sub	sp, #12
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001f60:	bf00      	nop
 8001f62:	370c      	adds	r7, #12
 8001f64:	46bd      	mov	sp, r7
 8001f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6a:	4770      	bx	lr

08001f6c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001f6c:	b480      	push	{r7}
 8001f6e:	b083      	sub	sp, #12
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001f74:	bf00      	nop
 8001f76:	370c      	adds	r7, #12
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7e:	4770      	bx	lr

08001f80 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	b082      	sub	sp, #8
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d101      	bne.n	8001f92 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001f8e:	2301      	movs	r3, #1
 8001f90:	e03f      	b.n	8002012 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f98:	b2db      	uxtb	r3, r3
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d106      	bne.n	8001fac <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001fa6:	6878      	ldr	r0, [r7, #4]
 8001fa8:	f001 f862 	bl	8003070 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	2224      	movs	r2, #36	; 0x24
 8001fb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	687a      	ldr	r2, [r7, #4]
 8001fba:	6812      	ldr	r2, [r2, #0]
 8001fbc:	68d2      	ldr	r2, [r2, #12]
 8001fbe:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001fc2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001fc4:	6878      	ldr	r0, [r7, #4]
 8001fc6:	f000 f9c9 	bl	800235c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	687a      	ldr	r2, [r7, #4]
 8001fd0:	6812      	ldr	r2, [r2, #0]
 8001fd2:	6912      	ldr	r2, [r2, #16]
 8001fd4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001fd8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	687a      	ldr	r2, [r7, #4]
 8001fe0:	6812      	ldr	r2, [r2, #0]
 8001fe2:	6952      	ldr	r2, [r2, #20]
 8001fe4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001fe8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	687a      	ldr	r2, [r7, #4]
 8001ff0:	6812      	ldr	r2, [r2, #0]
 8001ff2:	68d2      	ldr	r2, [r2, #12]
 8001ff4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001ff8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	2220      	movs	r2, #32
 8002004:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	2220      	movs	r2, #32
 800200c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002010:	2300      	movs	r3, #0
}
 8002012:	4618      	mov	r0, r3
 8002014:	3708      	adds	r7, #8
 8002016:	46bd      	mov	sp, r7
 8002018:	bd80      	pop	{r7, pc}

0800201a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800201a:	b580      	push	{r7, lr}
 800201c:	b08a      	sub	sp, #40	; 0x28
 800201e:	af02      	add	r7, sp, #8
 8002020:	60f8      	str	r0, [r7, #12]
 8002022:	60b9      	str	r1, [r7, #8]
 8002024:	603b      	str	r3, [r7, #0]
 8002026:	4613      	mov	r3, r2
 8002028:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800202a:	2300      	movs	r3, #0
 800202c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002034:	b2db      	uxtb	r3, r3
 8002036:	2b20      	cmp	r3, #32
 8002038:	d17b      	bne.n	8002132 <HAL_UART_Transmit+0x118>
  {
    if ((pData == NULL) || (Size == 0U))
 800203a:	68bb      	ldr	r3, [r7, #8]
 800203c:	2b00      	cmp	r3, #0
 800203e:	d002      	beq.n	8002046 <HAL_UART_Transmit+0x2c>
 8002040:	88fb      	ldrh	r3, [r7, #6]
 8002042:	2b00      	cmp	r3, #0
 8002044:	d101      	bne.n	800204a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002046:	2301      	movs	r3, #1
 8002048:	e074      	b.n	8002134 <HAL_UART_Transmit+0x11a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002050:	2b01      	cmp	r3, #1
 8002052:	d101      	bne.n	8002058 <HAL_UART_Transmit+0x3e>
 8002054:	2302      	movs	r3, #2
 8002056:	e06d      	b.n	8002134 <HAL_UART_Transmit+0x11a>
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	2201      	movs	r2, #1
 800205c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	2200      	movs	r2, #0
 8002064:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	2221      	movs	r2, #33	; 0x21
 800206a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800206e:	f7fe faed 	bl	800064c <HAL_GetTick>
 8002072:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	88fa      	ldrh	r2, [r7, #6]
 8002078:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	88fa      	ldrh	r2, [r7, #6]
 800207e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	689b      	ldr	r3, [r3, #8]
 8002084:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002088:	d108      	bne.n	800209c <HAL_UART_Transmit+0x82>
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	691b      	ldr	r3, [r3, #16]
 800208e:	2b00      	cmp	r3, #0
 8002090:	d104      	bne.n	800209c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002092:	2300      	movs	r3, #0
 8002094:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002096:	68bb      	ldr	r3, [r7, #8]
 8002098:	61bb      	str	r3, [r7, #24]
 800209a:	e003      	b.n	80020a4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800209c:	68bb      	ldr	r3, [r7, #8]
 800209e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80020a0:	2300      	movs	r3, #0
 80020a2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	2200      	movs	r2, #0
 80020a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80020ac:	e029      	b.n	8002102 <HAL_UART_Transmit+0xe8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80020ae:	683b      	ldr	r3, [r7, #0]
 80020b0:	9300      	str	r3, [sp, #0]
 80020b2:	697b      	ldr	r3, [r7, #20]
 80020b4:	2200      	movs	r2, #0
 80020b6:	2180      	movs	r1, #128	; 0x80
 80020b8:	68f8      	ldr	r0, [r7, #12]
 80020ba:	f000 f8e1 	bl	8002280 <UART_WaitOnFlagUntilTimeout>
 80020be:	4603      	mov	r3, r0
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d001      	beq.n	80020c8 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80020c4:	2303      	movs	r3, #3
 80020c6:	e035      	b.n	8002134 <HAL_UART_Transmit+0x11a>
      }
      if (pdata8bits == NULL)
 80020c8:	69fb      	ldr	r3, [r7, #28]
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d10a      	bne.n	80020e4 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	69ba      	ldr	r2, [r7, #24]
 80020d4:	8812      	ldrh	r2, [r2, #0]
 80020d6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80020da:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80020dc:	69bb      	ldr	r3, [r7, #24]
 80020de:	3302      	adds	r3, #2
 80020e0:	61bb      	str	r3, [r7, #24]
 80020e2:	e007      	b.n	80020f4 <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	69fa      	ldr	r2, [r7, #28]
 80020ea:	7812      	ldrb	r2, [r2, #0]
 80020ec:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80020ee:	69fb      	ldr	r3, [r7, #28]
 80020f0:	3301      	adds	r3, #1
 80020f2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80020f8:	b29b      	uxth	r3, r3
 80020fa:	3b01      	subs	r3, #1
 80020fc:	b29a      	uxth	r2, r3
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002106:	b29b      	uxth	r3, r3
 8002108:	2b00      	cmp	r3, #0
 800210a:	d1d0      	bne.n	80020ae <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800210c:	683b      	ldr	r3, [r7, #0]
 800210e:	9300      	str	r3, [sp, #0]
 8002110:	697b      	ldr	r3, [r7, #20]
 8002112:	2200      	movs	r2, #0
 8002114:	2140      	movs	r1, #64	; 0x40
 8002116:	68f8      	ldr	r0, [r7, #12]
 8002118:	f000 f8b2 	bl	8002280 <UART_WaitOnFlagUntilTimeout>
 800211c:	4603      	mov	r3, r0
 800211e:	2b00      	cmp	r3, #0
 8002120:	d001      	beq.n	8002126 <HAL_UART_Transmit+0x10c>
    {
      return HAL_TIMEOUT;
 8002122:	2303      	movs	r3, #3
 8002124:	e006      	b.n	8002134 <HAL_UART_Transmit+0x11a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	2220      	movs	r2, #32
 800212a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800212e:	2300      	movs	r3, #0
 8002130:	e000      	b.n	8002134 <HAL_UART_Transmit+0x11a>
  }
  else
  {
    return HAL_BUSY;
 8002132:	2302      	movs	r3, #2
  }
}
 8002134:	4618      	mov	r0, r3
 8002136:	3720      	adds	r7, #32
 8002138:	46bd      	mov	sp, r7
 800213a:	bd80      	pop	{r7, pc}

0800213c <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800213c:	b580      	push	{r7, lr}
 800213e:	b08a      	sub	sp, #40	; 0x28
 8002140:	af02      	add	r7, sp, #8
 8002142:	60f8      	str	r0, [r7, #12]
 8002144:	60b9      	str	r1, [r7, #8]
 8002146:	603b      	str	r3, [r7, #0]
 8002148:	4613      	mov	r3, r2
 800214a:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800214c:	2300      	movs	r3, #0
 800214e:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002156:	b2db      	uxtb	r3, r3
 8002158:	2b20      	cmp	r3, #32
 800215a:	f040 808c 	bne.w	8002276 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 800215e:	68bb      	ldr	r3, [r7, #8]
 8002160:	2b00      	cmp	r3, #0
 8002162:	d002      	beq.n	800216a <HAL_UART_Receive+0x2e>
 8002164:	88fb      	ldrh	r3, [r7, #6]
 8002166:	2b00      	cmp	r3, #0
 8002168:	d101      	bne.n	800216e <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 800216a:	2301      	movs	r3, #1
 800216c:	e084      	b.n	8002278 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002174:	2b01      	cmp	r3, #1
 8002176:	d101      	bne.n	800217c <HAL_UART_Receive+0x40>
 8002178:	2302      	movs	r3, #2
 800217a:	e07d      	b.n	8002278 <HAL_UART_Receive+0x13c>
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	2201      	movs	r2, #1
 8002180:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	2200      	movs	r2, #0
 8002188:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	2222      	movs	r2, #34	; 0x22
 800218e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	2200      	movs	r2, #0
 8002196:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002198:	f7fe fa58 	bl	800064c <HAL_GetTick>
 800219c:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	88fa      	ldrh	r2, [r7, #6]
 80021a2:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	88fa      	ldrh	r2, [r7, #6]
 80021a8:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	689b      	ldr	r3, [r3, #8]
 80021ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80021b2:	d108      	bne.n	80021c6 <HAL_UART_Receive+0x8a>
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	691b      	ldr	r3, [r3, #16]
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d104      	bne.n	80021c6 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 80021bc:	2300      	movs	r3, #0
 80021be:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80021c0:	68bb      	ldr	r3, [r7, #8]
 80021c2:	61bb      	str	r3, [r7, #24]
 80021c4:	e003      	b.n	80021ce <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 80021c6:	68bb      	ldr	r3, [r7, #8]
 80021c8:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80021ca:	2300      	movs	r3, #0
 80021cc:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	2200      	movs	r2, #0
 80021d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 80021d6:	e043      	b.n	8002260 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80021d8:	683b      	ldr	r3, [r7, #0]
 80021da:	9300      	str	r3, [sp, #0]
 80021dc:	697b      	ldr	r3, [r7, #20]
 80021de:	2200      	movs	r2, #0
 80021e0:	2120      	movs	r1, #32
 80021e2:	68f8      	ldr	r0, [r7, #12]
 80021e4:	f000 f84c 	bl	8002280 <UART_WaitOnFlagUntilTimeout>
 80021e8:	4603      	mov	r3, r0
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d001      	beq.n	80021f2 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 80021ee:	2303      	movs	r3, #3
 80021f0:	e042      	b.n	8002278 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 80021f2:	69fb      	ldr	r3, [r7, #28]
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d10c      	bne.n	8002212 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	685b      	ldr	r3, [r3, #4]
 80021fe:	b29b      	uxth	r3, r3
 8002200:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002204:	b29a      	uxth	r2, r3
 8002206:	69bb      	ldr	r3, [r7, #24]
 8002208:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800220a:	69bb      	ldr	r3, [r7, #24]
 800220c:	3302      	adds	r3, #2
 800220e:	61bb      	str	r3, [r7, #24]
 8002210:	e01f      	b.n	8002252 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	689b      	ldr	r3, [r3, #8]
 8002216:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800221a:	d007      	beq.n	800222c <HAL_UART_Receive+0xf0>
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	689b      	ldr	r3, [r3, #8]
 8002220:	2b00      	cmp	r3, #0
 8002222:	d10a      	bne.n	800223a <HAL_UART_Receive+0xfe>
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	691b      	ldr	r3, [r3, #16]
 8002228:	2b00      	cmp	r3, #0
 800222a:	d106      	bne.n	800223a <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	685b      	ldr	r3, [r3, #4]
 8002232:	b2da      	uxtb	r2, r3
 8002234:	69fb      	ldr	r3, [r7, #28]
 8002236:	701a      	strb	r2, [r3, #0]
 8002238:	e008      	b.n	800224c <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	685b      	ldr	r3, [r3, #4]
 8002240:	b2db      	uxtb	r3, r3
 8002242:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002246:	b2da      	uxtb	r2, r3
 8002248:	69fb      	ldr	r3, [r7, #28]
 800224a:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 800224c:	69fb      	ldr	r3, [r7, #28]
 800224e:	3301      	adds	r3, #1
 8002250:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002256:	b29b      	uxth	r3, r3
 8002258:	3b01      	subs	r3, #1
 800225a:	b29a      	uxth	r2, r3
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002264:	b29b      	uxth	r3, r3
 8002266:	2b00      	cmp	r3, #0
 8002268:	d1b6      	bne.n	80021d8 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	2220      	movs	r2, #32
 800226e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8002272:	2300      	movs	r3, #0
 8002274:	e000      	b.n	8002278 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8002276:	2302      	movs	r3, #2
  }
}
 8002278:	4618      	mov	r0, r3
 800227a:	3720      	adds	r7, #32
 800227c:	46bd      	mov	sp, r7
 800227e:	bd80      	pop	{r7, pc}

08002280 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002280:	b580      	push	{r7, lr}
 8002282:	b090      	sub	sp, #64	; 0x40
 8002284:	af00      	add	r7, sp, #0
 8002286:	60f8      	str	r0, [r7, #12]
 8002288:	60b9      	str	r1, [r7, #8]
 800228a:	603b      	str	r3, [r7, #0]
 800228c:	4613      	mov	r3, r2
 800228e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002290:	e050      	b.n	8002334 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002292:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002294:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002298:	d04c      	beq.n	8002334 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800229a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800229c:	2b00      	cmp	r3, #0
 800229e:	d007      	beq.n	80022b0 <UART_WaitOnFlagUntilTimeout+0x30>
 80022a0:	f7fe f9d4 	bl	800064c <HAL_GetTick>
 80022a4:	4602      	mov	r2, r0
 80022a6:	683b      	ldr	r3, [r7, #0]
 80022a8:	1ad2      	subs	r2, r2, r3
 80022aa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80022ac:	429a      	cmp	r2, r3
 80022ae:	d941      	bls.n	8002334 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	330c      	adds	r3, #12
 80022b6:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80022b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022ba:	e853 3f00 	ldrex	r3, [r3]
 80022be:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80022c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022c2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80022c6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	330c      	adds	r3, #12
 80022ce:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80022d0:	637a      	str	r2, [r7, #52]	; 0x34
 80022d2:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80022d4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80022d6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80022d8:	e841 2300 	strex	r3, r2, [r1]
 80022dc:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80022de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d1e5      	bne.n	80022b0 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	3314      	adds	r3, #20
 80022ea:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80022ec:	697b      	ldr	r3, [r7, #20]
 80022ee:	e853 3f00 	ldrex	r3, [r3]
 80022f2:	613b      	str	r3, [r7, #16]
   return(result);
 80022f4:	693b      	ldr	r3, [r7, #16]
 80022f6:	f023 0301 	bic.w	r3, r3, #1
 80022fa:	63bb      	str	r3, [r7, #56]	; 0x38
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	3314      	adds	r3, #20
 8002302:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002304:	623a      	str	r2, [r7, #32]
 8002306:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002308:	69f9      	ldr	r1, [r7, #28]
 800230a:	6a3a      	ldr	r2, [r7, #32]
 800230c:	e841 2300 	strex	r3, r2, [r1]
 8002310:	61bb      	str	r3, [r7, #24]
   return(result);
 8002312:	69bb      	ldr	r3, [r7, #24]
 8002314:	2b00      	cmp	r3, #0
 8002316:	d1e5      	bne.n	80022e4 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	2220      	movs	r2, #32
 800231c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	2220      	movs	r2, #32
 8002324:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	2200      	movs	r2, #0
 800232c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002330:	2303      	movs	r3, #3
 8002332:	e00f      	b.n	8002354 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	681a      	ldr	r2, [r3, #0]
 800233a:	68bb      	ldr	r3, [r7, #8]
 800233c:	401a      	ands	r2, r3
 800233e:	68bb      	ldr	r3, [r7, #8]
 8002340:	429a      	cmp	r2, r3
 8002342:	bf0c      	ite	eq
 8002344:	2301      	moveq	r3, #1
 8002346:	2300      	movne	r3, #0
 8002348:	b2db      	uxtb	r3, r3
 800234a:	461a      	mov	r2, r3
 800234c:	79fb      	ldrb	r3, [r7, #7]
 800234e:	429a      	cmp	r2, r3
 8002350:	d09f      	beq.n	8002292 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002352:	2300      	movs	r3, #0
}
 8002354:	4618      	mov	r0, r3
 8002356:	3740      	adds	r7, #64	; 0x40
 8002358:	46bd      	mov	sp, r7
 800235a:	bd80      	pop	{r7, pc}

0800235c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800235c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002360:	b091      	sub	sp, #68	; 0x44
 8002362:	af00      	add	r7, sp, #0
 8002364:	6378      	str	r0, [r7, #52]	; 0x34
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002366:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002368:	6819      	ldr	r1, [r3, #0]
 800236a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	691b      	ldr	r3, [r3, #16]
 8002370:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002374:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002376:	68db      	ldr	r3, [r3, #12]
 8002378:	4313      	orrs	r3, r2
 800237a:	610b      	str	r3, [r1, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800237c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800237e:	689a      	ldr	r2, [r3, #8]
 8002380:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002382:	691b      	ldr	r3, [r3, #16]
 8002384:	431a      	orrs	r2, r3
 8002386:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002388:	695b      	ldr	r3, [r3, #20]
 800238a:	431a      	orrs	r2, r3
 800238c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800238e:	69db      	ldr	r3, [r3, #28]
 8002390:	4313      	orrs	r3, r2
 8002392:	63bb      	str	r3, [r7, #56]	; 0x38
  MODIFY_REG(huart->Instance->CR1,
 8002394:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002396:	6819      	ldr	r1, [r3, #0]
 8002398:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	68db      	ldr	r3, [r3, #12]
 800239e:	f423 4216 	bic.w	r2, r3, #38400	; 0x9600
 80023a2:	f022 020c 	bic.w	r2, r2, #12
 80023a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80023a8:	4313      	orrs	r3, r2
 80023aa:	60cb      	str	r3, [r1, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80023ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80023ae:	6819      	ldr	r1, [r3, #0]
 80023b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	695b      	ldr	r3, [r3, #20]
 80023b6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80023ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80023bc:	699b      	ldr	r3, [r3, #24]
 80023be:	4313      	orrs	r3, r2
 80023c0:	614b      	str	r3, [r1, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80023c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80023c4:	681a      	ldr	r2, [r3, #0]
 80023c6:	4bba      	ldr	r3, [pc, #744]	; (80026b0 <UART_SetConfig+0x354>)
 80023c8:	429a      	cmp	r2, r3
 80023ca:	d004      	beq.n	80023d6 <UART_SetConfig+0x7a>
 80023cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80023ce:	681a      	ldr	r2, [r3, #0]
 80023d0:	4bb8      	ldr	r3, [pc, #736]	; (80026b4 <UART_SetConfig+0x358>)
 80023d2:	429a      	cmp	r2, r3
 80023d4:	d103      	bne.n	80023de <UART_SetConfig+0x82>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80023d6:	f7ff f891 	bl	80014fc <HAL_RCC_GetPCLK2Freq>
 80023da:	63f8      	str	r0, [r7, #60]	; 0x3c
 80023dc:	e002      	b.n	80023e4 <UART_SetConfig+0x88>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80023de:	f7ff f879 	bl	80014d4 <HAL_RCC_GetPCLK1Freq>
 80023e2:	63f8      	str	r0, [r7, #60]	; 0x3c
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80023e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80023e6:	69db      	ldr	r3, [r3, #28]
 80023e8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80023ec:	f040 80a7 	bne.w	800253e <UART_SetConfig+0x1e2>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80023f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80023f2:	681a      	ldr	r2, [r3, #0]
 80023f4:	62ba      	str	r2, [r7, #40]	; 0x28
 80023f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80023f8:	4619      	mov	r1, r3
 80023fa:	f04f 0200 	mov.w	r2, #0
 80023fe:	460b      	mov	r3, r1
 8002400:	4614      	mov	r4, r2
 8002402:	18db      	adds	r3, r3, r3
 8002404:	eb44 0404 	adc.w	r4, r4, r4
 8002408:	185b      	adds	r3, r3, r1
 800240a:	eb44 0402 	adc.w	r4, r4, r2
 800240e:	00e0      	lsls	r0, r4, #3
 8002410:	6178      	str	r0, [r7, #20]
 8002412:	6978      	ldr	r0, [r7, #20]
 8002414:	ea40 7053 	orr.w	r0, r0, r3, lsr #29
 8002418:	6178      	str	r0, [r7, #20]
 800241a:	00db      	lsls	r3, r3, #3
 800241c:	613b      	str	r3, [r7, #16]
 800241e:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8002422:	185d      	adds	r5, r3, r1
 8002424:	eb44 0602 	adc.w	r6, r4, r2
 8002428:	4628      	mov	r0, r5
 800242a:	4631      	mov	r1, r6
 800242c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800242e:	685b      	ldr	r3, [r3, #4]
 8002430:	f04f 0400 	mov.w	r4, #0
 8002434:	18db      	adds	r3, r3, r3
 8002436:	eb44 0404 	adc.w	r4, r4, r4
 800243a:	461a      	mov	r2, r3
 800243c:	4623      	mov	r3, r4
 800243e:	f7fd ff17 	bl	8000270 <__aeabi_uldivmod>
 8002442:	4603      	mov	r3, r0
 8002444:	460c      	mov	r4, r1
 8002446:	461a      	mov	r2, r3
 8002448:	4b9b      	ldr	r3, [pc, #620]	; (80026b8 <UART_SetConfig+0x35c>)
 800244a:	fba3 2302 	umull	r2, r3, r3, r2
 800244e:	095b      	lsrs	r3, r3, #5
 8002450:	011e      	lsls	r6, r3, #4
 8002452:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002454:	4619      	mov	r1, r3
 8002456:	f04f 0200 	mov.w	r2, #0
 800245a:	460b      	mov	r3, r1
 800245c:	4614      	mov	r4, r2
 800245e:	18db      	adds	r3, r3, r3
 8002460:	eb44 0404 	adc.w	r4, r4, r4
 8002464:	185b      	adds	r3, r3, r1
 8002466:	eb44 0402 	adc.w	r4, r4, r2
 800246a:	ea4f 0bc4 	mov.w	fp, r4, lsl #3
 800246e:	ea4b 7b53 	orr.w	fp, fp, r3, lsr #29
 8002472:	ea4f 0ac3 	mov.w	sl, r3, lsl #3
 8002476:	4653      	mov	r3, sl
 8002478:	465c      	mov	r4, fp
 800247a:	eb13 0a01 	adds.w	sl, r3, r1
 800247e:	eb44 0b02 	adc.w	fp, r4, r2
 8002482:	4650      	mov	r0, sl
 8002484:	4659      	mov	r1, fp
 8002486:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002488:	685b      	ldr	r3, [r3, #4]
 800248a:	f04f 0400 	mov.w	r4, #0
 800248e:	18db      	adds	r3, r3, r3
 8002490:	eb44 0404 	adc.w	r4, r4, r4
 8002494:	461a      	mov	r2, r3
 8002496:	4623      	mov	r3, r4
 8002498:	f7fd feea 	bl	8000270 <__aeabi_uldivmod>
 800249c:	4603      	mov	r3, r0
 800249e:	460c      	mov	r4, r1
 80024a0:	461a      	mov	r2, r3
 80024a2:	4b85      	ldr	r3, [pc, #532]	; (80026b8 <UART_SetConfig+0x35c>)
 80024a4:	fba3 1302 	umull	r1, r3, r3, r2
 80024a8:	095b      	lsrs	r3, r3, #5
 80024aa:	2164      	movs	r1, #100	; 0x64
 80024ac:	fb01 f303 	mul.w	r3, r1, r3
 80024b0:	1ad3      	subs	r3, r2, r3
 80024b2:	00db      	lsls	r3, r3, #3
 80024b4:	3332      	adds	r3, #50	; 0x32
 80024b6:	4a80      	ldr	r2, [pc, #512]	; (80026b8 <UART_SetConfig+0x35c>)
 80024b8:	fba2 2303 	umull	r2, r3, r2, r3
 80024bc:	095b      	lsrs	r3, r3, #5
 80024be:	005b      	lsls	r3, r3, #1
 80024c0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80024c4:	441e      	add	r6, r3
 80024c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80024c8:	4619      	mov	r1, r3
 80024ca:	f04f 0200 	mov.w	r2, #0
 80024ce:	460b      	mov	r3, r1
 80024d0:	4614      	mov	r4, r2
 80024d2:	18db      	adds	r3, r3, r3
 80024d4:	eb44 0404 	adc.w	r4, r4, r4
 80024d8:	185b      	adds	r3, r3, r1
 80024da:	eb44 0402 	adc.w	r4, r4, r2
 80024de:	ea4f 09c4 	mov.w	r9, r4, lsl #3
 80024e2:	ea49 7953 	orr.w	r9, r9, r3, lsr #29
 80024e6:	ea4f 08c3 	mov.w	r8, r3, lsl #3
 80024ea:	4643      	mov	r3, r8
 80024ec:	464c      	mov	r4, r9
 80024ee:	eb13 0801 	adds.w	r8, r3, r1
 80024f2:	eb44 0902 	adc.w	r9, r4, r2
 80024f6:	4640      	mov	r0, r8
 80024f8:	4649      	mov	r1, r9
 80024fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80024fc:	685b      	ldr	r3, [r3, #4]
 80024fe:	f04f 0400 	mov.w	r4, #0
 8002502:	18db      	adds	r3, r3, r3
 8002504:	eb44 0404 	adc.w	r4, r4, r4
 8002508:	461a      	mov	r2, r3
 800250a:	4623      	mov	r3, r4
 800250c:	f7fd feb0 	bl	8000270 <__aeabi_uldivmod>
 8002510:	4603      	mov	r3, r0
 8002512:	460c      	mov	r4, r1
 8002514:	461a      	mov	r2, r3
 8002516:	4b68      	ldr	r3, [pc, #416]	; (80026b8 <UART_SetConfig+0x35c>)
 8002518:	fba3 1302 	umull	r1, r3, r3, r2
 800251c:	095b      	lsrs	r3, r3, #5
 800251e:	2164      	movs	r1, #100	; 0x64
 8002520:	fb01 f303 	mul.w	r3, r1, r3
 8002524:	1ad3      	subs	r3, r2, r3
 8002526:	00db      	lsls	r3, r3, #3
 8002528:	3332      	adds	r3, #50	; 0x32
 800252a:	4a63      	ldr	r2, [pc, #396]	; (80026b8 <UART_SetConfig+0x35c>)
 800252c:	fba2 2303 	umull	r2, r3, r2, r3
 8002530:	095b      	lsrs	r3, r3, #5
 8002532:	f003 0307 	and.w	r3, r3, #7
 8002536:	4433      	add	r3, r6
 8002538:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800253a:	6093      	str	r3, [r2, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800253c:	e0b3      	b.n	80026a6 <UART_SetConfig+0x34a>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800253e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	613b      	str	r3, [r7, #16]
 8002544:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002546:	4619      	mov	r1, r3
 8002548:	f04f 0200 	mov.w	r2, #0
 800254c:	460b      	mov	r3, r1
 800254e:	4614      	mov	r4, r2
 8002550:	18db      	adds	r3, r3, r3
 8002552:	eb44 0404 	adc.w	r4, r4, r4
 8002556:	185b      	adds	r3, r3, r1
 8002558:	eb44 0402 	adc.w	r4, r4, r2
 800255c:	00e6      	lsls	r6, r4, #3
 800255e:	ea46 7653 	orr.w	r6, r6, r3, lsr #29
 8002562:	00dd      	lsls	r5, r3, #3
 8002564:	462b      	mov	r3, r5
 8002566:	4634      	mov	r4, r6
 8002568:	185d      	adds	r5, r3, r1
 800256a:	eb44 0602 	adc.w	r6, r4, r2
 800256e:	4628      	mov	r0, r5
 8002570:	4631      	mov	r1, r6
 8002572:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002574:	685b      	ldr	r3, [r3, #4]
 8002576:	f04f 0400 	mov.w	r4, #0
 800257a:	00a5      	lsls	r5, r4, #2
 800257c:	62fd      	str	r5, [r7, #44]	; 0x2c
 800257e:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 8002580:	ea45 7593 	orr.w	r5, r5, r3, lsr #30
 8002584:	62fd      	str	r5, [r7, #44]	; 0x2c
 8002586:	009c      	lsls	r4, r3, #2
 8002588:	62bc      	str	r4, [r7, #40]	; 0x28
 800258a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800258e:	f7fd fe6f 	bl	8000270 <__aeabi_uldivmod>
 8002592:	4603      	mov	r3, r0
 8002594:	460c      	mov	r4, r1
 8002596:	461a      	mov	r2, r3
 8002598:	4b47      	ldr	r3, [pc, #284]	; (80026b8 <UART_SetConfig+0x35c>)
 800259a:	fba3 1302 	umull	r1, r3, r3, r2
 800259e:	095b      	lsrs	r3, r3, #5
 80025a0:	011d      	lsls	r5, r3, #4
 80025a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80025a4:	4619      	mov	r1, r3
 80025a6:	f04f 0200 	mov.w	r2, #0
 80025aa:	460b      	mov	r3, r1
 80025ac:	4614      	mov	r4, r2
 80025ae:	18db      	adds	r3, r3, r3
 80025b0:	eb44 0404 	adc.w	r4, r4, r4
 80025b4:	185b      	adds	r3, r3, r1
 80025b6:	eb44 0402 	adc.w	r4, r4, r2
 80025ba:	00e0      	lsls	r0, r4, #3
 80025bc:	60f8      	str	r0, [r7, #12]
 80025be:	68f8      	ldr	r0, [r7, #12]
 80025c0:	ea40 7053 	orr.w	r0, r0, r3, lsr #29
 80025c4:	60f8      	str	r0, [r7, #12]
 80025c6:	00d8      	lsls	r0, r3, #3
 80025c8:	60b8      	str	r0, [r7, #8]
 80025ca:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 80025ce:	eb13 0801 	adds.w	r8, r3, r1
 80025d2:	eb44 0902 	adc.w	r9, r4, r2
 80025d6:	4640      	mov	r0, r8
 80025d8:	4649      	mov	r1, r9
 80025da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80025dc:	685b      	ldr	r3, [r3, #4]
 80025de:	f04f 0400 	mov.w	r4, #0
 80025e2:	00a6      	lsls	r6, r4, #2
 80025e4:	627e      	str	r6, [r7, #36]	; 0x24
 80025e6:	6a7e      	ldr	r6, [r7, #36]	; 0x24
 80025e8:	ea46 7693 	orr.w	r6, r6, r3, lsr #30
 80025ec:	627e      	str	r6, [r7, #36]	; 0x24
 80025ee:	009c      	lsls	r4, r3, #2
 80025f0:	623c      	str	r4, [r7, #32]
 80025f2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80025f6:	f7fd fe3b 	bl	8000270 <__aeabi_uldivmod>
 80025fa:	4603      	mov	r3, r0
 80025fc:	460c      	mov	r4, r1
 80025fe:	461a      	mov	r2, r3
 8002600:	4b2d      	ldr	r3, [pc, #180]	; (80026b8 <UART_SetConfig+0x35c>)
 8002602:	fba3 1302 	umull	r1, r3, r3, r2
 8002606:	095b      	lsrs	r3, r3, #5
 8002608:	2164      	movs	r1, #100	; 0x64
 800260a:	fb01 f303 	mul.w	r3, r1, r3
 800260e:	1ad3      	subs	r3, r2, r3
 8002610:	011b      	lsls	r3, r3, #4
 8002612:	3332      	adds	r3, #50	; 0x32
 8002614:	4a28      	ldr	r2, [pc, #160]	; (80026b8 <UART_SetConfig+0x35c>)
 8002616:	fba2 1303 	umull	r1, r3, r2, r3
 800261a:	095b      	lsrs	r3, r3, #5
 800261c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002620:	441d      	add	r5, r3
 8002622:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002624:	4619      	mov	r1, r3
 8002626:	f04f 0200 	mov.w	r2, #0
 800262a:	460b      	mov	r3, r1
 800262c:	4614      	mov	r4, r2
 800262e:	18db      	adds	r3, r3, r3
 8002630:	eb44 0404 	adc.w	r4, r4, r4
 8002634:	185b      	adds	r3, r3, r1
 8002636:	eb44 0402 	adc.w	r4, r4, r2
 800263a:	00e0      	lsls	r0, r4, #3
 800263c:	6078      	str	r0, [r7, #4]
 800263e:	6878      	ldr	r0, [r7, #4]
 8002640:	ea40 7053 	orr.w	r0, r0, r3, lsr #29
 8002644:	6078      	str	r0, [r7, #4]
 8002646:	00d8      	lsls	r0, r3, #3
 8002648:	6038      	str	r0, [r7, #0]
 800264a:	e897 0018 	ldmia.w	r7, {r3, r4}
 800264e:	eb13 0801 	adds.w	r8, r3, r1
 8002652:	eb44 0902 	adc.w	r9, r4, r2
 8002656:	4640      	mov	r0, r8
 8002658:	4649      	mov	r1, r9
 800265a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800265c:	685b      	ldr	r3, [r3, #4]
 800265e:	f04f 0400 	mov.w	r4, #0
 8002662:	00a6      	lsls	r6, r4, #2
 8002664:	61fe      	str	r6, [r7, #28]
 8002666:	69fe      	ldr	r6, [r7, #28]
 8002668:	ea46 7693 	orr.w	r6, r6, r3, lsr #30
 800266c:	61fe      	str	r6, [r7, #28]
 800266e:	009c      	lsls	r4, r3, #2
 8002670:	61bc      	str	r4, [r7, #24]
 8002672:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002676:	f7fd fdfb 	bl	8000270 <__aeabi_uldivmod>
 800267a:	4603      	mov	r3, r0
 800267c:	460c      	mov	r4, r1
 800267e:	461a      	mov	r2, r3
 8002680:	4b0d      	ldr	r3, [pc, #52]	; (80026b8 <UART_SetConfig+0x35c>)
 8002682:	fba3 1302 	umull	r1, r3, r3, r2
 8002686:	095b      	lsrs	r3, r3, #5
 8002688:	2164      	movs	r1, #100	; 0x64
 800268a:	fb01 f303 	mul.w	r3, r1, r3
 800268e:	1ad3      	subs	r3, r2, r3
 8002690:	011b      	lsls	r3, r3, #4
 8002692:	3332      	adds	r3, #50	; 0x32
 8002694:	4a08      	ldr	r2, [pc, #32]	; (80026b8 <UART_SetConfig+0x35c>)
 8002696:	fba2 1303 	umull	r1, r3, r2, r3
 800269a:	095b      	lsrs	r3, r3, #5
 800269c:	f003 030f 	and.w	r3, r3, #15
 80026a0:	442b      	add	r3, r5
 80026a2:	693a      	ldr	r2, [r7, #16]
 80026a4:	6093      	str	r3, [r2, #8]
}
 80026a6:	bf00      	nop
 80026a8:	3744      	adds	r7, #68	; 0x44
 80026aa:	46bd      	mov	sp, r7
 80026ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80026b0:	40011000 	.word	0x40011000
 80026b4:	40011400 	.word	0x40011400
 80026b8:	51eb851f 	.word	0x51eb851f

080026bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80026bc:	b580      	push	{r7, lr}
 80026be:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80026c0:	f7fd ff5e 	bl	8000580 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80026c4:	f000 f8b0 	bl	8002828 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80026c8:	f000 f9fc 	bl	8002ac4 <MX_GPIO_Init>
  MX_SPI1_Init();
 80026cc:	f000 f916 	bl	80028fc <MX_SPI1_Init>
  MX_TIM2_Init();
 80026d0:	f000 f980 	bl	80029d4 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 80026d4:	f000 f9cc 	bl	8002a70 <MX_USART2_UART_Init>
  MX_SPI2_Init();
 80026d8:	f000 f946 	bl	8002968 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */
  RetargetInit(&huart2);
 80026dc:	4841      	ldr	r0, [pc, #260]	; (80027e4 <main+0x128>)
 80026de:	f000 fb15 	bl	8002d0c <RetargetInit>
  printf("Code Started\r\n");
 80026e2:	4841      	ldr	r0, [pc, #260]	; (80027e8 <main+0x12c>)
 80026e4:	f000 fe3e 	bl	8003364 <puts>
		  }
	  }

	/** TRIAC Control code STARTS **/
#else
	if(f_ChangePWM){
 80026e8:	4b40      	ldr	r3, [pc, #256]	; (80027ec <main+0x130>)
 80026ea:	781b      	ldrb	r3, [r3, #0]
 80026ec:	b2db      	uxtb	r3, r3
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d021      	beq.n	8002736 <main+0x7a>
		//Handling PWM change on USR button press
		f_ChangePWM = false;
 80026f2:	4b3e      	ldr	r3, [pc, #248]	; (80027ec <main+0x130>)
 80026f4:	2200      	movs	r2, #0
 80026f6:	701a      	strb	r2, [r3, #0]
		printf("Enter New Duty Cycle\r\n");
 80026f8:	483d      	ldr	r0, [pc, #244]	; (80027f0 <main+0x134>)
 80026fa:	f000 fe33 	bl	8003364 <puts>
		while(1){
			scanf("%d", &DutyCycle);
 80026fe:	493d      	ldr	r1, [pc, #244]	; (80027f4 <main+0x138>)
 8002700:	483d      	ldr	r0, [pc, #244]	; (80027f8 <main+0x13c>)
 8002702:	f000 fe37 	bl	8003374 <iscanf>
			if((DutyCycle >= 0) && (DutyCycle <= 100)){
 8002706:	4b3b      	ldr	r3, [pc, #236]	; (80027f4 <main+0x138>)
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	2b00      	cmp	r3, #0
 800270c:	db0f      	blt.n	800272e <main+0x72>
 800270e:	4b39      	ldr	r3, [pc, #228]	; (80027f4 <main+0x138>)
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	2b64      	cmp	r3, #100	; 0x64
 8002714:	dc0b      	bgt.n	800272e <main+0x72>
				set_dutycycle = DutyCycle;
 8002716:	4b37      	ldr	r3, [pc, #220]	; (80027f4 <main+0x138>)
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	b2da      	uxtb	r2, r3
 800271c:	4b37      	ldr	r3, [pc, #220]	; (80027fc <main+0x140>)
 800271e:	701a      	strb	r2, [r3, #0]
				printf("%d\r\n", DutyCycle);
 8002720:	4b34      	ldr	r3, [pc, #208]	; (80027f4 <main+0x138>)
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	4619      	mov	r1, r3
 8002726:	4836      	ldr	r0, [pc, #216]	; (8002800 <main+0x144>)
 8002728:	f000 fda8 	bl	800327c <iprintf>
				break;
 800272c:	e003      	b.n	8002736 <main+0x7a>
			}
			else{
				printf("Enter Duty Cycle value between 0 to 100. \r\n Try Again\r\n");
 800272e:	4835      	ldr	r0, [pc, #212]	; (8002804 <main+0x148>)
 8002730:	f000 fe18 	bl	8003364 <puts>
			scanf("%d", &DutyCycle);
 8002734:	e7e3      	b.n	80026fe <main+0x42>
			}
		}
	}
#endif
    if(f_StartPWM){
 8002736:	4b34      	ldr	r3, [pc, #208]	; (8002808 <main+0x14c>)
 8002738:	781b      	ldrb	r3, [r3, #0]
 800273a:	b2db      	uxtb	r3, r3
 800273c:	2b00      	cmp	r3, #0
 800273e:	d0d3      	beq.n	80026e8 <main+0x2c>
		f_StartPWM = false;
 8002740:	4b31      	ldr	r3, [pc, #196]	; (8002808 <main+0x14c>)
 8002742:	2200      	movs	r2, #0
 8002744:	701a      	strb	r2, [r3, #0]
		setDutyCycle = set_dutycycle;
 8002746:	4b2d      	ldr	r3, [pc, #180]	; (80027fc <main+0x140>)
 8002748:	781b      	ldrb	r3, [r3, #0]
 800274a:	461a      	mov	r2, r3
 800274c:	4b2f      	ldr	r3, [pc, #188]	; (800280c <main+0x150>)
 800274e:	601a      	str	r2, [r3, #0]

		/** New logic to handle PWM manually below **/
		switch(wave_state){
 8002750:	4b2f      	ldr	r3, [pc, #188]	; (8002810 <main+0x154>)
 8002752:	781b      	ldrb	r3, [r3, #0]
 8002754:	b2db      	uxtb	r3, r3
 8002756:	2b00      	cmp	r3, #0
 8002758:	d002      	beq.n	8002760 <main+0xa4>
 800275a:	2b01      	cmp	r3, #1
 800275c:	d02e      	beq.n	80027bc <main+0x100>
 800275e:	e03a      	b.n	80027d6 <main+0x11a>
		case OffState:
			HAL_GPIO_WritePin(OPTO_PWM_GPIO_Port, OPTO_PWM_Pin, GPIO_PIN_RESET);		//Set Opto output to low
 8002760:	2200      	movs	r2, #0
 8002762:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002766:	482b      	ldr	r0, [pc, #172]	; (8002814 <main+0x158>)
 8002768:	f7fe fa26 	bl	8000bb8 <HAL_GPIO_WritePin>
//			__HAL_TIM_SET_AUTORELOAD(&htim2, (100-DutyCycle));							//Time set for off cycle
			//Start timer only when ZCD received with set duty cycle
			htim2.Instance->ARR = (100-setDutyCycle)*10;
 800276c:	4b2a      	ldr	r3, [pc, #168]	; (8002818 <main+0x15c>)
 800276e:	6819      	ldr	r1, [r3, #0]
 8002770:	4b26      	ldr	r3, [pc, #152]	; (800280c <main+0x150>)
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f1c3 0264 	rsb	r2, r3, #100	; 0x64
 8002778:	4613      	mov	r3, r2
 800277a:	009b      	lsls	r3, r3, #2
 800277c:	4413      	add	r3, r2
 800277e:	005b      	lsls	r3, r3, #1
 8002780:	62cb      	str	r3, [r1, #44]	; 0x2c
			htim2.Init.Period = (100-setDutyCycle)*10;
 8002782:	4b22      	ldr	r3, [pc, #136]	; (800280c <main+0x150>)
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f1c3 0264 	rsb	r2, r3, #100	; 0x64
 800278a:	4613      	mov	r3, r2
 800278c:	009b      	lsls	r3, r3, #2
 800278e:	4413      	add	r3, r2
 8002790:	005b      	lsls	r3, r3, #1
 8002792:	461a      	mov	r2, r3
 8002794:	4b20      	ldr	r3, [pc, #128]	; (8002818 <main+0x15c>)
 8002796:	60da      	str	r2, [r3, #12]
			HAL_TIM_Base_Start_IT(&htim2);
 8002798:	481f      	ldr	r0, [pc, #124]	; (8002818 <main+0x15c>)
 800279a:	f7fe ff9b 	bl	80016d4 <HAL_TIM_Base_Start_IT>
			printf("off:%d|%d|%d\r\n", wave_state, 100-setDutyCycle, __HAL_TIM_GET_AUTORELOAD(&htim2));
 800279e:	4b1c      	ldr	r3, [pc, #112]	; (8002810 <main+0x154>)
 80027a0:	781b      	ldrb	r3, [r3, #0]
 80027a2:	b2db      	uxtb	r3, r3
 80027a4:	4619      	mov	r1, r3
 80027a6:	4b19      	ldr	r3, [pc, #100]	; (800280c <main+0x150>)
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f1c3 0264 	rsb	r2, r3, #100	; 0x64
 80027ae:	4b1a      	ldr	r3, [pc, #104]	; (8002818 <main+0x15c>)
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027b4:	4819      	ldr	r0, [pc, #100]	; (800281c <main+0x160>)
 80027b6:	f000 fd61 	bl	800327c <iprintf>
			break;
 80027ba:	e00c      	b.n	80027d6 <main+0x11a>

		case OnState:

//			__HAL_TIM_SET_AUTORELOAD(&htim2, DutyCycle);								//Time set for off cycle
			printf("on:%d|%d|%d\r\n", wave_state, setDutyCycle, __HAL_TIM_GET_AUTORELOAD(&htim2));
 80027bc:	4b14      	ldr	r3, [pc, #80]	; (8002810 <main+0x154>)
 80027be:	781b      	ldrb	r3, [r3, #0]
 80027c0:	b2db      	uxtb	r3, r3
 80027c2:	4619      	mov	r1, r3
 80027c4:	4b11      	ldr	r3, [pc, #68]	; (800280c <main+0x150>)
 80027c6:	681a      	ldr	r2, [r3, #0]
 80027c8:	4b13      	ldr	r3, [pc, #76]	; (8002818 <main+0x15c>)
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027ce:	4814      	ldr	r0, [pc, #80]	; (8002820 <main+0x164>)
 80027d0:	f000 fd54 	bl	800327c <iprintf>
			break;
 80027d4:	bf00      	nop
		}

		HAL_GPIO_TogglePin(GPIOD, LD3_Pin);
 80027d6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80027da:	4812      	ldr	r0, [pc, #72]	; (8002824 <main+0x168>)
 80027dc:	f7fe fa05 	bl	8000bea <HAL_GPIO_TogglePin>
	if(f_ChangePWM){
 80027e0:	e782      	b.n	80026e8 <main+0x2c>
 80027e2:	bf00      	nop
 80027e4:	2000031c 	.word	0x2000031c
 80027e8:	08004ef0 	.word	0x08004ef0
 80027ec:	200001f9 	.word	0x200001f9
 80027f0:	08004f00 	.word	0x08004f00
 80027f4:	200001fc 	.word	0x200001fc
 80027f8:	08004f18 	.word	0x08004f18
 80027fc:	20000204 	.word	0x20000204
 8002800:	08004f1c 	.word	0x08004f1c
 8002804:	08004f24 	.word	0x08004f24
 8002808:	200001f8 	.word	0x200001f8
 800280c:	20000200 	.word	0x20000200
 8002810:	20000270 	.word	0x20000270
 8002814:	40020000 	.word	0x40020000
 8002818:	200002d4 	.word	0x200002d4
 800281c:	08004f5c 	.word	0x08004f5c
 8002820:	08004f6c 	.word	0x08004f6c
 8002824:	40020c00 	.word	0x40020c00

08002828 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002828:	b580      	push	{r7, lr}
 800282a:	b094      	sub	sp, #80	; 0x50
 800282c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800282e:	f107 0320 	add.w	r3, r7, #32
 8002832:	2230      	movs	r2, #48	; 0x30
 8002834:	2100      	movs	r1, #0
 8002836:	4618      	mov	r0, r3
 8002838:	f000 fd17 	bl	800326a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800283c:	f107 030c 	add.w	r3, r7, #12
 8002840:	2200      	movs	r2, #0
 8002842:	601a      	str	r2, [r3, #0]
 8002844:	605a      	str	r2, [r3, #4]
 8002846:	609a      	str	r2, [r3, #8]
 8002848:	60da      	str	r2, [r3, #12]
 800284a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800284c:	2300      	movs	r3, #0
 800284e:	60bb      	str	r3, [r7, #8]
 8002850:	4a28      	ldr	r2, [pc, #160]	; (80028f4 <SystemClock_Config+0xcc>)
 8002852:	4b28      	ldr	r3, [pc, #160]	; (80028f4 <SystemClock_Config+0xcc>)
 8002854:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002856:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800285a:	6413      	str	r3, [r2, #64]	; 0x40
 800285c:	4b25      	ldr	r3, [pc, #148]	; (80028f4 <SystemClock_Config+0xcc>)
 800285e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002860:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002864:	60bb      	str	r3, [r7, #8]
 8002866:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002868:	2300      	movs	r3, #0
 800286a:	607b      	str	r3, [r7, #4]
 800286c:	4a22      	ldr	r2, [pc, #136]	; (80028f8 <SystemClock_Config+0xd0>)
 800286e:	4b22      	ldr	r3, [pc, #136]	; (80028f8 <SystemClock_Config+0xd0>)
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002876:	6013      	str	r3, [r2, #0]
 8002878:	4b1f      	ldr	r3, [pc, #124]	; (80028f8 <SystemClock_Config+0xd0>)
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002880:	607b      	str	r3, [r7, #4]
 8002882:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002884:	2301      	movs	r3, #1
 8002886:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002888:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800288c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800288e:	2302      	movs	r3, #2
 8002890:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002892:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002896:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002898:	2308      	movs	r3, #8
 800289a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 800289c:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80028a0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80028a2:	2302      	movs	r3, #2
 80028a4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80028a6:	2307      	movs	r3, #7
 80028a8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80028aa:	f107 0320 	add.w	r3, r7, #32
 80028ae:	4618      	mov	r0, r3
 80028b0:	f7fe f9ce 	bl	8000c50 <HAL_RCC_OscConfig>
 80028b4:	4603      	mov	r3, r0
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d001      	beq.n	80028be <SystemClock_Config+0x96>
  {
    Error_Handler();
 80028ba:	f000 fa23 	bl	8002d04 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80028be:	230f      	movs	r3, #15
 80028c0:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80028c2:	2302      	movs	r3, #2
 80028c4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80028c6:	2300      	movs	r3, #0
 80028c8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80028ca:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80028ce:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80028d0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80028d4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80028d6:	f107 030c 	add.w	r3, r7, #12
 80028da:	2105      	movs	r1, #5
 80028dc:	4618      	mov	r0, r3
 80028de:	f7fe fc2f 	bl	8001140 <HAL_RCC_ClockConfig>
 80028e2:	4603      	mov	r3, r0
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d001      	beq.n	80028ec <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80028e8:	f000 fa0c 	bl	8002d04 <Error_Handler>
  }
}
 80028ec:	bf00      	nop
 80028ee:	3750      	adds	r7, #80	; 0x50
 80028f0:	46bd      	mov	sp, r7
 80028f2:	bd80      	pop	{r7, pc}
 80028f4:	40023800 	.word	0x40023800
 80028f8:	40007000 	.word	0x40007000

080028fc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80028fc:	b580      	push	{r7, lr}
 80028fe:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002900:	4b17      	ldr	r3, [pc, #92]	; (8002960 <MX_SPI1_Init+0x64>)
 8002902:	4a18      	ldr	r2, [pc, #96]	; (8002964 <MX_SPI1_Init+0x68>)
 8002904:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002906:	4b16      	ldr	r3, [pc, #88]	; (8002960 <MX_SPI1_Init+0x64>)
 8002908:	f44f 7282 	mov.w	r2, #260	; 0x104
 800290c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800290e:	4b14      	ldr	r3, [pc, #80]	; (8002960 <MX_SPI1_Init+0x64>)
 8002910:	2200      	movs	r2, #0
 8002912:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002914:	4b12      	ldr	r3, [pc, #72]	; (8002960 <MX_SPI1_Init+0x64>)
 8002916:	2200      	movs	r2, #0
 8002918:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800291a:	4b11      	ldr	r3, [pc, #68]	; (8002960 <MX_SPI1_Init+0x64>)
 800291c:	2200      	movs	r2, #0
 800291e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002920:	4b0f      	ldr	r3, [pc, #60]	; (8002960 <MX_SPI1_Init+0x64>)
 8002922:	2200      	movs	r2, #0
 8002924:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002926:	4b0e      	ldr	r3, [pc, #56]	; (8002960 <MX_SPI1_Init+0x64>)
 8002928:	f44f 7200 	mov.w	r2, #512	; 0x200
 800292c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800292e:	4b0c      	ldr	r3, [pc, #48]	; (8002960 <MX_SPI1_Init+0x64>)
 8002930:	2200      	movs	r2, #0
 8002932:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002934:	4b0a      	ldr	r3, [pc, #40]	; (8002960 <MX_SPI1_Init+0x64>)
 8002936:	2200      	movs	r2, #0
 8002938:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800293a:	4b09      	ldr	r3, [pc, #36]	; (8002960 <MX_SPI1_Init+0x64>)
 800293c:	2200      	movs	r2, #0
 800293e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002940:	4b07      	ldr	r3, [pc, #28]	; (8002960 <MX_SPI1_Init+0x64>)
 8002942:	2200      	movs	r2, #0
 8002944:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002946:	4b06      	ldr	r3, [pc, #24]	; (8002960 <MX_SPI1_Init+0x64>)
 8002948:	220a      	movs	r2, #10
 800294a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800294c:	4804      	ldr	r0, [pc, #16]	; (8002960 <MX_SPI1_Init+0x64>)
 800294e:	f7fe fde9 	bl	8001524 <HAL_SPI_Init>
 8002952:	4603      	mov	r3, r0
 8002954:	2b00      	cmp	r3, #0
 8002956:	d001      	beq.n	800295c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8002958:	f000 f9d4 	bl	8002d04 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800295c:	bf00      	nop
 800295e:	bd80      	pop	{r7, pc}
 8002960:	2000027c 	.word	0x2000027c
 8002964:	40013000 	.word	0x40013000

08002968 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8002968:	b580      	push	{r7, lr}
 800296a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 800296c:	4b17      	ldr	r3, [pc, #92]	; (80029cc <MX_SPI2_Init+0x64>)
 800296e:	4a18      	ldr	r2, [pc, #96]	; (80029d0 <MX_SPI2_Init+0x68>)
 8002970:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8002972:	4b16      	ldr	r3, [pc, #88]	; (80029cc <MX_SPI2_Init+0x64>)
 8002974:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002978:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800297a:	4b14      	ldr	r3, [pc, #80]	; (80029cc <MX_SPI2_Init+0x64>)
 800297c:	2200      	movs	r2, #0
 800297e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8002980:	4b12      	ldr	r3, [pc, #72]	; (80029cc <MX_SPI2_Init+0x64>)
 8002982:	2200      	movs	r2, #0
 8002984:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002986:	4b11      	ldr	r3, [pc, #68]	; (80029cc <MX_SPI2_Init+0x64>)
 8002988:	2200      	movs	r2, #0
 800298a:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800298c:	4b0f      	ldr	r3, [pc, #60]	; (80029cc <MX_SPI2_Init+0x64>)
 800298e:	2200      	movs	r2, #0
 8002990:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8002992:	4b0e      	ldr	r3, [pc, #56]	; (80029cc <MX_SPI2_Init+0x64>)
 8002994:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002998:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 800299a:	4b0c      	ldr	r3, [pc, #48]	; (80029cc <MX_SPI2_Init+0x64>)
 800299c:	2228      	movs	r2, #40	; 0x28
 800299e:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80029a0:	4b0a      	ldr	r3, [pc, #40]	; (80029cc <MX_SPI2_Init+0x64>)
 80029a2:	2200      	movs	r2, #0
 80029a4:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80029a6:	4b09      	ldr	r3, [pc, #36]	; (80029cc <MX_SPI2_Init+0x64>)
 80029a8:	2200      	movs	r2, #0
 80029aa:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80029ac:	4b07      	ldr	r3, [pc, #28]	; (80029cc <MX_SPI2_Init+0x64>)
 80029ae:	2200      	movs	r2, #0
 80029b0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 80029b2:	4b06      	ldr	r3, [pc, #24]	; (80029cc <MX_SPI2_Init+0x64>)
 80029b4:	220a      	movs	r2, #10
 80029b6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80029b8:	4804      	ldr	r0, [pc, #16]	; (80029cc <MX_SPI2_Init+0x64>)
 80029ba:	f7fe fdb3 	bl	8001524 <HAL_SPI_Init>
 80029be:	4603      	mov	r3, r0
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d001      	beq.n	80029c8 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80029c4:	f000 f99e 	bl	8002d04 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80029c8:	bf00      	nop
 80029ca:	bd80      	pop	{r7, pc}
 80029cc:	20000218 	.word	0x20000218
 80029d0:	40003800 	.word	0x40003800

080029d4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80029d4:	b580      	push	{r7, lr}
 80029d6:	b086      	sub	sp, #24
 80029d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80029da:	f107 0308 	add.w	r3, r7, #8
 80029de:	2200      	movs	r2, #0
 80029e0:	601a      	str	r2, [r3, #0]
 80029e2:	605a      	str	r2, [r3, #4]
 80029e4:	609a      	str	r2, [r3, #8]
 80029e6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80029e8:	463b      	mov	r3, r7
 80029ea:	2200      	movs	r2, #0
 80029ec:	601a      	str	r2, [r3, #0]
 80029ee:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80029f0:	4b1e      	ldr	r3, [pc, #120]	; (8002a6c <MX_TIM2_Init+0x98>)
 80029f2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80029f6:	601a      	str	r2, [r3, #0]
//  htim2.Init.Prescaler = 7000;
  htim2.Init.Prescaler = 700;
 80029f8:	4b1c      	ldr	r3, [pc, #112]	; (8002a6c <MX_TIM2_Init+0x98>)
 80029fa:	f44f 722f 	mov.w	r2, #700	; 0x2bc
 80029fe:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002a00:	4b1a      	ldr	r3, [pc, #104]	; (8002a6c <MX_TIM2_Init+0x98>)
 8002a02:	2200      	movs	r2, #0
 8002a04:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000;
 8002a06:	4b19      	ldr	r3, [pc, #100]	; (8002a6c <MX_TIM2_Init+0x98>)
 8002a08:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002a0c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002a0e:	4b17      	ldr	r3, [pc, #92]	; (8002a6c <MX_TIM2_Init+0x98>)
 8002a10:	2200      	movs	r2, #0
 8002a12:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002a14:	4b15      	ldr	r3, [pc, #84]	; (8002a6c <MX_TIM2_Init+0x98>)
 8002a16:	2200      	movs	r2, #0
 8002a18:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002a1a:	4814      	ldr	r0, [pc, #80]	; (8002a6c <MX_TIM2_Init+0x98>)
 8002a1c:	f7fe fe0a 	bl	8001634 <HAL_TIM_Base_Init>
 8002a20:	4603      	mov	r3, r0
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d001      	beq.n	8002a2a <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8002a26:	f000 f96d 	bl	8002d04 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002a2a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002a2e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002a30:	f107 0308 	add.w	r3, r7, #8
 8002a34:	4619      	mov	r1, r3
 8002a36:	480d      	ldr	r0, [pc, #52]	; (8002a6c <MX_TIM2_Init+0x98>)
 8002a38:	f7fe fff3 	bl	8001a22 <HAL_TIM_ConfigClockSource>
 8002a3c:	4603      	mov	r3, r0
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d001      	beq.n	8002a46 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8002a42:	f000 f95f 	bl	8002d04 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002a46:	2300      	movs	r3, #0
 8002a48:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002a4a:	2300      	movs	r3, #0
 8002a4c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002a4e:	463b      	mov	r3, r7
 8002a50:	4619      	mov	r1, r3
 8002a52:	4806      	ldr	r0, [pc, #24]	; (8002a6c <MX_TIM2_Init+0x98>)
 8002a54:	f7ff fa04 	bl	8001e60 <HAL_TIMEx_MasterConfigSynchronization>
 8002a58:	4603      	mov	r3, r0
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d001      	beq.n	8002a62 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8002a5e:	f000 f951 	bl	8002d04 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002a62:	bf00      	nop
 8002a64:	3718      	adds	r7, #24
 8002a66:	46bd      	mov	sp, r7
 8002a68:	bd80      	pop	{r7, pc}
 8002a6a:	bf00      	nop
 8002a6c:	200002d4 	.word	0x200002d4

08002a70 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002a70:	b580      	push	{r7, lr}
 8002a72:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002a74:	4b11      	ldr	r3, [pc, #68]	; (8002abc <MX_USART2_UART_Init+0x4c>)
 8002a76:	4a12      	ldr	r2, [pc, #72]	; (8002ac0 <MX_USART2_UART_Init+0x50>)
 8002a78:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002a7a:	4b10      	ldr	r3, [pc, #64]	; (8002abc <MX_USART2_UART_Init+0x4c>)
 8002a7c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002a80:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002a82:	4b0e      	ldr	r3, [pc, #56]	; (8002abc <MX_USART2_UART_Init+0x4c>)
 8002a84:	2200      	movs	r2, #0
 8002a86:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002a88:	4b0c      	ldr	r3, [pc, #48]	; (8002abc <MX_USART2_UART_Init+0x4c>)
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002a8e:	4b0b      	ldr	r3, [pc, #44]	; (8002abc <MX_USART2_UART_Init+0x4c>)
 8002a90:	2200      	movs	r2, #0
 8002a92:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002a94:	4b09      	ldr	r3, [pc, #36]	; (8002abc <MX_USART2_UART_Init+0x4c>)
 8002a96:	220c      	movs	r2, #12
 8002a98:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002a9a:	4b08      	ldr	r3, [pc, #32]	; (8002abc <MX_USART2_UART_Init+0x4c>)
 8002a9c:	2200      	movs	r2, #0
 8002a9e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002aa0:	4b06      	ldr	r3, [pc, #24]	; (8002abc <MX_USART2_UART_Init+0x4c>)
 8002aa2:	2200      	movs	r2, #0
 8002aa4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002aa6:	4805      	ldr	r0, [pc, #20]	; (8002abc <MX_USART2_UART_Init+0x4c>)
 8002aa8:	f7ff fa6a 	bl	8001f80 <HAL_UART_Init>
 8002aac:	4603      	mov	r3, r0
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d001      	beq.n	8002ab6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002ab2:	f000 f927 	bl	8002d04 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002ab6:	bf00      	nop
 8002ab8:	bd80      	pop	{r7, pc}
 8002aba:	bf00      	nop
 8002abc:	2000031c 	.word	0x2000031c
 8002ac0:	40004400 	.word	0x40004400

08002ac4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	b08a      	sub	sp, #40	; 0x28
 8002ac8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002aca:	f107 0314 	add.w	r3, r7, #20
 8002ace:	2200      	movs	r2, #0
 8002ad0:	601a      	str	r2, [r3, #0]
 8002ad2:	605a      	str	r2, [r3, #4]
 8002ad4:	609a      	str	r2, [r3, #8]
 8002ad6:	60da      	str	r2, [r3, #12]
 8002ad8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002ada:	2300      	movs	r3, #0
 8002adc:	613b      	str	r3, [r7, #16]
 8002ade:	4a59      	ldr	r2, [pc, #356]	; (8002c44 <MX_GPIO_Init+0x180>)
 8002ae0:	4b58      	ldr	r3, [pc, #352]	; (8002c44 <MX_GPIO_Init+0x180>)
 8002ae2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ae4:	f043 0304 	orr.w	r3, r3, #4
 8002ae8:	6313      	str	r3, [r2, #48]	; 0x30
 8002aea:	4b56      	ldr	r3, [pc, #344]	; (8002c44 <MX_GPIO_Init+0x180>)
 8002aec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aee:	f003 0304 	and.w	r3, r3, #4
 8002af2:	613b      	str	r3, [r7, #16]
 8002af4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002af6:	2300      	movs	r3, #0
 8002af8:	60fb      	str	r3, [r7, #12]
 8002afa:	4a52      	ldr	r2, [pc, #328]	; (8002c44 <MX_GPIO_Init+0x180>)
 8002afc:	4b51      	ldr	r3, [pc, #324]	; (8002c44 <MX_GPIO_Init+0x180>)
 8002afe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b00:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002b04:	6313      	str	r3, [r2, #48]	; 0x30
 8002b06:	4b4f      	ldr	r3, [pc, #316]	; (8002c44 <MX_GPIO_Init+0x180>)
 8002b08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b0e:	60fb      	str	r3, [r7, #12]
 8002b10:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b12:	2300      	movs	r3, #0
 8002b14:	60bb      	str	r3, [r7, #8]
 8002b16:	4a4b      	ldr	r2, [pc, #300]	; (8002c44 <MX_GPIO_Init+0x180>)
 8002b18:	4b4a      	ldr	r3, [pc, #296]	; (8002c44 <MX_GPIO_Init+0x180>)
 8002b1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b1c:	f043 0301 	orr.w	r3, r3, #1
 8002b20:	6313      	str	r3, [r2, #48]	; 0x30
 8002b22:	4b48      	ldr	r3, [pc, #288]	; (8002c44 <MX_GPIO_Init+0x180>)
 8002b24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b26:	f003 0301 	and.w	r3, r3, #1
 8002b2a:	60bb      	str	r3, [r7, #8]
 8002b2c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b2e:	2300      	movs	r3, #0
 8002b30:	607b      	str	r3, [r7, #4]
 8002b32:	4a44      	ldr	r2, [pc, #272]	; (8002c44 <MX_GPIO_Init+0x180>)
 8002b34:	4b43      	ldr	r3, [pc, #268]	; (8002c44 <MX_GPIO_Init+0x180>)
 8002b36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b38:	f043 0302 	orr.w	r3, r3, #2
 8002b3c:	6313      	str	r3, [r2, #48]	; 0x30
 8002b3e:	4b41      	ldr	r3, [pc, #260]	; (8002c44 <MX_GPIO_Init+0x180>)
 8002b40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b42:	f003 0302 	and.w	r3, r3, #2
 8002b46:	607b      	str	r3, [r7, #4]
 8002b48:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002b4a:	2300      	movs	r3, #0
 8002b4c:	603b      	str	r3, [r7, #0]
 8002b4e:	4a3d      	ldr	r2, [pc, #244]	; (8002c44 <MX_GPIO_Init+0x180>)
 8002b50:	4b3c      	ldr	r3, [pc, #240]	; (8002c44 <MX_GPIO_Init+0x180>)
 8002b52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b54:	f043 0308 	orr.w	r3, r3, #8
 8002b58:	6313      	str	r3, [r2, #48]	; 0x30
 8002b5a:	4b3a      	ldr	r3, [pc, #232]	; (8002c44 <MX_GPIO_Init+0x180>)
 8002b5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b5e:	f003 0308 	and.w	r3, r3, #8
 8002b62:	603b      	str	r3, [r7, #0]
 8002b64:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TS_CS_GPIO_Port, TS_CS_Pin, GPIO_PIN_RESET);
 8002b66:	2200      	movs	r2, #0
 8002b68:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002b6c:	4836      	ldr	r0, [pc, #216]	; (8002c48 <MX_GPIO_Init+0x184>)
 8002b6e:	f7fe f823 	bl	8000bb8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LCD_CS_Pin|LCD_RESET_Pin|LCD_DC_Pin|LD4_Pin
 8002b72:	2200      	movs	r2, #0
 8002b74:	f44f 4177 	mov.w	r1, #63232	; 0xf700
 8002b78:	4834      	ldr	r0, [pc, #208]	; (8002c4c <MX_GPIO_Init+0x188>)
 8002b7a:	f7fe f81d 	bl	8000bb8 <HAL_GPIO_WritePin>
                          |LD3_Pin|LD5_Pin|LD6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OPTO_PWM_GPIO_Port, OPTO_PWM_Pin, GPIO_PIN_RESET);
 8002b7e:	2200      	movs	r2, #0
 8002b80:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002b84:	4832      	ldr	r0, [pc, #200]	; (8002c50 <MX_GPIO_Init+0x18c>)
 8002b86:	f7fe f817 	bl	8000bb8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002b8a:	2301      	movs	r3, #1
 8002b8c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002b8e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002b92:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002b94:	2302      	movs	r3, #2
 8002b96:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002b98:	f107 0314 	add.w	r3, r7, #20
 8002b9c:	4619      	mov	r1, r3
 8002b9e:	482c      	ldr	r0, [pc, #176]	; (8002c50 <MX_GPIO_Init+0x18c>)
 8002ba0:	f7fd fe70 	bl	8000884 <HAL_GPIO_Init>

  /*Configure GPIO pin : TS_CS_Pin */
  GPIO_InitStruct.Pin = TS_CS_Pin;
 8002ba4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002ba8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002baa:	2301      	movs	r3, #1
 8002bac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bae:	2300      	movs	r3, #0
 8002bb0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bb2:	2300      	movs	r3, #0
 8002bb4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(TS_CS_GPIO_Port, &GPIO_InitStruct);
 8002bb6:	f107 0314 	add.w	r3, r7, #20
 8002bba:	4619      	mov	r1, r3
 8002bbc:	4822      	ldr	r0, [pc, #136]	; (8002c48 <MX_GPIO_Init+0x184>)
 8002bbe:	f7fd fe61 	bl	8000884 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_CS_Pin LCD_RESET_Pin LCD_DC_Pin LD4_Pin
                           LD3_Pin LD5_Pin LD6_Pin */
  GPIO_InitStruct.Pin = LCD_CS_Pin|LCD_RESET_Pin|LCD_DC_Pin|LD4_Pin
 8002bc2:	f44f 4377 	mov.w	r3, #63232	; 0xf700
 8002bc6:	617b      	str	r3, [r7, #20]
                          |LD3_Pin|LD5_Pin|LD6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002bc8:	2301      	movs	r3, #1
 8002bca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bcc:	2300      	movs	r3, #0
 8002bce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bd0:	2300      	movs	r3, #0
 8002bd2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002bd4:	f107 0314 	add.w	r3, r7, #20
 8002bd8:	4619      	mov	r1, r3
 8002bda:	481c      	ldr	r0, [pc, #112]	; (8002c4c <MX_GPIO_Init+0x188>)
 8002bdc:	f7fd fe52 	bl	8000884 <HAL_GPIO_Init>

  /*Configure GPIO pin : OPTO_PWM_Pin */
  GPIO_InitStruct.Pin = OPTO_PWM_Pin;
 8002be0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002be4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002be6:	2301      	movs	r3, #1
 8002be8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bea:	2300      	movs	r3, #0
 8002bec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bee:	2300      	movs	r3, #0
 8002bf0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(OPTO_PWM_GPIO_Port, &GPIO_InitStruct);
 8002bf2:	f107 0314 	add.w	r3, r7, #20
 8002bf6:	4619      	mov	r1, r3
 8002bf8:	4815      	ldr	r0, [pc, #84]	; (8002c50 <MX_GPIO_Init+0x18c>)
 8002bfa:	f7fd fe43 	bl	8000884 <HAL_GPIO_Init>

  /*Configure GPIO pin : ZCD_INT_Pin */
  GPIO_InitStruct.Pin = ZCD_INT_Pin;
 8002bfe:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002c02:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002c04:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002c08:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002c0a:	2302      	movs	r3, #2
 8002c0c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ZCD_INT_GPIO_Port, &GPIO_InitStruct);
 8002c0e:	f107 0314 	add.w	r3, r7, #20
 8002c12:	4619      	mov	r1, r3
 8002c14:	480f      	ldr	r0, [pc, #60]	; (8002c54 <MX_GPIO_Init+0x190>)
 8002c16:	f7fd fe35 	bl	8000884 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	2100      	movs	r1, #0
 8002c1e:	2006      	movs	r0, #6
 8002c20:	f7fd fdf9 	bl	8000816 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8002c24:	2006      	movs	r0, #6
 8002c26:	f7fd fe12 	bl	800084e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8002c2a:	2200      	movs	r2, #0
 8002c2c:	2100      	movs	r1, #0
 8002c2e:	2028      	movs	r0, #40	; 0x28
 8002c30:	f7fd fdf1 	bl	8000816 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002c34:	2028      	movs	r0, #40	; 0x28
 8002c36:	f7fd fe0a 	bl	800084e <HAL_NVIC_EnableIRQ>

}
 8002c3a:	bf00      	nop
 8002c3c:	3728      	adds	r7, #40	; 0x28
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	bd80      	pop	{r7, pc}
 8002c42:	bf00      	nop
 8002c44:	40023800 	.word	0x40023800
 8002c48:	40020400 	.word	0x40020400
 8002c4c:	40020c00 	.word	0x40020c00
 8002c50:	40020000 	.word	0x40020000
 8002c54:	40020800 	.word	0x40020800

08002c58 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	b082      	sub	sp, #8
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	4603      	mov	r3, r0
 8002c60:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == B1_Pin){
 8002c62:	88fb      	ldrh	r3, [r7, #6]
 8002c64:	2b01      	cmp	r3, #1
 8002c66:	d103      	bne.n	8002c70 <HAL_GPIO_EXTI_Callback+0x18>
		f_ChangePWM = true;
 8002c68:	4b09      	ldr	r3, [pc, #36]	; (8002c90 <HAL_GPIO_EXTI_Callback+0x38>)
 8002c6a:	2201      	movs	r2, #1
 8002c6c:	701a      	strb	r2, [r3, #0]
	}
	else if(GPIO_Pin == ZCD_INT_Pin){
		f_StartPWM = true;
		HAL_GPIO_TogglePin(GPIOD, LD6_Pin);
	}
}
 8002c6e:	e00b      	b.n	8002c88 <HAL_GPIO_EXTI_Callback+0x30>
	else if(GPIO_Pin == ZCD_INT_Pin){
 8002c70:	88fb      	ldrh	r3, [r7, #6]
 8002c72:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002c76:	d107      	bne.n	8002c88 <HAL_GPIO_EXTI_Callback+0x30>
		f_StartPWM = true;
 8002c78:	4b06      	ldr	r3, [pc, #24]	; (8002c94 <HAL_GPIO_EXTI_Callback+0x3c>)
 8002c7a:	2201      	movs	r2, #1
 8002c7c:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_TogglePin(GPIOD, LD6_Pin);
 8002c7e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002c82:	4805      	ldr	r0, [pc, #20]	; (8002c98 <HAL_GPIO_EXTI_Callback+0x40>)
 8002c84:	f7fd ffb1 	bl	8000bea <HAL_GPIO_TogglePin>
}
 8002c88:	bf00      	nop
 8002c8a:	3708      	adds	r7, #8
 8002c8c:	46bd      	mov	sp, r7
 8002c8e:	bd80      	pop	{r7, pc}
 8002c90:	200001f9 	.word	0x200001f9
 8002c94:	200001f8 	.word	0x200001f8
 8002c98:	40020c00 	.word	0x40020c00

08002c9c <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim){
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	b082      	sub	sp, #8
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	6078      	str	r0, [r7, #4]
	switch(wave_state){
 8002ca4:	4b14      	ldr	r3, [pc, #80]	; (8002cf8 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8002ca6:	781b      	ldrb	r3, [r3, #0]
 8002ca8:	b2db      	uxtb	r3, r3
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d002      	beq.n	8002cb4 <HAL_TIM_PeriodElapsedCallback+0x18>
 8002cae:	2b01      	cmp	r3, #1
 8002cb0:	d011      	beq.n	8002cd6 <HAL_TIM_PeriodElapsedCallback+0x3a>
//		htim2.Init.Period = TRIG_PULSE_WIDTH;
		//No delay here. Change the state and wait for next ZCD to generate new delay
//		printf("I\r\n");
		break;
	}
}
 8002cb2:	e01d      	b.n	8002cf0 <HAL_TIM_PeriodElapsedCallback+0x54>
		wave_state = OnState;														//Next state should be On state
 8002cb4:	4b10      	ldr	r3, [pc, #64]	; (8002cf8 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8002cb6:	2201      	movs	r2, #1
 8002cb8:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(OPTO_PWM_GPIO_Port, OPTO_PWM_Pin, GPIO_PIN_SET);			//Set Opto output to low
 8002cba:	2201      	movs	r2, #1
 8002cbc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002cc0:	480e      	ldr	r0, [pc, #56]	; (8002cfc <HAL_TIM_PeriodElapsedCallback+0x60>)
 8002cc2:	f7fd ff79 	bl	8000bb8 <HAL_GPIO_WritePin>
		htim2.Instance->ARR = TRIG_PULSE_WIDTH;
 8002cc6:	4b0e      	ldr	r3, [pc, #56]	; (8002d00 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	2203      	movs	r2, #3
 8002ccc:	62da      	str	r2, [r3, #44]	; 0x2c
		htim2.Init.Period = TRIG_PULSE_WIDTH;
 8002cce:	4b0c      	ldr	r3, [pc, #48]	; (8002d00 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8002cd0:	2203      	movs	r2, #3
 8002cd2:	60da      	str	r2, [r3, #12]
		break;
 8002cd4:	e00c      	b.n	8002cf0 <HAL_TIM_PeriodElapsedCallback+0x54>
		wave_state = OffState;														//Next state should be Off state
 8002cd6:	4b08      	ldr	r3, [pc, #32]	; (8002cf8 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8002cd8:	2200      	movs	r2, #0
 8002cda:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(OPTO_PWM_GPIO_Port, OPTO_PWM_Pin, GPIO_PIN_RESET);		//Set Opto output to high
 8002cdc:	2200      	movs	r2, #0
 8002cde:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002ce2:	4806      	ldr	r0, [pc, #24]	; (8002cfc <HAL_TIM_PeriodElapsedCallback+0x60>)
 8002ce4:	f7fd ff68 	bl	8000bb8 <HAL_GPIO_WritePin>
		HAL_TIM_Base_Stop_IT(&htim2);
 8002ce8:	4805      	ldr	r0, [pc, #20]	; (8002d00 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8002cea:	f7fe fd63 	bl	80017b4 <HAL_TIM_Base_Stop_IT>
		break;
 8002cee:	bf00      	nop
}
 8002cf0:	bf00      	nop
 8002cf2:	3708      	adds	r7, #8
 8002cf4:	46bd      	mov	sp, r7
 8002cf6:	bd80      	pop	{r7, pc}
 8002cf8:	20000270 	.word	0x20000270
 8002cfc:	40020000 	.word	0x40020000
 8002d00:	200002d4 	.word	0x200002d4

08002d04 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002d04:	b480      	push	{r7}
 8002d06:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8002d08:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002d0a:	e7fe      	b.n	8002d0a <Error_Handler+0x6>

08002d0c <RetargetInit>:
#define STDOUT_FILENO 1
#define STDERR_FILENO 2

UART_HandleTypeDef *gHuart;

void RetargetInit(UART_HandleTypeDef *huart) {
 8002d0c:	b580      	push	{r7, lr}
 8002d0e:	b082      	sub	sp, #8
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	6078      	str	r0, [r7, #4]
  gHuart = huart;
 8002d14:	4a07      	ldr	r2, [pc, #28]	; (8002d34 <RetargetInit+0x28>)
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	6013      	str	r3, [r2, #0]

  /* Disable I/O buffering for STDOUT stream, so that
   * chars are sent out as soon as they are printed. */
  setvbuf(stdout, NULL, _IONBF, 0);
 8002d1a:	4b07      	ldr	r3, [pc, #28]	; (8002d38 <RetargetInit+0x2c>)
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	6898      	ldr	r0, [r3, #8]
 8002d20:	2300      	movs	r3, #0
 8002d22:	2202      	movs	r2, #2
 8002d24:	2100      	movs	r1, #0
 8002d26:	f000 fb3d 	bl	80033a4 <setvbuf>
}
 8002d2a:	bf00      	nop
 8002d2c:	3708      	adds	r7, #8
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	bd80      	pop	{r7, pc}
 8002d32:	bf00      	nop
 8002d34:	20000360 	.word	0x20000360
 8002d38:	2000000c 	.word	0x2000000c

08002d3c <_isatty>:

int _isatty(int fd) {
 8002d3c:	b580      	push	{r7, lr}
 8002d3e:	b082      	sub	sp, #8
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	db04      	blt.n	8002d54 <_isatty+0x18>
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	2b02      	cmp	r3, #2
 8002d4e:	dc01      	bgt.n	8002d54 <_isatty+0x18>
    return 1;
 8002d50:	2301      	movs	r3, #1
 8002d52:	e005      	b.n	8002d60 <_isatty+0x24>

  errno = EBADF;
 8002d54:	f000 fa54 	bl	8003200 <__errno>
 8002d58:	4602      	mov	r2, r0
 8002d5a:	2309      	movs	r3, #9
 8002d5c:	6013      	str	r3, [r2, #0]
  return 0;
 8002d5e:	2300      	movs	r3, #0
}
 8002d60:	4618      	mov	r0, r3
 8002d62:	3708      	adds	r7, #8
 8002d64:	46bd      	mov	sp, r7
 8002d66:	bd80      	pop	{r7, pc}

08002d68 <_write>:

int _write(int fd, char* ptr, int len) {
 8002d68:	b580      	push	{r7, lr}
 8002d6a:	b086      	sub	sp, #24
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	60f8      	str	r0, [r7, #12]
 8002d70:	60b9      	str	r1, [r7, #8]
 8002d72:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDOUT_FILENO || fd == STDERR_FILENO) {
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	2b01      	cmp	r3, #1
 8002d78:	d002      	beq.n	8002d80 <_write+0x18>
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	2b02      	cmp	r3, #2
 8002d7e:	d111      	bne.n	8002da4 <_write+0x3c>
    hstatus = HAL_UART_Transmit(gHuart, (uint8_t *) ptr, len, HAL_MAX_DELAY);
 8002d80:	4b0e      	ldr	r3, [pc, #56]	; (8002dbc <_write+0x54>)
 8002d82:	6818      	ldr	r0, [r3, #0]
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	b29a      	uxth	r2, r3
 8002d88:	f04f 33ff 	mov.w	r3, #4294967295
 8002d8c:	68b9      	ldr	r1, [r7, #8]
 8002d8e:	f7ff f944 	bl	800201a <HAL_UART_Transmit>
 8002d92:	4603      	mov	r3, r0
 8002d94:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 8002d96:	7dfb      	ldrb	r3, [r7, #23]
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d101      	bne.n	8002da0 <_write+0x38>
      return len;
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	e008      	b.n	8002db2 <_write+0x4a>
    else
      return EIO;
 8002da0:	2305      	movs	r3, #5
 8002da2:	e006      	b.n	8002db2 <_write+0x4a>
  }
  errno = EBADF;
 8002da4:	f000 fa2c 	bl	8003200 <__errno>
 8002da8:	4602      	mov	r2, r0
 8002daa:	2309      	movs	r3, #9
 8002dac:	6013      	str	r3, [r2, #0]
  return -1;
 8002dae:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002db2:	4618      	mov	r0, r3
 8002db4:	3718      	adds	r7, #24
 8002db6:	46bd      	mov	sp, r7
 8002db8:	bd80      	pop	{r7, pc}
 8002dba:	bf00      	nop
 8002dbc:	20000360 	.word	0x20000360

08002dc0 <_close>:

int _close(int fd) {
 8002dc0:	b580      	push	{r7, lr}
 8002dc2:	b082      	sub	sp, #8
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	db04      	blt.n	8002dd8 <_close+0x18>
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	2b02      	cmp	r3, #2
 8002dd2:	dc01      	bgt.n	8002dd8 <_close+0x18>
    return 0;
 8002dd4:	2300      	movs	r3, #0
 8002dd6:	e006      	b.n	8002de6 <_close+0x26>

  errno = EBADF;
 8002dd8:	f000 fa12 	bl	8003200 <__errno>
 8002ddc:	4602      	mov	r2, r0
 8002dde:	2309      	movs	r3, #9
 8002de0:	6013      	str	r3, [r2, #0]
  return -1;
 8002de2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002de6:	4618      	mov	r0, r3
 8002de8:	3708      	adds	r7, #8
 8002dea:	46bd      	mov	sp, r7
 8002dec:	bd80      	pop	{r7, pc}

08002dee <_lseek>:

int _lseek(int fd, int ptr, int dir) {
 8002dee:	b580      	push	{r7, lr}
 8002df0:	b084      	sub	sp, #16
 8002df2:	af00      	add	r7, sp, #0
 8002df4:	60f8      	str	r0, [r7, #12]
 8002df6:	60b9      	str	r1, [r7, #8]
 8002df8:	607a      	str	r2, [r7, #4]
  (void) fd;
  (void) ptr;
  (void) dir;

  errno = EBADF;
 8002dfa:	f000 fa01 	bl	8003200 <__errno>
 8002dfe:	4602      	mov	r2, r0
 8002e00:	2309      	movs	r3, #9
 8002e02:	6013      	str	r3, [r2, #0]
  return -1;
 8002e04:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002e08:	4618      	mov	r0, r3
 8002e0a:	3710      	adds	r7, #16
 8002e0c:	46bd      	mov	sp, r7
 8002e0e:	bd80      	pop	{r7, pc}

08002e10 <_read>:

int _read(int fd, char* ptr, int len) {
 8002e10:	b580      	push	{r7, lr}
 8002e12:	b086      	sub	sp, #24
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	60f8      	str	r0, [r7, #12]
 8002e18:	60b9      	str	r1, [r7, #8]
 8002e1a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDIN_FILENO) {
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d110      	bne.n	8002e44 <_read+0x34>
    hstatus = HAL_UART_Receive(gHuart, (uint8_t *) ptr, 1, HAL_MAX_DELAY);
 8002e22:	4b0e      	ldr	r3, [pc, #56]	; (8002e5c <_read+0x4c>)
 8002e24:	6818      	ldr	r0, [r3, #0]
 8002e26:	f04f 33ff 	mov.w	r3, #4294967295
 8002e2a:	2201      	movs	r2, #1
 8002e2c:	68b9      	ldr	r1, [r7, #8]
 8002e2e:	f7ff f985 	bl	800213c <HAL_UART_Receive>
 8002e32:	4603      	mov	r3, r0
 8002e34:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK){
 8002e36:	7dfb      	ldrb	r3, [r7, #23]
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d101      	bne.n	8002e40 <_read+0x30>
    	return 1;
 8002e3c:	2301      	movs	r3, #1
 8002e3e:	e008      	b.n	8002e52 <_read+0x42>
    }
    else
      return EIO;
 8002e40:	2305      	movs	r3, #5
 8002e42:	e006      	b.n	8002e52 <_read+0x42>
  }
  errno = EBADF;
 8002e44:	f000 f9dc 	bl	8003200 <__errno>
 8002e48:	4602      	mov	r2, r0
 8002e4a:	2309      	movs	r3, #9
 8002e4c:	6013      	str	r3, [r2, #0]
  return -1;
 8002e4e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002e52:	4618      	mov	r0, r3
 8002e54:	3718      	adds	r7, #24
 8002e56:	46bd      	mov	sp, r7
 8002e58:	bd80      	pop	{r7, pc}
 8002e5a:	bf00      	nop
 8002e5c:	20000360 	.word	0x20000360

08002e60 <_fstat>:

int _fstat(int fd, struct stat* st) {
 8002e60:	b580      	push	{r7, lr}
 8002e62:	b082      	sub	sp, #8
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	6078      	str	r0, [r7, #4]
 8002e68:	6039      	str	r1, [r7, #0]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO) {
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	db08      	blt.n	8002e82 <_fstat+0x22>
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	2b02      	cmp	r3, #2
 8002e74:	dc05      	bgt.n	8002e82 <_fstat+0x22>
    st->st_mode = S_IFCHR;
 8002e76:	683b      	ldr	r3, [r7, #0]
 8002e78:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002e7c:	605a      	str	r2, [r3, #4]
    return 0;
 8002e7e:	2300      	movs	r3, #0
 8002e80:	e005      	b.n	8002e8e <_fstat+0x2e>
  }

  errno = EBADF;
 8002e82:	f000 f9bd 	bl	8003200 <__errno>
 8002e86:	4602      	mov	r2, r0
 8002e88:	2309      	movs	r3, #9
 8002e8a:	6013      	str	r3, [r2, #0]
  return 0;
 8002e8c:	2300      	movs	r3, #0
}
 8002e8e:	4618      	mov	r0, r3
 8002e90:	3708      	adds	r7, #8
 8002e92:	46bd      	mov	sp, r7
 8002e94:	bd80      	pop	{r7, pc}
	...

08002e98 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002e98:	b580      	push	{r7, lr}
 8002e9a:	b082      	sub	sp, #8
 8002e9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e9e:	2300      	movs	r3, #0
 8002ea0:	607b      	str	r3, [r7, #4]
 8002ea2:	4a10      	ldr	r2, [pc, #64]	; (8002ee4 <HAL_MspInit+0x4c>)
 8002ea4:	4b0f      	ldr	r3, [pc, #60]	; (8002ee4 <HAL_MspInit+0x4c>)
 8002ea6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ea8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002eac:	6453      	str	r3, [r2, #68]	; 0x44
 8002eae:	4b0d      	ldr	r3, [pc, #52]	; (8002ee4 <HAL_MspInit+0x4c>)
 8002eb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002eb2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002eb6:	607b      	str	r3, [r7, #4]
 8002eb8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002eba:	2300      	movs	r3, #0
 8002ebc:	603b      	str	r3, [r7, #0]
 8002ebe:	4a09      	ldr	r2, [pc, #36]	; (8002ee4 <HAL_MspInit+0x4c>)
 8002ec0:	4b08      	ldr	r3, [pc, #32]	; (8002ee4 <HAL_MspInit+0x4c>)
 8002ec2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ec4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ec8:	6413      	str	r3, [r2, #64]	; 0x40
 8002eca:	4b06      	ldr	r3, [pc, #24]	; (8002ee4 <HAL_MspInit+0x4c>)
 8002ecc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ece:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ed2:	603b      	str	r3, [r7, #0]
 8002ed4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002ed6:	2007      	movs	r0, #7
 8002ed8:	f7fd fc92 	bl	8000800 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002edc:	bf00      	nop
 8002ede:	3708      	adds	r7, #8
 8002ee0:	46bd      	mov	sp, r7
 8002ee2:	bd80      	pop	{r7, pc}
 8002ee4:	40023800 	.word	0x40023800

08002ee8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	b08c      	sub	sp, #48	; 0x30
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ef0:	f107 031c 	add.w	r3, r7, #28
 8002ef4:	2200      	movs	r2, #0
 8002ef6:	601a      	str	r2, [r3, #0]
 8002ef8:	605a      	str	r2, [r3, #4]
 8002efa:	609a      	str	r2, [r3, #8]
 8002efc:	60da      	str	r2, [r3, #12]
 8002efe:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	4a41      	ldr	r2, [pc, #260]	; (800300c <HAL_SPI_MspInit+0x124>)
 8002f06:	4293      	cmp	r3, r2
 8002f08:	d12c      	bne.n	8002f64 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002f0a:	2300      	movs	r3, #0
 8002f0c:	61bb      	str	r3, [r7, #24]
 8002f0e:	4a40      	ldr	r2, [pc, #256]	; (8003010 <HAL_SPI_MspInit+0x128>)
 8002f10:	4b3f      	ldr	r3, [pc, #252]	; (8003010 <HAL_SPI_MspInit+0x128>)
 8002f12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f14:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002f18:	6453      	str	r3, [r2, #68]	; 0x44
 8002f1a:	4b3d      	ldr	r3, [pc, #244]	; (8003010 <HAL_SPI_MspInit+0x128>)
 8002f1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f1e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002f22:	61bb      	str	r3, [r7, #24]
 8002f24:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f26:	2300      	movs	r3, #0
 8002f28:	617b      	str	r3, [r7, #20]
 8002f2a:	4a39      	ldr	r2, [pc, #228]	; (8003010 <HAL_SPI_MspInit+0x128>)
 8002f2c:	4b38      	ldr	r3, [pc, #224]	; (8003010 <HAL_SPI_MspInit+0x128>)
 8002f2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f30:	f043 0301 	orr.w	r3, r3, #1
 8002f34:	6313      	str	r3, [r2, #48]	; 0x30
 8002f36:	4b36      	ldr	r3, [pc, #216]	; (8003010 <HAL_SPI_MspInit+0x128>)
 8002f38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f3a:	f003 0301 	and.w	r3, r3, #1
 8002f3e:	617b      	str	r3, [r7, #20]
 8002f40:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8002f42:	23e0      	movs	r3, #224	; 0xe0
 8002f44:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f46:	2302      	movs	r3, #2
 8002f48:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f4a:	2300      	movs	r3, #0
 8002f4c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f4e:	2303      	movs	r3, #3
 8002f50:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002f52:	2305      	movs	r3, #5
 8002f54:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f56:	f107 031c 	add.w	r3, r7, #28
 8002f5a:	4619      	mov	r1, r3
 8002f5c:	482d      	ldr	r0, [pc, #180]	; (8003014 <HAL_SPI_MspInit+0x12c>)
 8002f5e:	f7fd fc91 	bl	8000884 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8002f62:	e04f      	b.n	8003004 <HAL_SPI_MspInit+0x11c>
  else if(hspi->Instance==SPI2)
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	4a2b      	ldr	r2, [pc, #172]	; (8003018 <HAL_SPI_MspInit+0x130>)
 8002f6a:	4293      	cmp	r3, r2
 8002f6c:	d14a      	bne.n	8003004 <HAL_SPI_MspInit+0x11c>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002f6e:	2300      	movs	r3, #0
 8002f70:	613b      	str	r3, [r7, #16]
 8002f72:	4a27      	ldr	r2, [pc, #156]	; (8003010 <HAL_SPI_MspInit+0x128>)
 8002f74:	4b26      	ldr	r3, [pc, #152]	; (8003010 <HAL_SPI_MspInit+0x128>)
 8002f76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f78:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002f7c:	6413      	str	r3, [r2, #64]	; 0x40
 8002f7e:	4b24      	ldr	r3, [pc, #144]	; (8003010 <HAL_SPI_MspInit+0x128>)
 8002f80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f82:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f86:	613b      	str	r3, [r7, #16]
 8002f88:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002f8a:	2300      	movs	r3, #0
 8002f8c:	60fb      	str	r3, [r7, #12]
 8002f8e:	4a20      	ldr	r2, [pc, #128]	; (8003010 <HAL_SPI_MspInit+0x128>)
 8002f90:	4b1f      	ldr	r3, [pc, #124]	; (8003010 <HAL_SPI_MspInit+0x128>)
 8002f92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f94:	f043 0304 	orr.w	r3, r3, #4
 8002f98:	6313      	str	r3, [r2, #48]	; 0x30
 8002f9a:	4b1d      	ldr	r3, [pc, #116]	; (8003010 <HAL_SPI_MspInit+0x128>)
 8002f9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f9e:	f003 0304 	and.w	r3, r3, #4
 8002fa2:	60fb      	str	r3, [r7, #12]
 8002fa4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002fa6:	2300      	movs	r3, #0
 8002fa8:	60bb      	str	r3, [r7, #8]
 8002faa:	4a19      	ldr	r2, [pc, #100]	; (8003010 <HAL_SPI_MspInit+0x128>)
 8002fac:	4b18      	ldr	r3, [pc, #96]	; (8003010 <HAL_SPI_MspInit+0x128>)
 8002fae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fb0:	f043 0302 	orr.w	r3, r3, #2
 8002fb4:	6313      	str	r3, [r2, #48]	; 0x30
 8002fb6:	4b16      	ldr	r3, [pc, #88]	; (8003010 <HAL_SPI_MspInit+0x128>)
 8002fb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fba:	f003 0302 	and.w	r3, r3, #2
 8002fbe:	60bb      	str	r3, [r7, #8]
 8002fc0:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002fc2:	230c      	movs	r3, #12
 8002fc4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fc6:	2302      	movs	r3, #2
 8002fc8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fca:	2300      	movs	r3, #0
 8002fcc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002fce:	2303      	movs	r3, #3
 8002fd0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002fd2:	2305      	movs	r3, #5
 8002fd4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002fd6:	f107 031c 	add.w	r3, r7, #28
 8002fda:	4619      	mov	r1, r3
 8002fdc:	480f      	ldr	r0, [pc, #60]	; (800301c <HAL_SPI_MspInit+0x134>)
 8002fde:	f7fd fc51 	bl	8000884 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002fe2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002fe6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fe8:	2302      	movs	r3, #2
 8002fea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fec:	2300      	movs	r3, #0
 8002fee:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ff0:	2303      	movs	r3, #3
 8002ff2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002ff4:	2305      	movs	r3, #5
 8002ff6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ff8:	f107 031c 	add.w	r3, r7, #28
 8002ffc:	4619      	mov	r1, r3
 8002ffe:	4808      	ldr	r0, [pc, #32]	; (8003020 <HAL_SPI_MspInit+0x138>)
 8003000:	f7fd fc40 	bl	8000884 <HAL_GPIO_Init>
}
 8003004:	bf00      	nop
 8003006:	3730      	adds	r7, #48	; 0x30
 8003008:	46bd      	mov	sp, r7
 800300a:	bd80      	pop	{r7, pc}
 800300c:	40013000 	.word	0x40013000
 8003010:	40023800 	.word	0x40023800
 8003014:	40020000 	.word	0x40020000
 8003018:	40003800 	.word	0x40003800
 800301c:	40020800 	.word	0x40020800
 8003020:	40020400 	.word	0x40020400

08003024 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003024:	b580      	push	{r7, lr}
 8003026:	b084      	sub	sp, #16
 8003028:	af00      	add	r7, sp, #0
 800302a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003034:	d115      	bne.n	8003062 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003036:	2300      	movs	r3, #0
 8003038:	60fb      	str	r3, [r7, #12]
 800303a:	4a0c      	ldr	r2, [pc, #48]	; (800306c <HAL_TIM_Base_MspInit+0x48>)
 800303c:	4b0b      	ldr	r3, [pc, #44]	; (800306c <HAL_TIM_Base_MspInit+0x48>)
 800303e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003040:	f043 0301 	orr.w	r3, r3, #1
 8003044:	6413      	str	r3, [r2, #64]	; 0x40
 8003046:	4b09      	ldr	r3, [pc, #36]	; (800306c <HAL_TIM_Base_MspInit+0x48>)
 8003048:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800304a:	f003 0301 	and.w	r3, r3, #1
 800304e:	60fb      	str	r3, [r7, #12]
 8003050:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8003052:	2200      	movs	r2, #0
 8003054:	2100      	movs	r1, #0
 8003056:	201c      	movs	r0, #28
 8003058:	f7fd fbdd 	bl	8000816 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800305c:	201c      	movs	r0, #28
 800305e:	f7fd fbf6 	bl	800084e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8003062:	bf00      	nop
 8003064:	3710      	adds	r7, #16
 8003066:	46bd      	mov	sp, r7
 8003068:	bd80      	pop	{r7, pc}
 800306a:	bf00      	nop
 800306c:	40023800 	.word	0x40023800

08003070 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003070:	b580      	push	{r7, lr}
 8003072:	b08a      	sub	sp, #40	; 0x28
 8003074:	af00      	add	r7, sp, #0
 8003076:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003078:	f107 0314 	add.w	r3, r7, #20
 800307c:	2200      	movs	r2, #0
 800307e:	601a      	str	r2, [r3, #0]
 8003080:	605a      	str	r2, [r3, #4]
 8003082:	609a      	str	r2, [r3, #8]
 8003084:	60da      	str	r2, [r3, #12]
 8003086:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	4a19      	ldr	r2, [pc, #100]	; (80030f4 <HAL_UART_MspInit+0x84>)
 800308e:	4293      	cmp	r3, r2
 8003090:	d12b      	bne.n	80030ea <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003092:	2300      	movs	r3, #0
 8003094:	613b      	str	r3, [r7, #16]
 8003096:	4a18      	ldr	r2, [pc, #96]	; (80030f8 <HAL_UART_MspInit+0x88>)
 8003098:	4b17      	ldr	r3, [pc, #92]	; (80030f8 <HAL_UART_MspInit+0x88>)
 800309a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800309c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80030a0:	6413      	str	r3, [r2, #64]	; 0x40
 80030a2:	4b15      	ldr	r3, [pc, #84]	; (80030f8 <HAL_UART_MspInit+0x88>)
 80030a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030aa:	613b      	str	r3, [r7, #16]
 80030ac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80030ae:	2300      	movs	r3, #0
 80030b0:	60fb      	str	r3, [r7, #12]
 80030b2:	4a11      	ldr	r2, [pc, #68]	; (80030f8 <HAL_UART_MspInit+0x88>)
 80030b4:	4b10      	ldr	r3, [pc, #64]	; (80030f8 <HAL_UART_MspInit+0x88>)
 80030b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030b8:	f043 0301 	orr.w	r3, r3, #1
 80030bc:	6313      	str	r3, [r2, #48]	; 0x30
 80030be:	4b0e      	ldr	r3, [pc, #56]	; (80030f8 <HAL_UART_MspInit+0x88>)
 80030c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030c2:	f003 0301 	and.w	r3, r3, #1
 80030c6:	60fb      	str	r3, [r7, #12]
 80030c8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80030ca:	230c      	movs	r3, #12
 80030cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030ce:	2302      	movs	r3, #2
 80030d0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030d2:	2300      	movs	r3, #0
 80030d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80030d6:	2303      	movs	r3, #3
 80030d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80030da:	2307      	movs	r3, #7
 80030dc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80030de:	f107 0314 	add.w	r3, r7, #20
 80030e2:	4619      	mov	r1, r3
 80030e4:	4805      	ldr	r0, [pc, #20]	; (80030fc <HAL_UART_MspInit+0x8c>)
 80030e6:	f7fd fbcd 	bl	8000884 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80030ea:	bf00      	nop
 80030ec:	3728      	adds	r7, #40	; 0x28
 80030ee:	46bd      	mov	sp, r7
 80030f0:	bd80      	pop	{r7, pc}
 80030f2:	bf00      	nop
 80030f4:	40004400 	.word	0x40004400
 80030f8:	40023800 	.word	0x40023800
 80030fc:	40020000 	.word	0x40020000

08003100 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003100:	b480      	push	{r7}
 8003102:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003104:	e7fe      	b.n	8003104 <NMI_Handler+0x4>

08003106 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003106:	b480      	push	{r7}
 8003108:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800310a:	e7fe      	b.n	800310a <HardFault_Handler+0x4>

0800310c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800310c:	b480      	push	{r7}
 800310e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003110:	e7fe      	b.n	8003110 <MemManage_Handler+0x4>

08003112 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003112:	b480      	push	{r7}
 8003114:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003116:	e7fe      	b.n	8003116 <BusFault_Handler+0x4>

08003118 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003118:	b480      	push	{r7}
 800311a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800311c:	e7fe      	b.n	800311c <UsageFault_Handler+0x4>

0800311e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800311e:	b480      	push	{r7}
 8003120:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003122:	bf00      	nop
 8003124:	46bd      	mov	sp, r7
 8003126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800312a:	4770      	bx	lr

0800312c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800312c:	b480      	push	{r7}
 800312e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003130:	bf00      	nop
 8003132:	46bd      	mov	sp, r7
 8003134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003138:	4770      	bx	lr

0800313a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800313a:	b480      	push	{r7}
 800313c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800313e:	bf00      	nop
 8003140:	46bd      	mov	sp, r7
 8003142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003146:	4770      	bx	lr

08003148 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003148:	b580      	push	{r7, lr}
 800314a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800314c:	f7fd fa6a 	bl	8000624 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003150:	bf00      	nop
 8003152:	bd80      	pop	{r7, pc}

08003154 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8003154:	b580      	push	{r7, lr}
 8003156:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8003158:	2001      	movs	r0, #1
 800315a:	f7fd fd61 	bl	8000c20 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 800315e:	bf00      	nop
 8003160:	bd80      	pop	{r7, pc}
	...

08003164 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003164:	b580      	push	{r7, lr}
 8003166:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003168:	4802      	ldr	r0, [pc, #8]	; (8003174 <TIM2_IRQHandler+0x10>)
 800316a:	f7fe fb52 	bl	8001812 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800316e:	bf00      	nop
 8003170:	bd80      	pop	{r7, pc}
 8003172:	bf00      	nop
 8003174:	200002d4 	.word	0x200002d4

08003178 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8003178:	b580      	push	{r7, lr}
 800317a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ZCD_INT_Pin);
 800317c:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8003180:	f7fd fd4e 	bl	8000c20 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8003184:	bf00      	nop
 8003186:	bd80      	pop	{r7, pc}

08003188 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003188:	b480      	push	{r7}
 800318a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800318c:	4a06      	ldr	r2, [pc, #24]	; (80031a8 <SystemInit+0x20>)
 800318e:	4b06      	ldr	r3, [pc, #24]	; (80031a8 <SystemInit+0x20>)
 8003190:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003194:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003198:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800319c:	bf00      	nop
 800319e:	46bd      	mov	sp, r7
 80031a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a4:	4770      	bx	lr
 80031a6:	bf00      	nop
 80031a8:	e000ed00 	.word	0xe000ed00

080031ac <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80031ac:	f8df d034 	ldr.w	sp, [pc, #52]	; 80031e4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80031b0:	480d      	ldr	r0, [pc, #52]	; (80031e8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80031b2:	490e      	ldr	r1, [pc, #56]	; (80031ec <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80031b4:	4a0e      	ldr	r2, [pc, #56]	; (80031f0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80031b6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80031b8:	e002      	b.n	80031c0 <LoopCopyDataInit>

080031ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80031ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80031bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80031be:	3304      	adds	r3, #4

080031c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80031c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80031c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80031c4:	d3f9      	bcc.n	80031ba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80031c6:	4a0b      	ldr	r2, [pc, #44]	; (80031f4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80031c8:	4c0b      	ldr	r4, [pc, #44]	; (80031f8 <LoopFillZerobss+0x26>)
  movs r3, #0
 80031ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80031cc:	e001      	b.n	80031d2 <LoopFillZerobss>

080031ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80031ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80031d0:	3204      	adds	r2, #4

080031d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80031d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80031d4:	d3fb      	bcc.n	80031ce <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80031d6:	f7ff ffd7 	bl	8003188 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80031da:	f000 f817 	bl	800320c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80031de:	f7ff fa6d 	bl	80026bc <main>
  bx  lr    
 80031e2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80031e4:	2001c000 	.word	0x2001c000
  ldr r0, =_sdata
 80031e8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80031ec:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 80031f0:	08005170 	.word	0x08005170
  ldr r2, =_sbss
 80031f4:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 80031f8:	20000368 	.word	0x20000368

080031fc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80031fc:	e7fe      	b.n	80031fc <ADC_IRQHandler>
	...

08003200 <__errno>:
 8003200:	4b01      	ldr	r3, [pc, #4]	; (8003208 <__errno+0x8>)
 8003202:	6818      	ldr	r0, [r3, #0]
 8003204:	4770      	bx	lr
 8003206:	bf00      	nop
 8003208:	2000000c 	.word	0x2000000c

0800320c <__libc_init_array>:
 800320c:	b570      	push	{r4, r5, r6, lr}
 800320e:	4e0d      	ldr	r6, [pc, #52]	; (8003244 <__libc_init_array+0x38>)
 8003210:	4c0d      	ldr	r4, [pc, #52]	; (8003248 <__libc_init_array+0x3c>)
 8003212:	1ba4      	subs	r4, r4, r6
 8003214:	10a4      	asrs	r4, r4, #2
 8003216:	2500      	movs	r5, #0
 8003218:	42a5      	cmp	r5, r4
 800321a:	d109      	bne.n	8003230 <__libc_init_array+0x24>
 800321c:	4e0b      	ldr	r6, [pc, #44]	; (800324c <__libc_init_array+0x40>)
 800321e:	4c0c      	ldr	r4, [pc, #48]	; (8003250 <__libc_init_array+0x44>)
 8003220:	f001 fe5a 	bl	8004ed8 <_init>
 8003224:	1ba4      	subs	r4, r4, r6
 8003226:	10a4      	asrs	r4, r4, #2
 8003228:	2500      	movs	r5, #0
 800322a:	42a5      	cmp	r5, r4
 800322c:	d105      	bne.n	800323a <__libc_init_array+0x2e>
 800322e:	bd70      	pop	{r4, r5, r6, pc}
 8003230:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003234:	4798      	blx	r3
 8003236:	3501      	adds	r5, #1
 8003238:	e7ee      	b.n	8003218 <__libc_init_array+0xc>
 800323a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800323e:	4798      	blx	r3
 8003240:	3501      	adds	r5, #1
 8003242:	e7f2      	b.n	800322a <__libc_init_array+0x1e>
 8003244:	08005168 	.word	0x08005168
 8003248:	08005168 	.word	0x08005168
 800324c:	08005168 	.word	0x08005168
 8003250:	0800516c 	.word	0x0800516c

08003254 <memcpy>:
 8003254:	b510      	push	{r4, lr}
 8003256:	1e43      	subs	r3, r0, #1
 8003258:	440a      	add	r2, r1
 800325a:	4291      	cmp	r1, r2
 800325c:	d100      	bne.n	8003260 <memcpy+0xc>
 800325e:	bd10      	pop	{r4, pc}
 8003260:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003264:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003268:	e7f7      	b.n	800325a <memcpy+0x6>

0800326a <memset>:
 800326a:	4402      	add	r2, r0
 800326c:	4603      	mov	r3, r0
 800326e:	4293      	cmp	r3, r2
 8003270:	d100      	bne.n	8003274 <memset+0xa>
 8003272:	4770      	bx	lr
 8003274:	f803 1b01 	strb.w	r1, [r3], #1
 8003278:	e7f9      	b.n	800326e <memset+0x4>
	...

0800327c <iprintf>:
 800327c:	b40f      	push	{r0, r1, r2, r3}
 800327e:	4b0a      	ldr	r3, [pc, #40]	; (80032a8 <iprintf+0x2c>)
 8003280:	b513      	push	{r0, r1, r4, lr}
 8003282:	681c      	ldr	r4, [r3, #0]
 8003284:	b124      	cbz	r4, 8003290 <iprintf+0x14>
 8003286:	69a3      	ldr	r3, [r4, #24]
 8003288:	b913      	cbnz	r3, 8003290 <iprintf+0x14>
 800328a:	4620      	mov	r0, r4
 800328c:	f000 fafc 	bl	8003888 <__sinit>
 8003290:	ab05      	add	r3, sp, #20
 8003292:	9a04      	ldr	r2, [sp, #16]
 8003294:	68a1      	ldr	r1, [r4, #8]
 8003296:	9301      	str	r3, [sp, #4]
 8003298:	4620      	mov	r0, r4
 800329a:	f000 fcdd 	bl	8003c58 <_vfiprintf_r>
 800329e:	b002      	add	sp, #8
 80032a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80032a4:	b004      	add	sp, #16
 80032a6:	4770      	bx	lr
 80032a8:	2000000c 	.word	0x2000000c

080032ac <_puts_r>:
 80032ac:	b570      	push	{r4, r5, r6, lr}
 80032ae:	460e      	mov	r6, r1
 80032b0:	4605      	mov	r5, r0
 80032b2:	b118      	cbz	r0, 80032bc <_puts_r+0x10>
 80032b4:	6983      	ldr	r3, [r0, #24]
 80032b6:	b90b      	cbnz	r3, 80032bc <_puts_r+0x10>
 80032b8:	f000 fae6 	bl	8003888 <__sinit>
 80032bc:	69ab      	ldr	r3, [r5, #24]
 80032be:	68ac      	ldr	r4, [r5, #8]
 80032c0:	b913      	cbnz	r3, 80032c8 <_puts_r+0x1c>
 80032c2:	4628      	mov	r0, r5
 80032c4:	f000 fae0 	bl	8003888 <__sinit>
 80032c8:	4b23      	ldr	r3, [pc, #140]	; (8003358 <_puts_r+0xac>)
 80032ca:	429c      	cmp	r4, r3
 80032cc:	d117      	bne.n	80032fe <_puts_r+0x52>
 80032ce:	686c      	ldr	r4, [r5, #4]
 80032d0:	89a3      	ldrh	r3, [r4, #12]
 80032d2:	071b      	lsls	r3, r3, #28
 80032d4:	d51d      	bpl.n	8003312 <_puts_r+0x66>
 80032d6:	6923      	ldr	r3, [r4, #16]
 80032d8:	b1db      	cbz	r3, 8003312 <_puts_r+0x66>
 80032da:	3e01      	subs	r6, #1
 80032dc:	68a3      	ldr	r3, [r4, #8]
 80032de:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80032e2:	3b01      	subs	r3, #1
 80032e4:	60a3      	str	r3, [r4, #8]
 80032e6:	b9e9      	cbnz	r1, 8003324 <_puts_r+0x78>
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	da2e      	bge.n	800334a <_puts_r+0x9e>
 80032ec:	4622      	mov	r2, r4
 80032ee:	210a      	movs	r1, #10
 80032f0:	4628      	mov	r0, r5
 80032f2:	f000 f905 	bl	8003500 <__swbuf_r>
 80032f6:	3001      	adds	r0, #1
 80032f8:	d011      	beq.n	800331e <_puts_r+0x72>
 80032fa:	200a      	movs	r0, #10
 80032fc:	bd70      	pop	{r4, r5, r6, pc}
 80032fe:	4b17      	ldr	r3, [pc, #92]	; (800335c <_puts_r+0xb0>)
 8003300:	429c      	cmp	r4, r3
 8003302:	d101      	bne.n	8003308 <_puts_r+0x5c>
 8003304:	68ac      	ldr	r4, [r5, #8]
 8003306:	e7e3      	b.n	80032d0 <_puts_r+0x24>
 8003308:	4b15      	ldr	r3, [pc, #84]	; (8003360 <_puts_r+0xb4>)
 800330a:	429c      	cmp	r4, r3
 800330c:	bf08      	it	eq
 800330e:	68ec      	ldreq	r4, [r5, #12]
 8003310:	e7de      	b.n	80032d0 <_puts_r+0x24>
 8003312:	4621      	mov	r1, r4
 8003314:	4628      	mov	r0, r5
 8003316:	f000 f945 	bl	80035a4 <__swsetup_r>
 800331a:	2800      	cmp	r0, #0
 800331c:	d0dd      	beq.n	80032da <_puts_r+0x2e>
 800331e:	f04f 30ff 	mov.w	r0, #4294967295
 8003322:	bd70      	pop	{r4, r5, r6, pc}
 8003324:	2b00      	cmp	r3, #0
 8003326:	da04      	bge.n	8003332 <_puts_r+0x86>
 8003328:	69a2      	ldr	r2, [r4, #24]
 800332a:	4293      	cmp	r3, r2
 800332c:	db06      	blt.n	800333c <_puts_r+0x90>
 800332e:	290a      	cmp	r1, #10
 8003330:	d004      	beq.n	800333c <_puts_r+0x90>
 8003332:	6823      	ldr	r3, [r4, #0]
 8003334:	1c5a      	adds	r2, r3, #1
 8003336:	6022      	str	r2, [r4, #0]
 8003338:	7019      	strb	r1, [r3, #0]
 800333a:	e7cf      	b.n	80032dc <_puts_r+0x30>
 800333c:	4622      	mov	r2, r4
 800333e:	4628      	mov	r0, r5
 8003340:	f000 f8de 	bl	8003500 <__swbuf_r>
 8003344:	3001      	adds	r0, #1
 8003346:	d1c9      	bne.n	80032dc <_puts_r+0x30>
 8003348:	e7e9      	b.n	800331e <_puts_r+0x72>
 800334a:	6823      	ldr	r3, [r4, #0]
 800334c:	200a      	movs	r0, #10
 800334e:	1c5a      	adds	r2, r3, #1
 8003350:	6022      	str	r2, [r4, #0]
 8003352:	7018      	strb	r0, [r3, #0]
 8003354:	bd70      	pop	{r4, r5, r6, pc}
 8003356:	bf00      	nop
 8003358:	08004fc4 	.word	0x08004fc4
 800335c:	08004fe4 	.word	0x08004fe4
 8003360:	08004fa4 	.word	0x08004fa4

08003364 <puts>:
 8003364:	4b02      	ldr	r3, [pc, #8]	; (8003370 <puts+0xc>)
 8003366:	4601      	mov	r1, r0
 8003368:	6818      	ldr	r0, [r3, #0]
 800336a:	f7ff bf9f 	b.w	80032ac <_puts_r>
 800336e:	bf00      	nop
 8003370:	2000000c 	.word	0x2000000c

08003374 <iscanf>:
 8003374:	b40f      	push	{r0, r1, r2, r3}
 8003376:	4b0a      	ldr	r3, [pc, #40]	; (80033a0 <iscanf+0x2c>)
 8003378:	b513      	push	{r0, r1, r4, lr}
 800337a:	681c      	ldr	r4, [r3, #0]
 800337c:	b124      	cbz	r4, 8003388 <iscanf+0x14>
 800337e:	69a3      	ldr	r3, [r4, #24]
 8003380:	b913      	cbnz	r3, 8003388 <iscanf+0x14>
 8003382:	4620      	mov	r0, r4
 8003384:	f000 fa80 	bl	8003888 <__sinit>
 8003388:	ab05      	add	r3, sp, #20
 800338a:	9a04      	ldr	r2, [sp, #16]
 800338c:	6861      	ldr	r1, [r4, #4]
 800338e:	9301      	str	r3, [sp, #4]
 8003390:	4620      	mov	r0, r4
 8003392:	f001 f861 	bl	8004458 <_vfiscanf_r>
 8003396:	b002      	add	sp, #8
 8003398:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800339c:	b004      	add	sp, #16
 800339e:	4770      	bx	lr
 80033a0:	2000000c 	.word	0x2000000c

080033a4 <setvbuf>:
 80033a4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80033a8:	461d      	mov	r5, r3
 80033aa:	4b51      	ldr	r3, [pc, #324]	; (80034f0 <setvbuf+0x14c>)
 80033ac:	681e      	ldr	r6, [r3, #0]
 80033ae:	4604      	mov	r4, r0
 80033b0:	460f      	mov	r7, r1
 80033b2:	4690      	mov	r8, r2
 80033b4:	b126      	cbz	r6, 80033c0 <setvbuf+0x1c>
 80033b6:	69b3      	ldr	r3, [r6, #24]
 80033b8:	b913      	cbnz	r3, 80033c0 <setvbuf+0x1c>
 80033ba:	4630      	mov	r0, r6
 80033bc:	f000 fa64 	bl	8003888 <__sinit>
 80033c0:	4b4c      	ldr	r3, [pc, #304]	; (80034f4 <setvbuf+0x150>)
 80033c2:	429c      	cmp	r4, r3
 80033c4:	d152      	bne.n	800346c <setvbuf+0xc8>
 80033c6:	6874      	ldr	r4, [r6, #4]
 80033c8:	f1b8 0f02 	cmp.w	r8, #2
 80033cc:	d006      	beq.n	80033dc <setvbuf+0x38>
 80033ce:	f1b8 0f01 	cmp.w	r8, #1
 80033d2:	f200 8089 	bhi.w	80034e8 <setvbuf+0x144>
 80033d6:	2d00      	cmp	r5, #0
 80033d8:	f2c0 8086 	blt.w	80034e8 <setvbuf+0x144>
 80033dc:	4621      	mov	r1, r4
 80033de:	4630      	mov	r0, r6
 80033e0:	f000 f9d6 	bl	8003790 <_fflush_r>
 80033e4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80033e6:	b141      	cbz	r1, 80033fa <setvbuf+0x56>
 80033e8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80033ec:	4299      	cmp	r1, r3
 80033ee:	d002      	beq.n	80033f6 <setvbuf+0x52>
 80033f0:	4630      	mov	r0, r6
 80033f2:	f000 fb5b 	bl	8003aac <_free_r>
 80033f6:	2300      	movs	r3, #0
 80033f8:	6363      	str	r3, [r4, #52]	; 0x34
 80033fa:	2300      	movs	r3, #0
 80033fc:	61a3      	str	r3, [r4, #24]
 80033fe:	6063      	str	r3, [r4, #4]
 8003400:	89a3      	ldrh	r3, [r4, #12]
 8003402:	061b      	lsls	r3, r3, #24
 8003404:	d503      	bpl.n	800340e <setvbuf+0x6a>
 8003406:	6921      	ldr	r1, [r4, #16]
 8003408:	4630      	mov	r0, r6
 800340a:	f000 fb4f 	bl	8003aac <_free_r>
 800340e:	89a3      	ldrh	r3, [r4, #12]
 8003410:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 8003414:	f023 0303 	bic.w	r3, r3, #3
 8003418:	f1b8 0f02 	cmp.w	r8, #2
 800341c:	81a3      	strh	r3, [r4, #12]
 800341e:	d05d      	beq.n	80034dc <setvbuf+0x138>
 8003420:	ab01      	add	r3, sp, #4
 8003422:	466a      	mov	r2, sp
 8003424:	4621      	mov	r1, r4
 8003426:	4630      	mov	r0, r6
 8003428:	f000 fad4 	bl	80039d4 <__swhatbuf_r>
 800342c:	89a3      	ldrh	r3, [r4, #12]
 800342e:	4318      	orrs	r0, r3
 8003430:	81a0      	strh	r0, [r4, #12]
 8003432:	bb2d      	cbnz	r5, 8003480 <setvbuf+0xdc>
 8003434:	9d00      	ldr	r5, [sp, #0]
 8003436:	4628      	mov	r0, r5
 8003438:	f000 fb30 	bl	8003a9c <malloc>
 800343c:	4607      	mov	r7, r0
 800343e:	2800      	cmp	r0, #0
 8003440:	d14e      	bne.n	80034e0 <setvbuf+0x13c>
 8003442:	f8dd 9000 	ldr.w	r9, [sp]
 8003446:	45a9      	cmp	r9, r5
 8003448:	d13c      	bne.n	80034c4 <setvbuf+0x120>
 800344a:	f04f 30ff 	mov.w	r0, #4294967295
 800344e:	89a3      	ldrh	r3, [r4, #12]
 8003450:	f043 0302 	orr.w	r3, r3, #2
 8003454:	81a3      	strh	r3, [r4, #12]
 8003456:	2300      	movs	r3, #0
 8003458:	60a3      	str	r3, [r4, #8]
 800345a:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800345e:	6023      	str	r3, [r4, #0]
 8003460:	6123      	str	r3, [r4, #16]
 8003462:	2301      	movs	r3, #1
 8003464:	6163      	str	r3, [r4, #20]
 8003466:	b003      	add	sp, #12
 8003468:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800346c:	4b22      	ldr	r3, [pc, #136]	; (80034f8 <setvbuf+0x154>)
 800346e:	429c      	cmp	r4, r3
 8003470:	d101      	bne.n	8003476 <setvbuf+0xd2>
 8003472:	68b4      	ldr	r4, [r6, #8]
 8003474:	e7a8      	b.n	80033c8 <setvbuf+0x24>
 8003476:	4b21      	ldr	r3, [pc, #132]	; (80034fc <setvbuf+0x158>)
 8003478:	429c      	cmp	r4, r3
 800347a:	bf08      	it	eq
 800347c:	68f4      	ldreq	r4, [r6, #12]
 800347e:	e7a3      	b.n	80033c8 <setvbuf+0x24>
 8003480:	2f00      	cmp	r7, #0
 8003482:	d0d8      	beq.n	8003436 <setvbuf+0x92>
 8003484:	69b3      	ldr	r3, [r6, #24]
 8003486:	b913      	cbnz	r3, 800348e <setvbuf+0xea>
 8003488:	4630      	mov	r0, r6
 800348a:	f000 f9fd 	bl	8003888 <__sinit>
 800348e:	f1b8 0f01 	cmp.w	r8, #1
 8003492:	bf08      	it	eq
 8003494:	89a3      	ldrheq	r3, [r4, #12]
 8003496:	6027      	str	r7, [r4, #0]
 8003498:	bf04      	itt	eq
 800349a:	f043 0301 	orreq.w	r3, r3, #1
 800349e:	81a3      	strheq	r3, [r4, #12]
 80034a0:	89a3      	ldrh	r3, [r4, #12]
 80034a2:	6127      	str	r7, [r4, #16]
 80034a4:	f013 0008 	ands.w	r0, r3, #8
 80034a8:	6165      	str	r5, [r4, #20]
 80034aa:	d01b      	beq.n	80034e4 <setvbuf+0x140>
 80034ac:	f013 0001 	ands.w	r0, r3, #1
 80034b0:	bf18      	it	ne
 80034b2:	426d      	negne	r5, r5
 80034b4:	f04f 0300 	mov.w	r3, #0
 80034b8:	bf1d      	ittte	ne
 80034ba:	60a3      	strne	r3, [r4, #8]
 80034bc:	61a5      	strne	r5, [r4, #24]
 80034be:	4618      	movne	r0, r3
 80034c0:	60a5      	streq	r5, [r4, #8]
 80034c2:	e7d0      	b.n	8003466 <setvbuf+0xc2>
 80034c4:	4648      	mov	r0, r9
 80034c6:	f000 fae9 	bl	8003a9c <malloc>
 80034ca:	4607      	mov	r7, r0
 80034cc:	2800      	cmp	r0, #0
 80034ce:	d0bc      	beq.n	800344a <setvbuf+0xa6>
 80034d0:	89a3      	ldrh	r3, [r4, #12]
 80034d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80034d6:	81a3      	strh	r3, [r4, #12]
 80034d8:	464d      	mov	r5, r9
 80034da:	e7d3      	b.n	8003484 <setvbuf+0xe0>
 80034dc:	2000      	movs	r0, #0
 80034de:	e7b6      	b.n	800344e <setvbuf+0xaa>
 80034e0:	46a9      	mov	r9, r5
 80034e2:	e7f5      	b.n	80034d0 <setvbuf+0x12c>
 80034e4:	60a0      	str	r0, [r4, #8]
 80034e6:	e7be      	b.n	8003466 <setvbuf+0xc2>
 80034e8:	f04f 30ff 	mov.w	r0, #4294967295
 80034ec:	e7bb      	b.n	8003466 <setvbuf+0xc2>
 80034ee:	bf00      	nop
 80034f0:	2000000c 	.word	0x2000000c
 80034f4:	08004fc4 	.word	0x08004fc4
 80034f8:	08004fe4 	.word	0x08004fe4
 80034fc:	08004fa4 	.word	0x08004fa4

08003500 <__swbuf_r>:
 8003500:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003502:	460e      	mov	r6, r1
 8003504:	4614      	mov	r4, r2
 8003506:	4605      	mov	r5, r0
 8003508:	b118      	cbz	r0, 8003512 <__swbuf_r+0x12>
 800350a:	6983      	ldr	r3, [r0, #24]
 800350c:	b90b      	cbnz	r3, 8003512 <__swbuf_r+0x12>
 800350e:	f000 f9bb 	bl	8003888 <__sinit>
 8003512:	4b21      	ldr	r3, [pc, #132]	; (8003598 <__swbuf_r+0x98>)
 8003514:	429c      	cmp	r4, r3
 8003516:	d12a      	bne.n	800356e <__swbuf_r+0x6e>
 8003518:	686c      	ldr	r4, [r5, #4]
 800351a:	69a3      	ldr	r3, [r4, #24]
 800351c:	60a3      	str	r3, [r4, #8]
 800351e:	89a3      	ldrh	r3, [r4, #12]
 8003520:	071a      	lsls	r2, r3, #28
 8003522:	d52e      	bpl.n	8003582 <__swbuf_r+0x82>
 8003524:	6923      	ldr	r3, [r4, #16]
 8003526:	b363      	cbz	r3, 8003582 <__swbuf_r+0x82>
 8003528:	6923      	ldr	r3, [r4, #16]
 800352a:	6820      	ldr	r0, [r4, #0]
 800352c:	1ac0      	subs	r0, r0, r3
 800352e:	6963      	ldr	r3, [r4, #20]
 8003530:	b2f6      	uxtb	r6, r6
 8003532:	4298      	cmp	r0, r3
 8003534:	4637      	mov	r7, r6
 8003536:	db04      	blt.n	8003542 <__swbuf_r+0x42>
 8003538:	4621      	mov	r1, r4
 800353a:	4628      	mov	r0, r5
 800353c:	f000 f928 	bl	8003790 <_fflush_r>
 8003540:	bb28      	cbnz	r0, 800358e <__swbuf_r+0x8e>
 8003542:	68a3      	ldr	r3, [r4, #8]
 8003544:	3b01      	subs	r3, #1
 8003546:	60a3      	str	r3, [r4, #8]
 8003548:	6823      	ldr	r3, [r4, #0]
 800354a:	1c5a      	adds	r2, r3, #1
 800354c:	6022      	str	r2, [r4, #0]
 800354e:	701e      	strb	r6, [r3, #0]
 8003550:	6963      	ldr	r3, [r4, #20]
 8003552:	3001      	adds	r0, #1
 8003554:	4298      	cmp	r0, r3
 8003556:	d004      	beq.n	8003562 <__swbuf_r+0x62>
 8003558:	89a3      	ldrh	r3, [r4, #12]
 800355a:	07db      	lsls	r3, r3, #31
 800355c:	d519      	bpl.n	8003592 <__swbuf_r+0x92>
 800355e:	2e0a      	cmp	r6, #10
 8003560:	d117      	bne.n	8003592 <__swbuf_r+0x92>
 8003562:	4621      	mov	r1, r4
 8003564:	4628      	mov	r0, r5
 8003566:	f000 f913 	bl	8003790 <_fflush_r>
 800356a:	b190      	cbz	r0, 8003592 <__swbuf_r+0x92>
 800356c:	e00f      	b.n	800358e <__swbuf_r+0x8e>
 800356e:	4b0b      	ldr	r3, [pc, #44]	; (800359c <__swbuf_r+0x9c>)
 8003570:	429c      	cmp	r4, r3
 8003572:	d101      	bne.n	8003578 <__swbuf_r+0x78>
 8003574:	68ac      	ldr	r4, [r5, #8]
 8003576:	e7d0      	b.n	800351a <__swbuf_r+0x1a>
 8003578:	4b09      	ldr	r3, [pc, #36]	; (80035a0 <__swbuf_r+0xa0>)
 800357a:	429c      	cmp	r4, r3
 800357c:	bf08      	it	eq
 800357e:	68ec      	ldreq	r4, [r5, #12]
 8003580:	e7cb      	b.n	800351a <__swbuf_r+0x1a>
 8003582:	4621      	mov	r1, r4
 8003584:	4628      	mov	r0, r5
 8003586:	f000 f80d 	bl	80035a4 <__swsetup_r>
 800358a:	2800      	cmp	r0, #0
 800358c:	d0cc      	beq.n	8003528 <__swbuf_r+0x28>
 800358e:	f04f 37ff 	mov.w	r7, #4294967295
 8003592:	4638      	mov	r0, r7
 8003594:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003596:	bf00      	nop
 8003598:	08004fc4 	.word	0x08004fc4
 800359c:	08004fe4 	.word	0x08004fe4
 80035a0:	08004fa4 	.word	0x08004fa4

080035a4 <__swsetup_r>:
 80035a4:	4b32      	ldr	r3, [pc, #200]	; (8003670 <__swsetup_r+0xcc>)
 80035a6:	b570      	push	{r4, r5, r6, lr}
 80035a8:	681d      	ldr	r5, [r3, #0]
 80035aa:	4606      	mov	r6, r0
 80035ac:	460c      	mov	r4, r1
 80035ae:	b125      	cbz	r5, 80035ba <__swsetup_r+0x16>
 80035b0:	69ab      	ldr	r3, [r5, #24]
 80035b2:	b913      	cbnz	r3, 80035ba <__swsetup_r+0x16>
 80035b4:	4628      	mov	r0, r5
 80035b6:	f000 f967 	bl	8003888 <__sinit>
 80035ba:	4b2e      	ldr	r3, [pc, #184]	; (8003674 <__swsetup_r+0xd0>)
 80035bc:	429c      	cmp	r4, r3
 80035be:	d10f      	bne.n	80035e0 <__swsetup_r+0x3c>
 80035c0:	686c      	ldr	r4, [r5, #4]
 80035c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80035c6:	b29a      	uxth	r2, r3
 80035c8:	0715      	lsls	r5, r2, #28
 80035ca:	d42c      	bmi.n	8003626 <__swsetup_r+0x82>
 80035cc:	06d0      	lsls	r0, r2, #27
 80035ce:	d411      	bmi.n	80035f4 <__swsetup_r+0x50>
 80035d0:	2209      	movs	r2, #9
 80035d2:	6032      	str	r2, [r6, #0]
 80035d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80035d8:	81a3      	strh	r3, [r4, #12]
 80035da:	f04f 30ff 	mov.w	r0, #4294967295
 80035de:	bd70      	pop	{r4, r5, r6, pc}
 80035e0:	4b25      	ldr	r3, [pc, #148]	; (8003678 <__swsetup_r+0xd4>)
 80035e2:	429c      	cmp	r4, r3
 80035e4:	d101      	bne.n	80035ea <__swsetup_r+0x46>
 80035e6:	68ac      	ldr	r4, [r5, #8]
 80035e8:	e7eb      	b.n	80035c2 <__swsetup_r+0x1e>
 80035ea:	4b24      	ldr	r3, [pc, #144]	; (800367c <__swsetup_r+0xd8>)
 80035ec:	429c      	cmp	r4, r3
 80035ee:	bf08      	it	eq
 80035f0:	68ec      	ldreq	r4, [r5, #12]
 80035f2:	e7e6      	b.n	80035c2 <__swsetup_r+0x1e>
 80035f4:	0751      	lsls	r1, r2, #29
 80035f6:	d512      	bpl.n	800361e <__swsetup_r+0x7a>
 80035f8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80035fa:	b141      	cbz	r1, 800360e <__swsetup_r+0x6a>
 80035fc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003600:	4299      	cmp	r1, r3
 8003602:	d002      	beq.n	800360a <__swsetup_r+0x66>
 8003604:	4630      	mov	r0, r6
 8003606:	f000 fa51 	bl	8003aac <_free_r>
 800360a:	2300      	movs	r3, #0
 800360c:	6363      	str	r3, [r4, #52]	; 0x34
 800360e:	89a3      	ldrh	r3, [r4, #12]
 8003610:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003614:	81a3      	strh	r3, [r4, #12]
 8003616:	2300      	movs	r3, #0
 8003618:	6063      	str	r3, [r4, #4]
 800361a:	6923      	ldr	r3, [r4, #16]
 800361c:	6023      	str	r3, [r4, #0]
 800361e:	89a3      	ldrh	r3, [r4, #12]
 8003620:	f043 0308 	orr.w	r3, r3, #8
 8003624:	81a3      	strh	r3, [r4, #12]
 8003626:	6923      	ldr	r3, [r4, #16]
 8003628:	b94b      	cbnz	r3, 800363e <__swsetup_r+0x9a>
 800362a:	89a3      	ldrh	r3, [r4, #12]
 800362c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003630:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003634:	d003      	beq.n	800363e <__swsetup_r+0x9a>
 8003636:	4621      	mov	r1, r4
 8003638:	4630      	mov	r0, r6
 800363a:	f000 f9ef 	bl	8003a1c <__smakebuf_r>
 800363e:	89a2      	ldrh	r2, [r4, #12]
 8003640:	f012 0301 	ands.w	r3, r2, #1
 8003644:	d00c      	beq.n	8003660 <__swsetup_r+0xbc>
 8003646:	2300      	movs	r3, #0
 8003648:	60a3      	str	r3, [r4, #8]
 800364a:	6963      	ldr	r3, [r4, #20]
 800364c:	425b      	negs	r3, r3
 800364e:	61a3      	str	r3, [r4, #24]
 8003650:	6923      	ldr	r3, [r4, #16]
 8003652:	b953      	cbnz	r3, 800366a <__swsetup_r+0xc6>
 8003654:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003658:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800365c:	d1ba      	bne.n	80035d4 <__swsetup_r+0x30>
 800365e:	bd70      	pop	{r4, r5, r6, pc}
 8003660:	0792      	lsls	r2, r2, #30
 8003662:	bf58      	it	pl
 8003664:	6963      	ldrpl	r3, [r4, #20]
 8003666:	60a3      	str	r3, [r4, #8]
 8003668:	e7f2      	b.n	8003650 <__swsetup_r+0xac>
 800366a:	2000      	movs	r0, #0
 800366c:	e7f7      	b.n	800365e <__swsetup_r+0xba>
 800366e:	bf00      	nop
 8003670:	2000000c 	.word	0x2000000c
 8003674:	08004fc4 	.word	0x08004fc4
 8003678:	08004fe4 	.word	0x08004fe4
 800367c:	08004fa4 	.word	0x08004fa4

08003680 <__sflush_r>:
 8003680:	898a      	ldrh	r2, [r1, #12]
 8003682:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003686:	4605      	mov	r5, r0
 8003688:	0710      	lsls	r0, r2, #28
 800368a:	460c      	mov	r4, r1
 800368c:	d45a      	bmi.n	8003744 <__sflush_r+0xc4>
 800368e:	684b      	ldr	r3, [r1, #4]
 8003690:	2b00      	cmp	r3, #0
 8003692:	dc05      	bgt.n	80036a0 <__sflush_r+0x20>
 8003694:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8003696:	2b00      	cmp	r3, #0
 8003698:	dc02      	bgt.n	80036a0 <__sflush_r+0x20>
 800369a:	2000      	movs	r0, #0
 800369c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80036a0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80036a2:	2e00      	cmp	r6, #0
 80036a4:	d0f9      	beq.n	800369a <__sflush_r+0x1a>
 80036a6:	2300      	movs	r3, #0
 80036a8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80036ac:	682f      	ldr	r7, [r5, #0]
 80036ae:	602b      	str	r3, [r5, #0]
 80036b0:	d033      	beq.n	800371a <__sflush_r+0x9a>
 80036b2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80036b4:	89a3      	ldrh	r3, [r4, #12]
 80036b6:	075a      	lsls	r2, r3, #29
 80036b8:	d505      	bpl.n	80036c6 <__sflush_r+0x46>
 80036ba:	6863      	ldr	r3, [r4, #4]
 80036bc:	1ac0      	subs	r0, r0, r3
 80036be:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80036c0:	b10b      	cbz	r3, 80036c6 <__sflush_r+0x46>
 80036c2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80036c4:	1ac0      	subs	r0, r0, r3
 80036c6:	2300      	movs	r3, #0
 80036c8:	4602      	mov	r2, r0
 80036ca:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80036cc:	6a21      	ldr	r1, [r4, #32]
 80036ce:	4628      	mov	r0, r5
 80036d0:	47b0      	blx	r6
 80036d2:	1c43      	adds	r3, r0, #1
 80036d4:	89a3      	ldrh	r3, [r4, #12]
 80036d6:	d106      	bne.n	80036e6 <__sflush_r+0x66>
 80036d8:	6829      	ldr	r1, [r5, #0]
 80036da:	291d      	cmp	r1, #29
 80036dc:	d84b      	bhi.n	8003776 <__sflush_r+0xf6>
 80036de:	4a2b      	ldr	r2, [pc, #172]	; (800378c <__sflush_r+0x10c>)
 80036e0:	40ca      	lsrs	r2, r1
 80036e2:	07d6      	lsls	r6, r2, #31
 80036e4:	d547      	bpl.n	8003776 <__sflush_r+0xf6>
 80036e6:	2200      	movs	r2, #0
 80036e8:	6062      	str	r2, [r4, #4]
 80036ea:	04d9      	lsls	r1, r3, #19
 80036ec:	6922      	ldr	r2, [r4, #16]
 80036ee:	6022      	str	r2, [r4, #0]
 80036f0:	d504      	bpl.n	80036fc <__sflush_r+0x7c>
 80036f2:	1c42      	adds	r2, r0, #1
 80036f4:	d101      	bne.n	80036fa <__sflush_r+0x7a>
 80036f6:	682b      	ldr	r3, [r5, #0]
 80036f8:	b903      	cbnz	r3, 80036fc <__sflush_r+0x7c>
 80036fa:	6560      	str	r0, [r4, #84]	; 0x54
 80036fc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80036fe:	602f      	str	r7, [r5, #0]
 8003700:	2900      	cmp	r1, #0
 8003702:	d0ca      	beq.n	800369a <__sflush_r+0x1a>
 8003704:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003708:	4299      	cmp	r1, r3
 800370a:	d002      	beq.n	8003712 <__sflush_r+0x92>
 800370c:	4628      	mov	r0, r5
 800370e:	f000 f9cd 	bl	8003aac <_free_r>
 8003712:	2000      	movs	r0, #0
 8003714:	6360      	str	r0, [r4, #52]	; 0x34
 8003716:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800371a:	6a21      	ldr	r1, [r4, #32]
 800371c:	2301      	movs	r3, #1
 800371e:	4628      	mov	r0, r5
 8003720:	47b0      	blx	r6
 8003722:	1c41      	adds	r1, r0, #1
 8003724:	d1c6      	bne.n	80036b4 <__sflush_r+0x34>
 8003726:	682b      	ldr	r3, [r5, #0]
 8003728:	2b00      	cmp	r3, #0
 800372a:	d0c3      	beq.n	80036b4 <__sflush_r+0x34>
 800372c:	2b1d      	cmp	r3, #29
 800372e:	d001      	beq.n	8003734 <__sflush_r+0xb4>
 8003730:	2b16      	cmp	r3, #22
 8003732:	d101      	bne.n	8003738 <__sflush_r+0xb8>
 8003734:	602f      	str	r7, [r5, #0]
 8003736:	e7b0      	b.n	800369a <__sflush_r+0x1a>
 8003738:	89a3      	ldrh	r3, [r4, #12]
 800373a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800373e:	81a3      	strh	r3, [r4, #12]
 8003740:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003744:	690f      	ldr	r7, [r1, #16]
 8003746:	2f00      	cmp	r7, #0
 8003748:	d0a7      	beq.n	800369a <__sflush_r+0x1a>
 800374a:	0793      	lsls	r3, r2, #30
 800374c:	680e      	ldr	r6, [r1, #0]
 800374e:	bf08      	it	eq
 8003750:	694b      	ldreq	r3, [r1, #20]
 8003752:	600f      	str	r7, [r1, #0]
 8003754:	bf18      	it	ne
 8003756:	2300      	movne	r3, #0
 8003758:	eba6 0807 	sub.w	r8, r6, r7
 800375c:	608b      	str	r3, [r1, #8]
 800375e:	f1b8 0f00 	cmp.w	r8, #0
 8003762:	dd9a      	ble.n	800369a <__sflush_r+0x1a>
 8003764:	4643      	mov	r3, r8
 8003766:	463a      	mov	r2, r7
 8003768:	6a21      	ldr	r1, [r4, #32]
 800376a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800376c:	4628      	mov	r0, r5
 800376e:	47b0      	blx	r6
 8003770:	2800      	cmp	r0, #0
 8003772:	dc07      	bgt.n	8003784 <__sflush_r+0x104>
 8003774:	89a3      	ldrh	r3, [r4, #12]
 8003776:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800377a:	81a3      	strh	r3, [r4, #12]
 800377c:	f04f 30ff 	mov.w	r0, #4294967295
 8003780:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003784:	4407      	add	r7, r0
 8003786:	eba8 0800 	sub.w	r8, r8, r0
 800378a:	e7e8      	b.n	800375e <__sflush_r+0xde>
 800378c:	20400001 	.word	0x20400001

08003790 <_fflush_r>:
 8003790:	b538      	push	{r3, r4, r5, lr}
 8003792:	690b      	ldr	r3, [r1, #16]
 8003794:	4605      	mov	r5, r0
 8003796:	460c      	mov	r4, r1
 8003798:	b1db      	cbz	r3, 80037d2 <_fflush_r+0x42>
 800379a:	b118      	cbz	r0, 80037a4 <_fflush_r+0x14>
 800379c:	6983      	ldr	r3, [r0, #24]
 800379e:	b90b      	cbnz	r3, 80037a4 <_fflush_r+0x14>
 80037a0:	f000 f872 	bl	8003888 <__sinit>
 80037a4:	4b0c      	ldr	r3, [pc, #48]	; (80037d8 <_fflush_r+0x48>)
 80037a6:	429c      	cmp	r4, r3
 80037a8:	d109      	bne.n	80037be <_fflush_r+0x2e>
 80037aa:	686c      	ldr	r4, [r5, #4]
 80037ac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80037b0:	b17b      	cbz	r3, 80037d2 <_fflush_r+0x42>
 80037b2:	4621      	mov	r1, r4
 80037b4:	4628      	mov	r0, r5
 80037b6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80037ba:	f7ff bf61 	b.w	8003680 <__sflush_r>
 80037be:	4b07      	ldr	r3, [pc, #28]	; (80037dc <_fflush_r+0x4c>)
 80037c0:	429c      	cmp	r4, r3
 80037c2:	d101      	bne.n	80037c8 <_fflush_r+0x38>
 80037c4:	68ac      	ldr	r4, [r5, #8]
 80037c6:	e7f1      	b.n	80037ac <_fflush_r+0x1c>
 80037c8:	4b05      	ldr	r3, [pc, #20]	; (80037e0 <_fflush_r+0x50>)
 80037ca:	429c      	cmp	r4, r3
 80037cc:	bf08      	it	eq
 80037ce:	68ec      	ldreq	r4, [r5, #12]
 80037d0:	e7ec      	b.n	80037ac <_fflush_r+0x1c>
 80037d2:	2000      	movs	r0, #0
 80037d4:	bd38      	pop	{r3, r4, r5, pc}
 80037d6:	bf00      	nop
 80037d8:	08004fc4 	.word	0x08004fc4
 80037dc:	08004fe4 	.word	0x08004fe4
 80037e0:	08004fa4 	.word	0x08004fa4

080037e4 <fflush>:
 80037e4:	4601      	mov	r1, r0
 80037e6:	b920      	cbnz	r0, 80037f2 <fflush+0xe>
 80037e8:	4b04      	ldr	r3, [pc, #16]	; (80037fc <fflush+0x18>)
 80037ea:	4905      	ldr	r1, [pc, #20]	; (8003800 <fflush+0x1c>)
 80037ec:	6818      	ldr	r0, [r3, #0]
 80037ee:	f000 b8d3 	b.w	8003998 <_fwalk_reent>
 80037f2:	4b04      	ldr	r3, [pc, #16]	; (8003804 <fflush+0x20>)
 80037f4:	6818      	ldr	r0, [r3, #0]
 80037f6:	f7ff bfcb 	b.w	8003790 <_fflush_r>
 80037fa:	bf00      	nop
 80037fc:	08004fa0 	.word	0x08004fa0
 8003800:	08003791 	.word	0x08003791
 8003804:	2000000c 	.word	0x2000000c

08003808 <_cleanup_r>:
 8003808:	4901      	ldr	r1, [pc, #4]	; (8003810 <_cleanup_r+0x8>)
 800380a:	f000 b8c5 	b.w	8003998 <_fwalk_reent>
 800380e:	bf00      	nop
 8003810:	08003791 	.word	0x08003791

08003814 <std.isra.0>:
 8003814:	2300      	movs	r3, #0
 8003816:	b510      	push	{r4, lr}
 8003818:	4604      	mov	r4, r0
 800381a:	6003      	str	r3, [r0, #0]
 800381c:	6043      	str	r3, [r0, #4]
 800381e:	6083      	str	r3, [r0, #8]
 8003820:	8181      	strh	r1, [r0, #12]
 8003822:	6643      	str	r3, [r0, #100]	; 0x64
 8003824:	81c2      	strh	r2, [r0, #14]
 8003826:	6103      	str	r3, [r0, #16]
 8003828:	6143      	str	r3, [r0, #20]
 800382a:	6183      	str	r3, [r0, #24]
 800382c:	4619      	mov	r1, r3
 800382e:	2208      	movs	r2, #8
 8003830:	305c      	adds	r0, #92	; 0x5c
 8003832:	f7ff fd1a 	bl	800326a <memset>
 8003836:	4b05      	ldr	r3, [pc, #20]	; (800384c <std.isra.0+0x38>)
 8003838:	6263      	str	r3, [r4, #36]	; 0x24
 800383a:	4b05      	ldr	r3, [pc, #20]	; (8003850 <std.isra.0+0x3c>)
 800383c:	62a3      	str	r3, [r4, #40]	; 0x28
 800383e:	4b05      	ldr	r3, [pc, #20]	; (8003854 <std.isra.0+0x40>)
 8003840:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003842:	4b05      	ldr	r3, [pc, #20]	; (8003858 <std.isra.0+0x44>)
 8003844:	6224      	str	r4, [r4, #32]
 8003846:	6323      	str	r3, [r4, #48]	; 0x30
 8003848:	bd10      	pop	{r4, pc}
 800384a:	bf00      	nop
 800384c:	08004901 	.word	0x08004901
 8003850:	08004923 	.word	0x08004923
 8003854:	0800495b 	.word	0x0800495b
 8003858:	0800497f 	.word	0x0800497f

0800385c <__sfmoreglue>:
 800385c:	b570      	push	{r4, r5, r6, lr}
 800385e:	1e4a      	subs	r2, r1, #1
 8003860:	2568      	movs	r5, #104	; 0x68
 8003862:	4355      	muls	r5, r2
 8003864:	460e      	mov	r6, r1
 8003866:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800386a:	f000 f96d 	bl	8003b48 <_malloc_r>
 800386e:	4604      	mov	r4, r0
 8003870:	b140      	cbz	r0, 8003884 <__sfmoreglue+0x28>
 8003872:	2100      	movs	r1, #0
 8003874:	e880 0042 	stmia.w	r0, {r1, r6}
 8003878:	300c      	adds	r0, #12
 800387a:	60a0      	str	r0, [r4, #8]
 800387c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8003880:	f7ff fcf3 	bl	800326a <memset>
 8003884:	4620      	mov	r0, r4
 8003886:	bd70      	pop	{r4, r5, r6, pc}

08003888 <__sinit>:
 8003888:	6983      	ldr	r3, [r0, #24]
 800388a:	b510      	push	{r4, lr}
 800388c:	4604      	mov	r4, r0
 800388e:	bb33      	cbnz	r3, 80038de <__sinit+0x56>
 8003890:	6483      	str	r3, [r0, #72]	; 0x48
 8003892:	64c3      	str	r3, [r0, #76]	; 0x4c
 8003894:	6503      	str	r3, [r0, #80]	; 0x50
 8003896:	4b12      	ldr	r3, [pc, #72]	; (80038e0 <__sinit+0x58>)
 8003898:	4a12      	ldr	r2, [pc, #72]	; (80038e4 <__sinit+0x5c>)
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	6282      	str	r2, [r0, #40]	; 0x28
 800389e:	4298      	cmp	r0, r3
 80038a0:	bf04      	itt	eq
 80038a2:	2301      	moveq	r3, #1
 80038a4:	6183      	streq	r3, [r0, #24]
 80038a6:	f000 f81f 	bl	80038e8 <__sfp>
 80038aa:	6060      	str	r0, [r4, #4]
 80038ac:	4620      	mov	r0, r4
 80038ae:	f000 f81b 	bl	80038e8 <__sfp>
 80038b2:	60a0      	str	r0, [r4, #8]
 80038b4:	4620      	mov	r0, r4
 80038b6:	f000 f817 	bl	80038e8 <__sfp>
 80038ba:	2200      	movs	r2, #0
 80038bc:	60e0      	str	r0, [r4, #12]
 80038be:	2104      	movs	r1, #4
 80038c0:	6860      	ldr	r0, [r4, #4]
 80038c2:	f7ff ffa7 	bl	8003814 <std.isra.0>
 80038c6:	2201      	movs	r2, #1
 80038c8:	2109      	movs	r1, #9
 80038ca:	68a0      	ldr	r0, [r4, #8]
 80038cc:	f7ff ffa2 	bl	8003814 <std.isra.0>
 80038d0:	2202      	movs	r2, #2
 80038d2:	2112      	movs	r1, #18
 80038d4:	68e0      	ldr	r0, [r4, #12]
 80038d6:	f7ff ff9d 	bl	8003814 <std.isra.0>
 80038da:	2301      	movs	r3, #1
 80038dc:	61a3      	str	r3, [r4, #24]
 80038de:	bd10      	pop	{r4, pc}
 80038e0:	08004fa0 	.word	0x08004fa0
 80038e4:	08003809 	.word	0x08003809

080038e8 <__sfp>:
 80038e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80038ea:	4b1c      	ldr	r3, [pc, #112]	; (800395c <__sfp+0x74>)
 80038ec:	681e      	ldr	r6, [r3, #0]
 80038ee:	69b3      	ldr	r3, [r6, #24]
 80038f0:	4607      	mov	r7, r0
 80038f2:	b913      	cbnz	r3, 80038fa <__sfp+0x12>
 80038f4:	4630      	mov	r0, r6
 80038f6:	f7ff ffc7 	bl	8003888 <__sinit>
 80038fa:	3648      	adds	r6, #72	; 0x48
 80038fc:	68b4      	ldr	r4, [r6, #8]
 80038fe:	6873      	ldr	r3, [r6, #4]
 8003900:	3b01      	subs	r3, #1
 8003902:	d503      	bpl.n	800390c <__sfp+0x24>
 8003904:	6833      	ldr	r3, [r6, #0]
 8003906:	b133      	cbz	r3, 8003916 <__sfp+0x2e>
 8003908:	6836      	ldr	r6, [r6, #0]
 800390a:	e7f7      	b.n	80038fc <__sfp+0x14>
 800390c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8003910:	b16d      	cbz	r5, 800392e <__sfp+0x46>
 8003912:	3468      	adds	r4, #104	; 0x68
 8003914:	e7f4      	b.n	8003900 <__sfp+0x18>
 8003916:	2104      	movs	r1, #4
 8003918:	4638      	mov	r0, r7
 800391a:	f7ff ff9f 	bl	800385c <__sfmoreglue>
 800391e:	6030      	str	r0, [r6, #0]
 8003920:	2800      	cmp	r0, #0
 8003922:	d1f1      	bne.n	8003908 <__sfp+0x20>
 8003924:	230c      	movs	r3, #12
 8003926:	603b      	str	r3, [r7, #0]
 8003928:	4604      	mov	r4, r0
 800392a:	4620      	mov	r0, r4
 800392c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800392e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003932:	81e3      	strh	r3, [r4, #14]
 8003934:	2301      	movs	r3, #1
 8003936:	81a3      	strh	r3, [r4, #12]
 8003938:	6665      	str	r5, [r4, #100]	; 0x64
 800393a:	6025      	str	r5, [r4, #0]
 800393c:	60a5      	str	r5, [r4, #8]
 800393e:	6065      	str	r5, [r4, #4]
 8003940:	6125      	str	r5, [r4, #16]
 8003942:	6165      	str	r5, [r4, #20]
 8003944:	61a5      	str	r5, [r4, #24]
 8003946:	2208      	movs	r2, #8
 8003948:	4629      	mov	r1, r5
 800394a:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800394e:	f7ff fc8c 	bl	800326a <memset>
 8003952:	6365      	str	r5, [r4, #52]	; 0x34
 8003954:	63a5      	str	r5, [r4, #56]	; 0x38
 8003956:	64a5      	str	r5, [r4, #72]	; 0x48
 8003958:	64e5      	str	r5, [r4, #76]	; 0x4c
 800395a:	e7e6      	b.n	800392a <__sfp+0x42>
 800395c:	08004fa0 	.word	0x08004fa0

08003960 <_fwalk>:
 8003960:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003964:	4688      	mov	r8, r1
 8003966:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800396a:	2600      	movs	r6, #0
 800396c:	b914      	cbnz	r4, 8003974 <_fwalk+0x14>
 800396e:	4630      	mov	r0, r6
 8003970:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003974:	68a5      	ldr	r5, [r4, #8]
 8003976:	6867      	ldr	r7, [r4, #4]
 8003978:	3f01      	subs	r7, #1
 800397a:	d501      	bpl.n	8003980 <_fwalk+0x20>
 800397c:	6824      	ldr	r4, [r4, #0]
 800397e:	e7f5      	b.n	800396c <_fwalk+0xc>
 8003980:	89ab      	ldrh	r3, [r5, #12]
 8003982:	2b01      	cmp	r3, #1
 8003984:	d906      	bls.n	8003994 <_fwalk+0x34>
 8003986:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800398a:	3301      	adds	r3, #1
 800398c:	d002      	beq.n	8003994 <_fwalk+0x34>
 800398e:	4628      	mov	r0, r5
 8003990:	47c0      	blx	r8
 8003992:	4306      	orrs	r6, r0
 8003994:	3568      	adds	r5, #104	; 0x68
 8003996:	e7ef      	b.n	8003978 <_fwalk+0x18>

08003998 <_fwalk_reent>:
 8003998:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800399c:	4680      	mov	r8, r0
 800399e:	4689      	mov	r9, r1
 80039a0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80039a4:	2600      	movs	r6, #0
 80039a6:	b914      	cbnz	r4, 80039ae <_fwalk_reent+0x16>
 80039a8:	4630      	mov	r0, r6
 80039aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80039ae:	68a5      	ldr	r5, [r4, #8]
 80039b0:	6867      	ldr	r7, [r4, #4]
 80039b2:	3f01      	subs	r7, #1
 80039b4:	d501      	bpl.n	80039ba <_fwalk_reent+0x22>
 80039b6:	6824      	ldr	r4, [r4, #0]
 80039b8:	e7f5      	b.n	80039a6 <_fwalk_reent+0xe>
 80039ba:	89ab      	ldrh	r3, [r5, #12]
 80039bc:	2b01      	cmp	r3, #1
 80039be:	d907      	bls.n	80039d0 <_fwalk_reent+0x38>
 80039c0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80039c4:	3301      	adds	r3, #1
 80039c6:	d003      	beq.n	80039d0 <_fwalk_reent+0x38>
 80039c8:	4629      	mov	r1, r5
 80039ca:	4640      	mov	r0, r8
 80039cc:	47c8      	blx	r9
 80039ce:	4306      	orrs	r6, r0
 80039d0:	3568      	adds	r5, #104	; 0x68
 80039d2:	e7ee      	b.n	80039b2 <_fwalk_reent+0x1a>

080039d4 <__swhatbuf_r>:
 80039d4:	b570      	push	{r4, r5, r6, lr}
 80039d6:	460e      	mov	r6, r1
 80039d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80039dc:	2900      	cmp	r1, #0
 80039de:	b090      	sub	sp, #64	; 0x40
 80039e0:	4614      	mov	r4, r2
 80039e2:	461d      	mov	r5, r3
 80039e4:	da07      	bge.n	80039f6 <__swhatbuf_r+0x22>
 80039e6:	2300      	movs	r3, #0
 80039e8:	602b      	str	r3, [r5, #0]
 80039ea:	89b3      	ldrh	r3, [r6, #12]
 80039ec:	061a      	lsls	r2, r3, #24
 80039ee:	d410      	bmi.n	8003a12 <__swhatbuf_r+0x3e>
 80039f0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80039f4:	e00e      	b.n	8003a14 <__swhatbuf_r+0x40>
 80039f6:	aa01      	add	r2, sp, #4
 80039f8:	f001 f9b8 	bl	8004d6c <_fstat_r>
 80039fc:	2800      	cmp	r0, #0
 80039fe:	dbf2      	blt.n	80039e6 <__swhatbuf_r+0x12>
 8003a00:	9a02      	ldr	r2, [sp, #8]
 8003a02:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8003a06:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8003a0a:	425a      	negs	r2, r3
 8003a0c:	415a      	adcs	r2, r3
 8003a0e:	602a      	str	r2, [r5, #0]
 8003a10:	e7ee      	b.n	80039f0 <__swhatbuf_r+0x1c>
 8003a12:	2340      	movs	r3, #64	; 0x40
 8003a14:	2000      	movs	r0, #0
 8003a16:	6023      	str	r3, [r4, #0]
 8003a18:	b010      	add	sp, #64	; 0x40
 8003a1a:	bd70      	pop	{r4, r5, r6, pc}

08003a1c <__smakebuf_r>:
 8003a1c:	898b      	ldrh	r3, [r1, #12]
 8003a1e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003a20:	079d      	lsls	r5, r3, #30
 8003a22:	4606      	mov	r6, r0
 8003a24:	460c      	mov	r4, r1
 8003a26:	d507      	bpl.n	8003a38 <__smakebuf_r+0x1c>
 8003a28:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8003a2c:	6023      	str	r3, [r4, #0]
 8003a2e:	6123      	str	r3, [r4, #16]
 8003a30:	2301      	movs	r3, #1
 8003a32:	6163      	str	r3, [r4, #20]
 8003a34:	b002      	add	sp, #8
 8003a36:	bd70      	pop	{r4, r5, r6, pc}
 8003a38:	ab01      	add	r3, sp, #4
 8003a3a:	466a      	mov	r2, sp
 8003a3c:	f7ff ffca 	bl	80039d4 <__swhatbuf_r>
 8003a40:	9900      	ldr	r1, [sp, #0]
 8003a42:	4605      	mov	r5, r0
 8003a44:	4630      	mov	r0, r6
 8003a46:	f000 f87f 	bl	8003b48 <_malloc_r>
 8003a4a:	b948      	cbnz	r0, 8003a60 <__smakebuf_r+0x44>
 8003a4c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003a50:	059a      	lsls	r2, r3, #22
 8003a52:	d4ef      	bmi.n	8003a34 <__smakebuf_r+0x18>
 8003a54:	f023 0303 	bic.w	r3, r3, #3
 8003a58:	f043 0302 	orr.w	r3, r3, #2
 8003a5c:	81a3      	strh	r3, [r4, #12]
 8003a5e:	e7e3      	b.n	8003a28 <__smakebuf_r+0xc>
 8003a60:	4b0d      	ldr	r3, [pc, #52]	; (8003a98 <__smakebuf_r+0x7c>)
 8003a62:	62b3      	str	r3, [r6, #40]	; 0x28
 8003a64:	89a3      	ldrh	r3, [r4, #12]
 8003a66:	6020      	str	r0, [r4, #0]
 8003a68:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003a6c:	81a3      	strh	r3, [r4, #12]
 8003a6e:	9b00      	ldr	r3, [sp, #0]
 8003a70:	6163      	str	r3, [r4, #20]
 8003a72:	9b01      	ldr	r3, [sp, #4]
 8003a74:	6120      	str	r0, [r4, #16]
 8003a76:	b15b      	cbz	r3, 8003a90 <__smakebuf_r+0x74>
 8003a78:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003a7c:	4630      	mov	r0, r6
 8003a7e:	f001 f987 	bl	8004d90 <_isatty_r>
 8003a82:	b128      	cbz	r0, 8003a90 <__smakebuf_r+0x74>
 8003a84:	89a3      	ldrh	r3, [r4, #12]
 8003a86:	f023 0303 	bic.w	r3, r3, #3
 8003a8a:	f043 0301 	orr.w	r3, r3, #1
 8003a8e:	81a3      	strh	r3, [r4, #12]
 8003a90:	89a3      	ldrh	r3, [r4, #12]
 8003a92:	431d      	orrs	r5, r3
 8003a94:	81a5      	strh	r5, [r4, #12]
 8003a96:	e7cd      	b.n	8003a34 <__smakebuf_r+0x18>
 8003a98:	08003809 	.word	0x08003809

08003a9c <malloc>:
 8003a9c:	4b02      	ldr	r3, [pc, #8]	; (8003aa8 <malloc+0xc>)
 8003a9e:	4601      	mov	r1, r0
 8003aa0:	6818      	ldr	r0, [r3, #0]
 8003aa2:	f000 b851 	b.w	8003b48 <_malloc_r>
 8003aa6:	bf00      	nop
 8003aa8:	2000000c 	.word	0x2000000c

08003aac <_free_r>:
 8003aac:	b538      	push	{r3, r4, r5, lr}
 8003aae:	4605      	mov	r5, r0
 8003ab0:	2900      	cmp	r1, #0
 8003ab2:	d045      	beq.n	8003b40 <_free_r+0x94>
 8003ab4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003ab8:	1f0c      	subs	r4, r1, #4
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	bfb8      	it	lt
 8003abe:	18e4      	addlt	r4, r4, r3
 8003ac0:	f001 f9ac 	bl	8004e1c <__malloc_lock>
 8003ac4:	4a1f      	ldr	r2, [pc, #124]	; (8003b44 <_free_r+0x98>)
 8003ac6:	6813      	ldr	r3, [r2, #0]
 8003ac8:	4610      	mov	r0, r2
 8003aca:	b933      	cbnz	r3, 8003ada <_free_r+0x2e>
 8003acc:	6063      	str	r3, [r4, #4]
 8003ace:	6014      	str	r4, [r2, #0]
 8003ad0:	4628      	mov	r0, r5
 8003ad2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003ad6:	f001 b9a2 	b.w	8004e1e <__malloc_unlock>
 8003ada:	42a3      	cmp	r3, r4
 8003adc:	d90c      	bls.n	8003af8 <_free_r+0x4c>
 8003ade:	6821      	ldr	r1, [r4, #0]
 8003ae0:	1862      	adds	r2, r4, r1
 8003ae2:	4293      	cmp	r3, r2
 8003ae4:	bf04      	itt	eq
 8003ae6:	681a      	ldreq	r2, [r3, #0]
 8003ae8:	685b      	ldreq	r3, [r3, #4]
 8003aea:	6063      	str	r3, [r4, #4]
 8003aec:	bf04      	itt	eq
 8003aee:	1852      	addeq	r2, r2, r1
 8003af0:	6022      	streq	r2, [r4, #0]
 8003af2:	6004      	str	r4, [r0, #0]
 8003af4:	e7ec      	b.n	8003ad0 <_free_r+0x24>
 8003af6:	4613      	mov	r3, r2
 8003af8:	685a      	ldr	r2, [r3, #4]
 8003afa:	b10a      	cbz	r2, 8003b00 <_free_r+0x54>
 8003afc:	42a2      	cmp	r2, r4
 8003afe:	d9fa      	bls.n	8003af6 <_free_r+0x4a>
 8003b00:	6819      	ldr	r1, [r3, #0]
 8003b02:	1858      	adds	r0, r3, r1
 8003b04:	42a0      	cmp	r0, r4
 8003b06:	d10b      	bne.n	8003b20 <_free_r+0x74>
 8003b08:	6820      	ldr	r0, [r4, #0]
 8003b0a:	4401      	add	r1, r0
 8003b0c:	1858      	adds	r0, r3, r1
 8003b0e:	4282      	cmp	r2, r0
 8003b10:	6019      	str	r1, [r3, #0]
 8003b12:	d1dd      	bne.n	8003ad0 <_free_r+0x24>
 8003b14:	6810      	ldr	r0, [r2, #0]
 8003b16:	6852      	ldr	r2, [r2, #4]
 8003b18:	605a      	str	r2, [r3, #4]
 8003b1a:	4401      	add	r1, r0
 8003b1c:	6019      	str	r1, [r3, #0]
 8003b1e:	e7d7      	b.n	8003ad0 <_free_r+0x24>
 8003b20:	d902      	bls.n	8003b28 <_free_r+0x7c>
 8003b22:	230c      	movs	r3, #12
 8003b24:	602b      	str	r3, [r5, #0]
 8003b26:	e7d3      	b.n	8003ad0 <_free_r+0x24>
 8003b28:	6820      	ldr	r0, [r4, #0]
 8003b2a:	1821      	adds	r1, r4, r0
 8003b2c:	428a      	cmp	r2, r1
 8003b2e:	bf04      	itt	eq
 8003b30:	6811      	ldreq	r1, [r2, #0]
 8003b32:	6852      	ldreq	r2, [r2, #4]
 8003b34:	6062      	str	r2, [r4, #4]
 8003b36:	bf04      	itt	eq
 8003b38:	1809      	addeq	r1, r1, r0
 8003b3a:	6021      	streq	r1, [r4, #0]
 8003b3c:	605c      	str	r4, [r3, #4]
 8003b3e:	e7c7      	b.n	8003ad0 <_free_r+0x24>
 8003b40:	bd38      	pop	{r3, r4, r5, pc}
 8003b42:	bf00      	nop
 8003b44:	20000208 	.word	0x20000208

08003b48 <_malloc_r>:
 8003b48:	b570      	push	{r4, r5, r6, lr}
 8003b4a:	1ccd      	adds	r5, r1, #3
 8003b4c:	f025 0503 	bic.w	r5, r5, #3
 8003b50:	3508      	adds	r5, #8
 8003b52:	2d0c      	cmp	r5, #12
 8003b54:	bf38      	it	cc
 8003b56:	250c      	movcc	r5, #12
 8003b58:	2d00      	cmp	r5, #0
 8003b5a:	4606      	mov	r6, r0
 8003b5c:	db01      	blt.n	8003b62 <_malloc_r+0x1a>
 8003b5e:	42a9      	cmp	r1, r5
 8003b60:	d903      	bls.n	8003b6a <_malloc_r+0x22>
 8003b62:	230c      	movs	r3, #12
 8003b64:	6033      	str	r3, [r6, #0]
 8003b66:	2000      	movs	r0, #0
 8003b68:	bd70      	pop	{r4, r5, r6, pc}
 8003b6a:	f001 f957 	bl	8004e1c <__malloc_lock>
 8003b6e:	4a23      	ldr	r2, [pc, #140]	; (8003bfc <_malloc_r+0xb4>)
 8003b70:	6814      	ldr	r4, [r2, #0]
 8003b72:	4621      	mov	r1, r4
 8003b74:	b991      	cbnz	r1, 8003b9c <_malloc_r+0x54>
 8003b76:	4c22      	ldr	r4, [pc, #136]	; (8003c00 <_malloc_r+0xb8>)
 8003b78:	6823      	ldr	r3, [r4, #0]
 8003b7a:	b91b      	cbnz	r3, 8003b84 <_malloc_r+0x3c>
 8003b7c:	4630      	mov	r0, r6
 8003b7e:	f000 fe7f 	bl	8004880 <_sbrk_r>
 8003b82:	6020      	str	r0, [r4, #0]
 8003b84:	4629      	mov	r1, r5
 8003b86:	4630      	mov	r0, r6
 8003b88:	f000 fe7a 	bl	8004880 <_sbrk_r>
 8003b8c:	1c43      	adds	r3, r0, #1
 8003b8e:	d126      	bne.n	8003bde <_malloc_r+0x96>
 8003b90:	230c      	movs	r3, #12
 8003b92:	6033      	str	r3, [r6, #0]
 8003b94:	4630      	mov	r0, r6
 8003b96:	f001 f942 	bl	8004e1e <__malloc_unlock>
 8003b9a:	e7e4      	b.n	8003b66 <_malloc_r+0x1e>
 8003b9c:	680b      	ldr	r3, [r1, #0]
 8003b9e:	1b5b      	subs	r3, r3, r5
 8003ba0:	d41a      	bmi.n	8003bd8 <_malloc_r+0x90>
 8003ba2:	2b0b      	cmp	r3, #11
 8003ba4:	d90f      	bls.n	8003bc6 <_malloc_r+0x7e>
 8003ba6:	600b      	str	r3, [r1, #0]
 8003ba8:	50cd      	str	r5, [r1, r3]
 8003baa:	18cc      	adds	r4, r1, r3
 8003bac:	4630      	mov	r0, r6
 8003bae:	f001 f936 	bl	8004e1e <__malloc_unlock>
 8003bb2:	f104 000b 	add.w	r0, r4, #11
 8003bb6:	1d23      	adds	r3, r4, #4
 8003bb8:	f020 0007 	bic.w	r0, r0, #7
 8003bbc:	1ac3      	subs	r3, r0, r3
 8003bbe:	d01b      	beq.n	8003bf8 <_malloc_r+0xb0>
 8003bc0:	425a      	negs	r2, r3
 8003bc2:	50e2      	str	r2, [r4, r3]
 8003bc4:	bd70      	pop	{r4, r5, r6, pc}
 8003bc6:	428c      	cmp	r4, r1
 8003bc8:	bf0d      	iteet	eq
 8003bca:	6863      	ldreq	r3, [r4, #4]
 8003bcc:	684b      	ldrne	r3, [r1, #4]
 8003bce:	6063      	strne	r3, [r4, #4]
 8003bd0:	6013      	streq	r3, [r2, #0]
 8003bd2:	bf18      	it	ne
 8003bd4:	460c      	movne	r4, r1
 8003bd6:	e7e9      	b.n	8003bac <_malloc_r+0x64>
 8003bd8:	460c      	mov	r4, r1
 8003bda:	6849      	ldr	r1, [r1, #4]
 8003bdc:	e7ca      	b.n	8003b74 <_malloc_r+0x2c>
 8003bde:	1cc4      	adds	r4, r0, #3
 8003be0:	f024 0403 	bic.w	r4, r4, #3
 8003be4:	42a0      	cmp	r0, r4
 8003be6:	d005      	beq.n	8003bf4 <_malloc_r+0xac>
 8003be8:	1a21      	subs	r1, r4, r0
 8003bea:	4630      	mov	r0, r6
 8003bec:	f000 fe48 	bl	8004880 <_sbrk_r>
 8003bf0:	3001      	adds	r0, #1
 8003bf2:	d0cd      	beq.n	8003b90 <_malloc_r+0x48>
 8003bf4:	6025      	str	r5, [r4, #0]
 8003bf6:	e7d9      	b.n	8003bac <_malloc_r+0x64>
 8003bf8:	bd70      	pop	{r4, r5, r6, pc}
 8003bfa:	bf00      	nop
 8003bfc:	20000208 	.word	0x20000208
 8003c00:	2000020c 	.word	0x2000020c

08003c04 <__sfputc_r>:
 8003c04:	6893      	ldr	r3, [r2, #8]
 8003c06:	3b01      	subs	r3, #1
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	b410      	push	{r4}
 8003c0c:	6093      	str	r3, [r2, #8]
 8003c0e:	da09      	bge.n	8003c24 <__sfputc_r+0x20>
 8003c10:	6994      	ldr	r4, [r2, #24]
 8003c12:	42a3      	cmp	r3, r4
 8003c14:	db02      	blt.n	8003c1c <__sfputc_r+0x18>
 8003c16:	b2cb      	uxtb	r3, r1
 8003c18:	2b0a      	cmp	r3, #10
 8003c1a:	d103      	bne.n	8003c24 <__sfputc_r+0x20>
 8003c1c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003c20:	f7ff bc6e 	b.w	8003500 <__swbuf_r>
 8003c24:	6813      	ldr	r3, [r2, #0]
 8003c26:	1c58      	adds	r0, r3, #1
 8003c28:	6010      	str	r0, [r2, #0]
 8003c2a:	7019      	strb	r1, [r3, #0]
 8003c2c:	b2c8      	uxtb	r0, r1
 8003c2e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003c32:	4770      	bx	lr

08003c34 <__sfputs_r>:
 8003c34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c36:	4606      	mov	r6, r0
 8003c38:	460f      	mov	r7, r1
 8003c3a:	4614      	mov	r4, r2
 8003c3c:	18d5      	adds	r5, r2, r3
 8003c3e:	42ac      	cmp	r4, r5
 8003c40:	d101      	bne.n	8003c46 <__sfputs_r+0x12>
 8003c42:	2000      	movs	r0, #0
 8003c44:	e007      	b.n	8003c56 <__sfputs_r+0x22>
 8003c46:	463a      	mov	r2, r7
 8003c48:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003c4c:	4630      	mov	r0, r6
 8003c4e:	f7ff ffd9 	bl	8003c04 <__sfputc_r>
 8003c52:	1c43      	adds	r3, r0, #1
 8003c54:	d1f3      	bne.n	8003c3e <__sfputs_r+0xa>
 8003c56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08003c58 <_vfiprintf_r>:
 8003c58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003c5c:	b09d      	sub	sp, #116	; 0x74
 8003c5e:	460c      	mov	r4, r1
 8003c60:	4617      	mov	r7, r2
 8003c62:	9303      	str	r3, [sp, #12]
 8003c64:	4606      	mov	r6, r0
 8003c66:	b118      	cbz	r0, 8003c70 <_vfiprintf_r+0x18>
 8003c68:	6983      	ldr	r3, [r0, #24]
 8003c6a:	b90b      	cbnz	r3, 8003c70 <_vfiprintf_r+0x18>
 8003c6c:	f7ff fe0c 	bl	8003888 <__sinit>
 8003c70:	4b7c      	ldr	r3, [pc, #496]	; (8003e64 <_vfiprintf_r+0x20c>)
 8003c72:	429c      	cmp	r4, r3
 8003c74:	d157      	bne.n	8003d26 <_vfiprintf_r+0xce>
 8003c76:	6874      	ldr	r4, [r6, #4]
 8003c78:	89a3      	ldrh	r3, [r4, #12]
 8003c7a:	0718      	lsls	r0, r3, #28
 8003c7c:	d55d      	bpl.n	8003d3a <_vfiprintf_r+0xe2>
 8003c7e:	6923      	ldr	r3, [r4, #16]
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d05a      	beq.n	8003d3a <_vfiprintf_r+0xe2>
 8003c84:	2300      	movs	r3, #0
 8003c86:	9309      	str	r3, [sp, #36]	; 0x24
 8003c88:	2320      	movs	r3, #32
 8003c8a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003c8e:	2330      	movs	r3, #48	; 0x30
 8003c90:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003c94:	f04f 0b01 	mov.w	fp, #1
 8003c98:	46b8      	mov	r8, r7
 8003c9a:	4645      	mov	r5, r8
 8003c9c:	f815 3b01 	ldrb.w	r3, [r5], #1
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d155      	bne.n	8003d50 <_vfiprintf_r+0xf8>
 8003ca4:	ebb8 0a07 	subs.w	sl, r8, r7
 8003ca8:	d00b      	beq.n	8003cc2 <_vfiprintf_r+0x6a>
 8003caa:	4653      	mov	r3, sl
 8003cac:	463a      	mov	r2, r7
 8003cae:	4621      	mov	r1, r4
 8003cb0:	4630      	mov	r0, r6
 8003cb2:	f7ff ffbf 	bl	8003c34 <__sfputs_r>
 8003cb6:	3001      	adds	r0, #1
 8003cb8:	f000 80c4 	beq.w	8003e44 <_vfiprintf_r+0x1ec>
 8003cbc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003cbe:	4453      	add	r3, sl
 8003cc0:	9309      	str	r3, [sp, #36]	; 0x24
 8003cc2:	f898 3000 	ldrb.w	r3, [r8]
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	f000 80bc 	beq.w	8003e44 <_vfiprintf_r+0x1ec>
 8003ccc:	2300      	movs	r3, #0
 8003cce:	f04f 32ff 	mov.w	r2, #4294967295
 8003cd2:	9304      	str	r3, [sp, #16]
 8003cd4:	9307      	str	r3, [sp, #28]
 8003cd6:	9205      	str	r2, [sp, #20]
 8003cd8:	9306      	str	r3, [sp, #24]
 8003cda:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003cde:	931a      	str	r3, [sp, #104]	; 0x68
 8003ce0:	2205      	movs	r2, #5
 8003ce2:	7829      	ldrb	r1, [r5, #0]
 8003ce4:	4860      	ldr	r0, [pc, #384]	; (8003e68 <_vfiprintf_r+0x210>)
 8003ce6:	f7fc fa73 	bl	80001d0 <memchr>
 8003cea:	f105 0801 	add.w	r8, r5, #1
 8003cee:	9b04      	ldr	r3, [sp, #16]
 8003cf0:	2800      	cmp	r0, #0
 8003cf2:	d131      	bne.n	8003d58 <_vfiprintf_r+0x100>
 8003cf4:	06d9      	lsls	r1, r3, #27
 8003cf6:	bf44      	itt	mi
 8003cf8:	2220      	movmi	r2, #32
 8003cfa:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003cfe:	071a      	lsls	r2, r3, #28
 8003d00:	bf44      	itt	mi
 8003d02:	222b      	movmi	r2, #43	; 0x2b
 8003d04:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003d08:	782a      	ldrb	r2, [r5, #0]
 8003d0a:	2a2a      	cmp	r2, #42	; 0x2a
 8003d0c:	d02c      	beq.n	8003d68 <_vfiprintf_r+0x110>
 8003d0e:	9a07      	ldr	r2, [sp, #28]
 8003d10:	2100      	movs	r1, #0
 8003d12:	200a      	movs	r0, #10
 8003d14:	46a8      	mov	r8, r5
 8003d16:	3501      	adds	r5, #1
 8003d18:	f898 3000 	ldrb.w	r3, [r8]
 8003d1c:	3b30      	subs	r3, #48	; 0x30
 8003d1e:	2b09      	cmp	r3, #9
 8003d20:	d96d      	bls.n	8003dfe <_vfiprintf_r+0x1a6>
 8003d22:	b371      	cbz	r1, 8003d82 <_vfiprintf_r+0x12a>
 8003d24:	e026      	b.n	8003d74 <_vfiprintf_r+0x11c>
 8003d26:	4b51      	ldr	r3, [pc, #324]	; (8003e6c <_vfiprintf_r+0x214>)
 8003d28:	429c      	cmp	r4, r3
 8003d2a:	d101      	bne.n	8003d30 <_vfiprintf_r+0xd8>
 8003d2c:	68b4      	ldr	r4, [r6, #8]
 8003d2e:	e7a3      	b.n	8003c78 <_vfiprintf_r+0x20>
 8003d30:	4b4f      	ldr	r3, [pc, #316]	; (8003e70 <_vfiprintf_r+0x218>)
 8003d32:	429c      	cmp	r4, r3
 8003d34:	bf08      	it	eq
 8003d36:	68f4      	ldreq	r4, [r6, #12]
 8003d38:	e79e      	b.n	8003c78 <_vfiprintf_r+0x20>
 8003d3a:	4621      	mov	r1, r4
 8003d3c:	4630      	mov	r0, r6
 8003d3e:	f7ff fc31 	bl	80035a4 <__swsetup_r>
 8003d42:	2800      	cmp	r0, #0
 8003d44:	d09e      	beq.n	8003c84 <_vfiprintf_r+0x2c>
 8003d46:	f04f 30ff 	mov.w	r0, #4294967295
 8003d4a:	b01d      	add	sp, #116	; 0x74
 8003d4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003d50:	2b25      	cmp	r3, #37	; 0x25
 8003d52:	d0a7      	beq.n	8003ca4 <_vfiprintf_r+0x4c>
 8003d54:	46a8      	mov	r8, r5
 8003d56:	e7a0      	b.n	8003c9a <_vfiprintf_r+0x42>
 8003d58:	4a43      	ldr	r2, [pc, #268]	; (8003e68 <_vfiprintf_r+0x210>)
 8003d5a:	1a80      	subs	r0, r0, r2
 8003d5c:	fa0b f000 	lsl.w	r0, fp, r0
 8003d60:	4318      	orrs	r0, r3
 8003d62:	9004      	str	r0, [sp, #16]
 8003d64:	4645      	mov	r5, r8
 8003d66:	e7bb      	b.n	8003ce0 <_vfiprintf_r+0x88>
 8003d68:	9a03      	ldr	r2, [sp, #12]
 8003d6a:	1d11      	adds	r1, r2, #4
 8003d6c:	6812      	ldr	r2, [r2, #0]
 8003d6e:	9103      	str	r1, [sp, #12]
 8003d70:	2a00      	cmp	r2, #0
 8003d72:	db01      	blt.n	8003d78 <_vfiprintf_r+0x120>
 8003d74:	9207      	str	r2, [sp, #28]
 8003d76:	e004      	b.n	8003d82 <_vfiprintf_r+0x12a>
 8003d78:	4252      	negs	r2, r2
 8003d7a:	f043 0302 	orr.w	r3, r3, #2
 8003d7e:	9207      	str	r2, [sp, #28]
 8003d80:	9304      	str	r3, [sp, #16]
 8003d82:	f898 3000 	ldrb.w	r3, [r8]
 8003d86:	2b2e      	cmp	r3, #46	; 0x2e
 8003d88:	d110      	bne.n	8003dac <_vfiprintf_r+0x154>
 8003d8a:	f898 3001 	ldrb.w	r3, [r8, #1]
 8003d8e:	2b2a      	cmp	r3, #42	; 0x2a
 8003d90:	f108 0101 	add.w	r1, r8, #1
 8003d94:	d137      	bne.n	8003e06 <_vfiprintf_r+0x1ae>
 8003d96:	9b03      	ldr	r3, [sp, #12]
 8003d98:	1d1a      	adds	r2, r3, #4
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	9203      	str	r2, [sp, #12]
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	bfb8      	it	lt
 8003da2:	f04f 33ff 	movlt.w	r3, #4294967295
 8003da6:	f108 0802 	add.w	r8, r8, #2
 8003daa:	9305      	str	r3, [sp, #20]
 8003dac:	4d31      	ldr	r5, [pc, #196]	; (8003e74 <_vfiprintf_r+0x21c>)
 8003dae:	f898 1000 	ldrb.w	r1, [r8]
 8003db2:	2203      	movs	r2, #3
 8003db4:	4628      	mov	r0, r5
 8003db6:	f7fc fa0b 	bl	80001d0 <memchr>
 8003dba:	b140      	cbz	r0, 8003dce <_vfiprintf_r+0x176>
 8003dbc:	2340      	movs	r3, #64	; 0x40
 8003dbe:	1b40      	subs	r0, r0, r5
 8003dc0:	fa03 f000 	lsl.w	r0, r3, r0
 8003dc4:	9b04      	ldr	r3, [sp, #16]
 8003dc6:	4303      	orrs	r3, r0
 8003dc8:	9304      	str	r3, [sp, #16]
 8003dca:	f108 0801 	add.w	r8, r8, #1
 8003dce:	f898 1000 	ldrb.w	r1, [r8]
 8003dd2:	4829      	ldr	r0, [pc, #164]	; (8003e78 <_vfiprintf_r+0x220>)
 8003dd4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003dd8:	2206      	movs	r2, #6
 8003dda:	f108 0701 	add.w	r7, r8, #1
 8003dde:	f7fc f9f7 	bl	80001d0 <memchr>
 8003de2:	2800      	cmp	r0, #0
 8003de4:	d034      	beq.n	8003e50 <_vfiprintf_r+0x1f8>
 8003de6:	4b25      	ldr	r3, [pc, #148]	; (8003e7c <_vfiprintf_r+0x224>)
 8003de8:	bb03      	cbnz	r3, 8003e2c <_vfiprintf_r+0x1d4>
 8003dea:	9b03      	ldr	r3, [sp, #12]
 8003dec:	3307      	adds	r3, #7
 8003dee:	f023 0307 	bic.w	r3, r3, #7
 8003df2:	3308      	adds	r3, #8
 8003df4:	9303      	str	r3, [sp, #12]
 8003df6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003df8:	444b      	add	r3, r9
 8003dfa:	9309      	str	r3, [sp, #36]	; 0x24
 8003dfc:	e74c      	b.n	8003c98 <_vfiprintf_r+0x40>
 8003dfe:	fb00 3202 	mla	r2, r0, r2, r3
 8003e02:	2101      	movs	r1, #1
 8003e04:	e786      	b.n	8003d14 <_vfiprintf_r+0xbc>
 8003e06:	2300      	movs	r3, #0
 8003e08:	9305      	str	r3, [sp, #20]
 8003e0a:	4618      	mov	r0, r3
 8003e0c:	250a      	movs	r5, #10
 8003e0e:	4688      	mov	r8, r1
 8003e10:	3101      	adds	r1, #1
 8003e12:	f898 2000 	ldrb.w	r2, [r8]
 8003e16:	3a30      	subs	r2, #48	; 0x30
 8003e18:	2a09      	cmp	r2, #9
 8003e1a:	d903      	bls.n	8003e24 <_vfiprintf_r+0x1cc>
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d0c5      	beq.n	8003dac <_vfiprintf_r+0x154>
 8003e20:	9005      	str	r0, [sp, #20]
 8003e22:	e7c3      	b.n	8003dac <_vfiprintf_r+0x154>
 8003e24:	fb05 2000 	mla	r0, r5, r0, r2
 8003e28:	2301      	movs	r3, #1
 8003e2a:	e7f0      	b.n	8003e0e <_vfiprintf_r+0x1b6>
 8003e2c:	ab03      	add	r3, sp, #12
 8003e2e:	9300      	str	r3, [sp, #0]
 8003e30:	4622      	mov	r2, r4
 8003e32:	4b13      	ldr	r3, [pc, #76]	; (8003e80 <_vfiprintf_r+0x228>)
 8003e34:	a904      	add	r1, sp, #16
 8003e36:	4630      	mov	r0, r6
 8003e38:	f3af 8000 	nop.w
 8003e3c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8003e40:	4681      	mov	r9, r0
 8003e42:	d1d8      	bne.n	8003df6 <_vfiprintf_r+0x19e>
 8003e44:	89a3      	ldrh	r3, [r4, #12]
 8003e46:	065b      	lsls	r3, r3, #25
 8003e48:	f53f af7d 	bmi.w	8003d46 <_vfiprintf_r+0xee>
 8003e4c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003e4e:	e77c      	b.n	8003d4a <_vfiprintf_r+0xf2>
 8003e50:	ab03      	add	r3, sp, #12
 8003e52:	9300      	str	r3, [sp, #0]
 8003e54:	4622      	mov	r2, r4
 8003e56:	4b0a      	ldr	r3, [pc, #40]	; (8003e80 <_vfiprintf_r+0x228>)
 8003e58:	a904      	add	r1, sp, #16
 8003e5a:	4630      	mov	r0, r6
 8003e5c:	f000 f888 	bl	8003f70 <_printf_i>
 8003e60:	e7ec      	b.n	8003e3c <_vfiprintf_r+0x1e4>
 8003e62:	bf00      	nop
 8003e64:	08004fc4 	.word	0x08004fc4
 8003e68:	08005004 	.word	0x08005004
 8003e6c:	08004fe4 	.word	0x08004fe4
 8003e70:	08004fa4 	.word	0x08004fa4
 8003e74:	0800500a 	.word	0x0800500a
 8003e78:	0800500e 	.word	0x0800500e
 8003e7c:	00000000 	.word	0x00000000
 8003e80:	08003c35 	.word	0x08003c35

08003e84 <_printf_common>:
 8003e84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003e88:	4691      	mov	r9, r2
 8003e8a:	461f      	mov	r7, r3
 8003e8c:	688a      	ldr	r2, [r1, #8]
 8003e8e:	690b      	ldr	r3, [r1, #16]
 8003e90:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003e94:	4293      	cmp	r3, r2
 8003e96:	bfb8      	it	lt
 8003e98:	4613      	movlt	r3, r2
 8003e9a:	f8c9 3000 	str.w	r3, [r9]
 8003e9e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003ea2:	4606      	mov	r6, r0
 8003ea4:	460c      	mov	r4, r1
 8003ea6:	b112      	cbz	r2, 8003eae <_printf_common+0x2a>
 8003ea8:	3301      	adds	r3, #1
 8003eaa:	f8c9 3000 	str.w	r3, [r9]
 8003eae:	6823      	ldr	r3, [r4, #0]
 8003eb0:	0699      	lsls	r1, r3, #26
 8003eb2:	bf42      	ittt	mi
 8003eb4:	f8d9 3000 	ldrmi.w	r3, [r9]
 8003eb8:	3302      	addmi	r3, #2
 8003eba:	f8c9 3000 	strmi.w	r3, [r9]
 8003ebe:	6825      	ldr	r5, [r4, #0]
 8003ec0:	f015 0506 	ands.w	r5, r5, #6
 8003ec4:	d107      	bne.n	8003ed6 <_printf_common+0x52>
 8003ec6:	f104 0a19 	add.w	sl, r4, #25
 8003eca:	68e3      	ldr	r3, [r4, #12]
 8003ecc:	f8d9 2000 	ldr.w	r2, [r9]
 8003ed0:	1a9b      	subs	r3, r3, r2
 8003ed2:	429d      	cmp	r5, r3
 8003ed4:	db29      	blt.n	8003f2a <_printf_common+0xa6>
 8003ed6:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8003eda:	6822      	ldr	r2, [r4, #0]
 8003edc:	3300      	adds	r3, #0
 8003ede:	bf18      	it	ne
 8003ee0:	2301      	movne	r3, #1
 8003ee2:	0692      	lsls	r2, r2, #26
 8003ee4:	d42e      	bmi.n	8003f44 <_printf_common+0xc0>
 8003ee6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003eea:	4639      	mov	r1, r7
 8003eec:	4630      	mov	r0, r6
 8003eee:	47c0      	blx	r8
 8003ef0:	3001      	adds	r0, #1
 8003ef2:	d021      	beq.n	8003f38 <_printf_common+0xb4>
 8003ef4:	6823      	ldr	r3, [r4, #0]
 8003ef6:	68e5      	ldr	r5, [r4, #12]
 8003ef8:	f8d9 2000 	ldr.w	r2, [r9]
 8003efc:	f003 0306 	and.w	r3, r3, #6
 8003f00:	2b04      	cmp	r3, #4
 8003f02:	bf08      	it	eq
 8003f04:	1aad      	subeq	r5, r5, r2
 8003f06:	68a3      	ldr	r3, [r4, #8]
 8003f08:	6922      	ldr	r2, [r4, #16]
 8003f0a:	bf0c      	ite	eq
 8003f0c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003f10:	2500      	movne	r5, #0
 8003f12:	4293      	cmp	r3, r2
 8003f14:	bfc4      	itt	gt
 8003f16:	1a9b      	subgt	r3, r3, r2
 8003f18:	18ed      	addgt	r5, r5, r3
 8003f1a:	f04f 0900 	mov.w	r9, #0
 8003f1e:	341a      	adds	r4, #26
 8003f20:	454d      	cmp	r5, r9
 8003f22:	d11b      	bne.n	8003f5c <_printf_common+0xd8>
 8003f24:	2000      	movs	r0, #0
 8003f26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003f2a:	2301      	movs	r3, #1
 8003f2c:	4652      	mov	r2, sl
 8003f2e:	4639      	mov	r1, r7
 8003f30:	4630      	mov	r0, r6
 8003f32:	47c0      	blx	r8
 8003f34:	3001      	adds	r0, #1
 8003f36:	d103      	bne.n	8003f40 <_printf_common+0xbc>
 8003f38:	f04f 30ff 	mov.w	r0, #4294967295
 8003f3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003f40:	3501      	adds	r5, #1
 8003f42:	e7c2      	b.n	8003eca <_printf_common+0x46>
 8003f44:	18e1      	adds	r1, r4, r3
 8003f46:	1c5a      	adds	r2, r3, #1
 8003f48:	2030      	movs	r0, #48	; 0x30
 8003f4a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003f4e:	4422      	add	r2, r4
 8003f50:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003f54:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003f58:	3302      	adds	r3, #2
 8003f5a:	e7c4      	b.n	8003ee6 <_printf_common+0x62>
 8003f5c:	2301      	movs	r3, #1
 8003f5e:	4622      	mov	r2, r4
 8003f60:	4639      	mov	r1, r7
 8003f62:	4630      	mov	r0, r6
 8003f64:	47c0      	blx	r8
 8003f66:	3001      	adds	r0, #1
 8003f68:	d0e6      	beq.n	8003f38 <_printf_common+0xb4>
 8003f6a:	f109 0901 	add.w	r9, r9, #1
 8003f6e:	e7d7      	b.n	8003f20 <_printf_common+0x9c>

08003f70 <_printf_i>:
 8003f70:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003f74:	4617      	mov	r7, r2
 8003f76:	7e0a      	ldrb	r2, [r1, #24]
 8003f78:	b085      	sub	sp, #20
 8003f7a:	2a6e      	cmp	r2, #110	; 0x6e
 8003f7c:	4698      	mov	r8, r3
 8003f7e:	4606      	mov	r6, r0
 8003f80:	460c      	mov	r4, r1
 8003f82:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003f84:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 8003f88:	f000 80bc 	beq.w	8004104 <_printf_i+0x194>
 8003f8c:	d81a      	bhi.n	8003fc4 <_printf_i+0x54>
 8003f8e:	2a63      	cmp	r2, #99	; 0x63
 8003f90:	d02e      	beq.n	8003ff0 <_printf_i+0x80>
 8003f92:	d80a      	bhi.n	8003faa <_printf_i+0x3a>
 8003f94:	2a00      	cmp	r2, #0
 8003f96:	f000 80c8 	beq.w	800412a <_printf_i+0x1ba>
 8003f9a:	2a58      	cmp	r2, #88	; 0x58
 8003f9c:	f000 808a 	beq.w	80040b4 <_printf_i+0x144>
 8003fa0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003fa4:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 8003fa8:	e02a      	b.n	8004000 <_printf_i+0x90>
 8003faa:	2a64      	cmp	r2, #100	; 0x64
 8003fac:	d001      	beq.n	8003fb2 <_printf_i+0x42>
 8003fae:	2a69      	cmp	r2, #105	; 0x69
 8003fb0:	d1f6      	bne.n	8003fa0 <_printf_i+0x30>
 8003fb2:	6821      	ldr	r1, [r4, #0]
 8003fb4:	681a      	ldr	r2, [r3, #0]
 8003fb6:	f011 0f80 	tst.w	r1, #128	; 0x80
 8003fba:	d023      	beq.n	8004004 <_printf_i+0x94>
 8003fbc:	1d11      	adds	r1, r2, #4
 8003fbe:	6019      	str	r1, [r3, #0]
 8003fc0:	6813      	ldr	r3, [r2, #0]
 8003fc2:	e027      	b.n	8004014 <_printf_i+0xa4>
 8003fc4:	2a73      	cmp	r2, #115	; 0x73
 8003fc6:	f000 80b4 	beq.w	8004132 <_printf_i+0x1c2>
 8003fca:	d808      	bhi.n	8003fde <_printf_i+0x6e>
 8003fcc:	2a6f      	cmp	r2, #111	; 0x6f
 8003fce:	d02a      	beq.n	8004026 <_printf_i+0xb6>
 8003fd0:	2a70      	cmp	r2, #112	; 0x70
 8003fd2:	d1e5      	bne.n	8003fa0 <_printf_i+0x30>
 8003fd4:	680a      	ldr	r2, [r1, #0]
 8003fd6:	f042 0220 	orr.w	r2, r2, #32
 8003fda:	600a      	str	r2, [r1, #0]
 8003fdc:	e003      	b.n	8003fe6 <_printf_i+0x76>
 8003fde:	2a75      	cmp	r2, #117	; 0x75
 8003fe0:	d021      	beq.n	8004026 <_printf_i+0xb6>
 8003fe2:	2a78      	cmp	r2, #120	; 0x78
 8003fe4:	d1dc      	bne.n	8003fa0 <_printf_i+0x30>
 8003fe6:	2278      	movs	r2, #120	; 0x78
 8003fe8:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 8003fec:	496e      	ldr	r1, [pc, #440]	; (80041a8 <_printf_i+0x238>)
 8003fee:	e064      	b.n	80040ba <_printf_i+0x14a>
 8003ff0:	681a      	ldr	r2, [r3, #0]
 8003ff2:	f101 0542 	add.w	r5, r1, #66	; 0x42
 8003ff6:	1d11      	adds	r1, r2, #4
 8003ff8:	6019      	str	r1, [r3, #0]
 8003ffa:	6813      	ldr	r3, [r2, #0]
 8003ffc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004000:	2301      	movs	r3, #1
 8004002:	e0a3      	b.n	800414c <_printf_i+0x1dc>
 8004004:	f011 0f40 	tst.w	r1, #64	; 0x40
 8004008:	f102 0104 	add.w	r1, r2, #4
 800400c:	6019      	str	r1, [r3, #0]
 800400e:	d0d7      	beq.n	8003fc0 <_printf_i+0x50>
 8004010:	f9b2 3000 	ldrsh.w	r3, [r2]
 8004014:	2b00      	cmp	r3, #0
 8004016:	da03      	bge.n	8004020 <_printf_i+0xb0>
 8004018:	222d      	movs	r2, #45	; 0x2d
 800401a:	425b      	negs	r3, r3
 800401c:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8004020:	4962      	ldr	r1, [pc, #392]	; (80041ac <_printf_i+0x23c>)
 8004022:	220a      	movs	r2, #10
 8004024:	e017      	b.n	8004056 <_printf_i+0xe6>
 8004026:	6820      	ldr	r0, [r4, #0]
 8004028:	6819      	ldr	r1, [r3, #0]
 800402a:	f010 0f80 	tst.w	r0, #128	; 0x80
 800402e:	d003      	beq.n	8004038 <_printf_i+0xc8>
 8004030:	1d08      	adds	r0, r1, #4
 8004032:	6018      	str	r0, [r3, #0]
 8004034:	680b      	ldr	r3, [r1, #0]
 8004036:	e006      	b.n	8004046 <_printf_i+0xd6>
 8004038:	f010 0f40 	tst.w	r0, #64	; 0x40
 800403c:	f101 0004 	add.w	r0, r1, #4
 8004040:	6018      	str	r0, [r3, #0]
 8004042:	d0f7      	beq.n	8004034 <_printf_i+0xc4>
 8004044:	880b      	ldrh	r3, [r1, #0]
 8004046:	4959      	ldr	r1, [pc, #356]	; (80041ac <_printf_i+0x23c>)
 8004048:	2a6f      	cmp	r2, #111	; 0x6f
 800404a:	bf14      	ite	ne
 800404c:	220a      	movne	r2, #10
 800404e:	2208      	moveq	r2, #8
 8004050:	2000      	movs	r0, #0
 8004052:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 8004056:	6865      	ldr	r5, [r4, #4]
 8004058:	60a5      	str	r5, [r4, #8]
 800405a:	2d00      	cmp	r5, #0
 800405c:	f2c0 809c 	blt.w	8004198 <_printf_i+0x228>
 8004060:	6820      	ldr	r0, [r4, #0]
 8004062:	f020 0004 	bic.w	r0, r0, #4
 8004066:	6020      	str	r0, [r4, #0]
 8004068:	2b00      	cmp	r3, #0
 800406a:	d13f      	bne.n	80040ec <_printf_i+0x17c>
 800406c:	2d00      	cmp	r5, #0
 800406e:	f040 8095 	bne.w	800419c <_printf_i+0x22c>
 8004072:	4675      	mov	r5, lr
 8004074:	2a08      	cmp	r2, #8
 8004076:	d10b      	bne.n	8004090 <_printf_i+0x120>
 8004078:	6823      	ldr	r3, [r4, #0]
 800407a:	07da      	lsls	r2, r3, #31
 800407c:	d508      	bpl.n	8004090 <_printf_i+0x120>
 800407e:	6923      	ldr	r3, [r4, #16]
 8004080:	6862      	ldr	r2, [r4, #4]
 8004082:	429a      	cmp	r2, r3
 8004084:	bfde      	ittt	le
 8004086:	2330      	movle	r3, #48	; 0x30
 8004088:	f805 3c01 	strble.w	r3, [r5, #-1]
 800408c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004090:	ebae 0305 	sub.w	r3, lr, r5
 8004094:	6123      	str	r3, [r4, #16]
 8004096:	f8cd 8000 	str.w	r8, [sp]
 800409a:	463b      	mov	r3, r7
 800409c:	aa03      	add	r2, sp, #12
 800409e:	4621      	mov	r1, r4
 80040a0:	4630      	mov	r0, r6
 80040a2:	f7ff feef 	bl	8003e84 <_printf_common>
 80040a6:	3001      	adds	r0, #1
 80040a8:	d155      	bne.n	8004156 <_printf_i+0x1e6>
 80040aa:	f04f 30ff 	mov.w	r0, #4294967295
 80040ae:	b005      	add	sp, #20
 80040b0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80040b4:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 80040b8:	493c      	ldr	r1, [pc, #240]	; (80041ac <_printf_i+0x23c>)
 80040ba:	6822      	ldr	r2, [r4, #0]
 80040bc:	6818      	ldr	r0, [r3, #0]
 80040be:	f012 0f80 	tst.w	r2, #128	; 0x80
 80040c2:	f100 0504 	add.w	r5, r0, #4
 80040c6:	601d      	str	r5, [r3, #0]
 80040c8:	d001      	beq.n	80040ce <_printf_i+0x15e>
 80040ca:	6803      	ldr	r3, [r0, #0]
 80040cc:	e002      	b.n	80040d4 <_printf_i+0x164>
 80040ce:	0655      	lsls	r5, r2, #25
 80040d0:	d5fb      	bpl.n	80040ca <_printf_i+0x15a>
 80040d2:	8803      	ldrh	r3, [r0, #0]
 80040d4:	07d0      	lsls	r0, r2, #31
 80040d6:	bf44      	itt	mi
 80040d8:	f042 0220 	orrmi.w	r2, r2, #32
 80040dc:	6022      	strmi	r2, [r4, #0]
 80040de:	b91b      	cbnz	r3, 80040e8 <_printf_i+0x178>
 80040e0:	6822      	ldr	r2, [r4, #0]
 80040e2:	f022 0220 	bic.w	r2, r2, #32
 80040e6:	6022      	str	r2, [r4, #0]
 80040e8:	2210      	movs	r2, #16
 80040ea:	e7b1      	b.n	8004050 <_printf_i+0xe0>
 80040ec:	4675      	mov	r5, lr
 80040ee:	fbb3 f0f2 	udiv	r0, r3, r2
 80040f2:	fb02 3310 	mls	r3, r2, r0, r3
 80040f6:	5ccb      	ldrb	r3, [r1, r3]
 80040f8:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80040fc:	4603      	mov	r3, r0
 80040fe:	2800      	cmp	r0, #0
 8004100:	d1f5      	bne.n	80040ee <_printf_i+0x17e>
 8004102:	e7b7      	b.n	8004074 <_printf_i+0x104>
 8004104:	6808      	ldr	r0, [r1, #0]
 8004106:	681a      	ldr	r2, [r3, #0]
 8004108:	6949      	ldr	r1, [r1, #20]
 800410a:	f010 0f80 	tst.w	r0, #128	; 0x80
 800410e:	d004      	beq.n	800411a <_printf_i+0x1aa>
 8004110:	1d10      	adds	r0, r2, #4
 8004112:	6018      	str	r0, [r3, #0]
 8004114:	6813      	ldr	r3, [r2, #0]
 8004116:	6019      	str	r1, [r3, #0]
 8004118:	e007      	b.n	800412a <_printf_i+0x1ba>
 800411a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800411e:	f102 0004 	add.w	r0, r2, #4
 8004122:	6018      	str	r0, [r3, #0]
 8004124:	6813      	ldr	r3, [r2, #0]
 8004126:	d0f6      	beq.n	8004116 <_printf_i+0x1a6>
 8004128:	8019      	strh	r1, [r3, #0]
 800412a:	2300      	movs	r3, #0
 800412c:	6123      	str	r3, [r4, #16]
 800412e:	4675      	mov	r5, lr
 8004130:	e7b1      	b.n	8004096 <_printf_i+0x126>
 8004132:	681a      	ldr	r2, [r3, #0]
 8004134:	1d11      	adds	r1, r2, #4
 8004136:	6019      	str	r1, [r3, #0]
 8004138:	6815      	ldr	r5, [r2, #0]
 800413a:	6862      	ldr	r2, [r4, #4]
 800413c:	2100      	movs	r1, #0
 800413e:	4628      	mov	r0, r5
 8004140:	f7fc f846 	bl	80001d0 <memchr>
 8004144:	b108      	cbz	r0, 800414a <_printf_i+0x1da>
 8004146:	1b40      	subs	r0, r0, r5
 8004148:	6060      	str	r0, [r4, #4]
 800414a:	6863      	ldr	r3, [r4, #4]
 800414c:	6123      	str	r3, [r4, #16]
 800414e:	2300      	movs	r3, #0
 8004150:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004154:	e79f      	b.n	8004096 <_printf_i+0x126>
 8004156:	6923      	ldr	r3, [r4, #16]
 8004158:	462a      	mov	r2, r5
 800415a:	4639      	mov	r1, r7
 800415c:	4630      	mov	r0, r6
 800415e:	47c0      	blx	r8
 8004160:	3001      	adds	r0, #1
 8004162:	d0a2      	beq.n	80040aa <_printf_i+0x13a>
 8004164:	6823      	ldr	r3, [r4, #0]
 8004166:	079b      	lsls	r3, r3, #30
 8004168:	d507      	bpl.n	800417a <_printf_i+0x20a>
 800416a:	2500      	movs	r5, #0
 800416c:	f104 0919 	add.w	r9, r4, #25
 8004170:	68e3      	ldr	r3, [r4, #12]
 8004172:	9a03      	ldr	r2, [sp, #12]
 8004174:	1a9b      	subs	r3, r3, r2
 8004176:	429d      	cmp	r5, r3
 8004178:	db05      	blt.n	8004186 <_printf_i+0x216>
 800417a:	68e0      	ldr	r0, [r4, #12]
 800417c:	9b03      	ldr	r3, [sp, #12]
 800417e:	4298      	cmp	r0, r3
 8004180:	bfb8      	it	lt
 8004182:	4618      	movlt	r0, r3
 8004184:	e793      	b.n	80040ae <_printf_i+0x13e>
 8004186:	2301      	movs	r3, #1
 8004188:	464a      	mov	r2, r9
 800418a:	4639      	mov	r1, r7
 800418c:	4630      	mov	r0, r6
 800418e:	47c0      	blx	r8
 8004190:	3001      	adds	r0, #1
 8004192:	d08a      	beq.n	80040aa <_printf_i+0x13a>
 8004194:	3501      	adds	r5, #1
 8004196:	e7eb      	b.n	8004170 <_printf_i+0x200>
 8004198:	2b00      	cmp	r3, #0
 800419a:	d1a7      	bne.n	80040ec <_printf_i+0x17c>
 800419c:	780b      	ldrb	r3, [r1, #0]
 800419e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80041a2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80041a6:	e765      	b.n	8004074 <_printf_i+0x104>
 80041a8:	08005026 	.word	0x08005026
 80041ac:	08005015 	.word	0x08005015

080041b0 <__svfiscanf_r>:
 80041b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80041b4:	f5ad 7d25 	sub.w	sp, sp, #660	; 0x294
 80041b8:	f10d 080c 	add.w	r8, sp, #12
 80041bc:	9301      	str	r3, [sp, #4]
 80041be:	2300      	movs	r3, #0
 80041c0:	9346      	str	r3, [sp, #280]	; 0x118
 80041c2:	9347      	str	r3, [sp, #284]	; 0x11c
 80041c4:	4ba0      	ldr	r3, [pc, #640]	; (8004448 <__svfiscanf_r+0x298>)
 80041c6:	93a2      	str	r3, [sp, #648]	; 0x288
 80041c8:	f8df 9284 	ldr.w	r9, [pc, #644]	; 8004450 <__svfiscanf_r+0x2a0>
 80041cc:	4b9f      	ldr	r3, [pc, #636]	; (800444c <__svfiscanf_r+0x29c>)
 80041ce:	f8cd 8120 	str.w	r8, [sp, #288]	; 0x120
 80041d2:	4606      	mov	r6, r0
 80041d4:	460c      	mov	r4, r1
 80041d6:	93a3      	str	r3, [sp, #652]	; 0x28c
 80041d8:	4692      	mov	sl, r2
 80041da:	270a      	movs	r7, #10
 80041dc:	f89a 3000 	ldrb.w	r3, [sl]
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	f000 812f 	beq.w	8004444 <__svfiscanf_r+0x294>
 80041e6:	f000 fde7 	bl	8004db8 <__locale_ctype_ptr>
 80041ea:	f89a b000 	ldrb.w	fp, [sl]
 80041ee:	4458      	add	r0, fp
 80041f0:	7843      	ldrb	r3, [r0, #1]
 80041f2:	f013 0308 	ands.w	r3, r3, #8
 80041f6:	d143      	bne.n	8004280 <__svfiscanf_r+0xd0>
 80041f8:	f1bb 0f25 	cmp.w	fp, #37	; 0x25
 80041fc:	f10a 0501 	add.w	r5, sl, #1
 8004200:	f040 8099 	bne.w	8004336 <__svfiscanf_r+0x186>
 8004204:	9345      	str	r3, [sp, #276]	; 0x114
 8004206:	9343      	str	r3, [sp, #268]	; 0x10c
 8004208:	f89a 3001 	ldrb.w	r3, [sl, #1]
 800420c:	2b2a      	cmp	r3, #42	; 0x2a
 800420e:	d103      	bne.n	8004218 <__svfiscanf_r+0x68>
 8004210:	2310      	movs	r3, #16
 8004212:	9343      	str	r3, [sp, #268]	; 0x10c
 8004214:	f10a 0502 	add.w	r5, sl, #2
 8004218:	7829      	ldrb	r1, [r5, #0]
 800421a:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 800421e:	2a09      	cmp	r2, #9
 8004220:	46aa      	mov	sl, r5
 8004222:	f105 0501 	add.w	r5, r5, #1
 8004226:	d941      	bls.n	80042ac <__svfiscanf_r+0xfc>
 8004228:	2203      	movs	r2, #3
 800422a:	4889      	ldr	r0, [pc, #548]	; (8004450 <__svfiscanf_r+0x2a0>)
 800422c:	f7fb ffd0 	bl	80001d0 <memchr>
 8004230:	b138      	cbz	r0, 8004242 <__svfiscanf_r+0x92>
 8004232:	eba0 0309 	sub.w	r3, r0, r9
 8004236:	2001      	movs	r0, #1
 8004238:	4098      	lsls	r0, r3
 800423a:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800423c:	4318      	orrs	r0, r3
 800423e:	9043      	str	r0, [sp, #268]	; 0x10c
 8004240:	46aa      	mov	sl, r5
 8004242:	f89a 3000 	ldrb.w	r3, [sl]
 8004246:	2b67      	cmp	r3, #103	; 0x67
 8004248:	f10a 0501 	add.w	r5, sl, #1
 800424c:	d84a      	bhi.n	80042e4 <__svfiscanf_r+0x134>
 800424e:	2b65      	cmp	r3, #101	; 0x65
 8004250:	f080 80b7 	bcs.w	80043c2 <__svfiscanf_r+0x212>
 8004254:	2b47      	cmp	r3, #71	; 0x47
 8004256:	d82f      	bhi.n	80042b8 <__svfiscanf_r+0x108>
 8004258:	2b45      	cmp	r3, #69	; 0x45
 800425a:	f080 80b2 	bcs.w	80043c2 <__svfiscanf_r+0x212>
 800425e:	2b00      	cmp	r3, #0
 8004260:	f000 8082 	beq.w	8004368 <__svfiscanf_r+0x1b8>
 8004264:	2b25      	cmp	r3, #37	; 0x25
 8004266:	d066      	beq.n	8004336 <__svfiscanf_r+0x186>
 8004268:	2303      	movs	r3, #3
 800426a:	9349      	str	r3, [sp, #292]	; 0x124
 800426c:	9744      	str	r7, [sp, #272]	; 0x110
 800426e:	e045      	b.n	80042fc <__svfiscanf_r+0x14c>
 8004270:	9947      	ldr	r1, [sp, #284]	; 0x11c
 8004272:	3101      	adds	r1, #1
 8004274:	9147      	str	r1, [sp, #284]	; 0x11c
 8004276:	6861      	ldr	r1, [r4, #4]
 8004278:	3301      	adds	r3, #1
 800427a:	3901      	subs	r1, #1
 800427c:	6061      	str	r1, [r4, #4]
 800427e:	6023      	str	r3, [r4, #0]
 8004280:	6863      	ldr	r3, [r4, #4]
 8004282:	2b00      	cmp	r3, #0
 8004284:	dd0b      	ble.n	800429e <__svfiscanf_r+0xee>
 8004286:	f000 fd97 	bl	8004db8 <__locale_ctype_ptr>
 800428a:	6823      	ldr	r3, [r4, #0]
 800428c:	7819      	ldrb	r1, [r3, #0]
 800428e:	4408      	add	r0, r1
 8004290:	7841      	ldrb	r1, [r0, #1]
 8004292:	070d      	lsls	r5, r1, #28
 8004294:	d4ec      	bmi.n	8004270 <__svfiscanf_r+0xc0>
 8004296:	f10a 0501 	add.w	r5, sl, #1
 800429a:	46aa      	mov	sl, r5
 800429c:	e79e      	b.n	80041dc <__svfiscanf_r+0x2c>
 800429e:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 80042a0:	4621      	mov	r1, r4
 80042a2:	4630      	mov	r0, r6
 80042a4:	4798      	blx	r3
 80042a6:	2800      	cmp	r0, #0
 80042a8:	d0ed      	beq.n	8004286 <__svfiscanf_r+0xd6>
 80042aa:	e7f4      	b.n	8004296 <__svfiscanf_r+0xe6>
 80042ac:	9b45      	ldr	r3, [sp, #276]	; 0x114
 80042ae:	fb07 1303 	mla	r3, r7, r3, r1
 80042b2:	3b30      	subs	r3, #48	; 0x30
 80042b4:	9345      	str	r3, [sp, #276]	; 0x114
 80042b6:	e7af      	b.n	8004218 <__svfiscanf_r+0x68>
 80042b8:	2b5b      	cmp	r3, #91	; 0x5b
 80042ba:	d061      	beq.n	8004380 <__svfiscanf_r+0x1d0>
 80042bc:	d80c      	bhi.n	80042d8 <__svfiscanf_r+0x128>
 80042be:	2b58      	cmp	r3, #88	; 0x58
 80042c0:	d1d2      	bne.n	8004268 <__svfiscanf_r+0xb8>
 80042c2:	9a43      	ldr	r2, [sp, #268]	; 0x10c
 80042c4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80042c8:	9243      	str	r2, [sp, #268]	; 0x10c
 80042ca:	2210      	movs	r2, #16
 80042cc:	9244      	str	r2, [sp, #272]	; 0x110
 80042ce:	2b6f      	cmp	r3, #111	; 0x6f
 80042d0:	bfb4      	ite	lt
 80042d2:	2303      	movlt	r3, #3
 80042d4:	2304      	movge	r3, #4
 80042d6:	e010      	b.n	80042fa <__svfiscanf_r+0x14a>
 80042d8:	2b63      	cmp	r3, #99	; 0x63
 80042da:	d05c      	beq.n	8004396 <__svfiscanf_r+0x1e6>
 80042dc:	2b64      	cmp	r3, #100	; 0x64
 80042de:	d1c3      	bne.n	8004268 <__svfiscanf_r+0xb8>
 80042e0:	9744      	str	r7, [sp, #272]	; 0x110
 80042e2:	e7f4      	b.n	80042ce <__svfiscanf_r+0x11e>
 80042e4:	2b70      	cmp	r3, #112	; 0x70
 80042e6:	d042      	beq.n	800436e <__svfiscanf_r+0x1be>
 80042e8:	d81d      	bhi.n	8004326 <__svfiscanf_r+0x176>
 80042ea:	2b6e      	cmp	r3, #110	; 0x6e
 80042ec:	d059      	beq.n	80043a2 <__svfiscanf_r+0x1f2>
 80042ee:	d843      	bhi.n	8004378 <__svfiscanf_r+0x1c8>
 80042f0:	2b69      	cmp	r3, #105	; 0x69
 80042f2:	d1b9      	bne.n	8004268 <__svfiscanf_r+0xb8>
 80042f4:	2300      	movs	r3, #0
 80042f6:	9344      	str	r3, [sp, #272]	; 0x110
 80042f8:	2303      	movs	r3, #3
 80042fa:	9349      	str	r3, [sp, #292]	; 0x124
 80042fc:	6863      	ldr	r3, [r4, #4]
 80042fe:	2b00      	cmp	r3, #0
 8004300:	dd61      	ble.n	80043c6 <__svfiscanf_r+0x216>
 8004302:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8004304:	0659      	lsls	r1, r3, #25
 8004306:	d56f      	bpl.n	80043e8 <__svfiscanf_r+0x238>
 8004308:	9b49      	ldr	r3, [sp, #292]	; 0x124
 800430a:	2b02      	cmp	r3, #2
 800430c:	dc7c      	bgt.n	8004408 <__svfiscanf_r+0x258>
 800430e:	ab01      	add	r3, sp, #4
 8004310:	4622      	mov	r2, r4
 8004312:	a943      	add	r1, sp, #268	; 0x10c
 8004314:	4630      	mov	r0, r6
 8004316:	f000 f8c7 	bl	80044a8 <_scanf_chars>
 800431a:	2801      	cmp	r0, #1
 800431c:	f000 8092 	beq.w	8004444 <__svfiscanf_r+0x294>
 8004320:	2802      	cmp	r0, #2
 8004322:	d1ba      	bne.n	800429a <__svfiscanf_r+0xea>
 8004324:	e01d      	b.n	8004362 <__svfiscanf_r+0x1b2>
 8004326:	2b75      	cmp	r3, #117	; 0x75
 8004328:	d0da      	beq.n	80042e0 <__svfiscanf_r+0x130>
 800432a:	2b78      	cmp	r3, #120	; 0x78
 800432c:	d0c9      	beq.n	80042c2 <__svfiscanf_r+0x112>
 800432e:	2b73      	cmp	r3, #115	; 0x73
 8004330:	d19a      	bne.n	8004268 <__svfiscanf_r+0xb8>
 8004332:	2302      	movs	r3, #2
 8004334:	e7e1      	b.n	80042fa <__svfiscanf_r+0x14a>
 8004336:	6863      	ldr	r3, [r4, #4]
 8004338:	2b00      	cmp	r3, #0
 800433a:	dd0c      	ble.n	8004356 <__svfiscanf_r+0x1a6>
 800433c:	6823      	ldr	r3, [r4, #0]
 800433e:	781a      	ldrb	r2, [r3, #0]
 8004340:	4593      	cmp	fp, r2
 8004342:	d17f      	bne.n	8004444 <__svfiscanf_r+0x294>
 8004344:	3301      	adds	r3, #1
 8004346:	6862      	ldr	r2, [r4, #4]
 8004348:	6023      	str	r3, [r4, #0]
 800434a:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800434c:	3a01      	subs	r2, #1
 800434e:	3301      	adds	r3, #1
 8004350:	6062      	str	r2, [r4, #4]
 8004352:	9347      	str	r3, [sp, #284]	; 0x11c
 8004354:	e7a1      	b.n	800429a <__svfiscanf_r+0xea>
 8004356:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 8004358:	4621      	mov	r1, r4
 800435a:	4630      	mov	r0, r6
 800435c:	4798      	blx	r3
 800435e:	2800      	cmp	r0, #0
 8004360:	d0ec      	beq.n	800433c <__svfiscanf_r+0x18c>
 8004362:	9846      	ldr	r0, [sp, #280]	; 0x118
 8004364:	2800      	cmp	r0, #0
 8004366:	d163      	bne.n	8004430 <__svfiscanf_r+0x280>
 8004368:	f04f 30ff 	mov.w	r0, #4294967295
 800436c:	e066      	b.n	800443c <__svfiscanf_r+0x28c>
 800436e:	9a43      	ldr	r2, [sp, #268]	; 0x10c
 8004370:	f042 0220 	orr.w	r2, r2, #32
 8004374:	9243      	str	r2, [sp, #268]	; 0x10c
 8004376:	e7a4      	b.n	80042c2 <__svfiscanf_r+0x112>
 8004378:	2308      	movs	r3, #8
 800437a:	9344      	str	r3, [sp, #272]	; 0x110
 800437c:	2304      	movs	r3, #4
 800437e:	e7bc      	b.n	80042fa <__svfiscanf_r+0x14a>
 8004380:	4629      	mov	r1, r5
 8004382:	4640      	mov	r0, r8
 8004384:	f000 fa8c 	bl	80048a0 <__sccl>
 8004388:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800438a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800438e:	9343      	str	r3, [sp, #268]	; 0x10c
 8004390:	4605      	mov	r5, r0
 8004392:	2301      	movs	r3, #1
 8004394:	e7b1      	b.n	80042fa <__svfiscanf_r+0x14a>
 8004396:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8004398:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800439c:	9343      	str	r3, [sp, #268]	; 0x10c
 800439e:	2300      	movs	r3, #0
 80043a0:	e7ab      	b.n	80042fa <__svfiscanf_r+0x14a>
 80043a2:	9a43      	ldr	r2, [sp, #268]	; 0x10c
 80043a4:	06d0      	lsls	r0, r2, #27
 80043a6:	f53f af78 	bmi.w	800429a <__svfiscanf_r+0xea>
 80043aa:	f012 0f01 	tst.w	r2, #1
 80043ae:	9a01      	ldr	r2, [sp, #4]
 80043b0:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 80043b2:	f102 0104 	add.w	r1, r2, #4
 80043b6:	9101      	str	r1, [sp, #4]
 80043b8:	6812      	ldr	r2, [r2, #0]
 80043ba:	bf14      	ite	ne
 80043bc:	8013      	strhne	r3, [r2, #0]
 80043be:	6013      	streq	r3, [r2, #0]
 80043c0:	e76b      	b.n	800429a <__svfiscanf_r+0xea>
 80043c2:	2305      	movs	r3, #5
 80043c4:	e799      	b.n	80042fa <__svfiscanf_r+0x14a>
 80043c6:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 80043c8:	4621      	mov	r1, r4
 80043ca:	4630      	mov	r0, r6
 80043cc:	4798      	blx	r3
 80043ce:	2800      	cmp	r0, #0
 80043d0:	d097      	beq.n	8004302 <__svfiscanf_r+0x152>
 80043d2:	e7c6      	b.n	8004362 <__svfiscanf_r+0x1b2>
 80043d4:	9a47      	ldr	r2, [sp, #284]	; 0x11c
 80043d6:	3201      	adds	r2, #1
 80043d8:	9247      	str	r2, [sp, #284]	; 0x11c
 80043da:	6862      	ldr	r2, [r4, #4]
 80043dc:	3a01      	subs	r2, #1
 80043de:	2a00      	cmp	r2, #0
 80043e0:	6062      	str	r2, [r4, #4]
 80043e2:	dd0a      	ble.n	80043fa <__svfiscanf_r+0x24a>
 80043e4:	3301      	adds	r3, #1
 80043e6:	6023      	str	r3, [r4, #0]
 80043e8:	f000 fce6 	bl	8004db8 <__locale_ctype_ptr>
 80043ec:	6823      	ldr	r3, [r4, #0]
 80043ee:	781a      	ldrb	r2, [r3, #0]
 80043f0:	4410      	add	r0, r2
 80043f2:	7842      	ldrb	r2, [r0, #1]
 80043f4:	0712      	lsls	r2, r2, #28
 80043f6:	d4ed      	bmi.n	80043d4 <__svfiscanf_r+0x224>
 80043f8:	e786      	b.n	8004308 <__svfiscanf_r+0x158>
 80043fa:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 80043fc:	4621      	mov	r1, r4
 80043fe:	4630      	mov	r0, r6
 8004400:	4798      	blx	r3
 8004402:	2800      	cmp	r0, #0
 8004404:	d0f0      	beq.n	80043e8 <__svfiscanf_r+0x238>
 8004406:	e7ac      	b.n	8004362 <__svfiscanf_r+0x1b2>
 8004408:	2b04      	cmp	r3, #4
 800440a:	dc06      	bgt.n	800441a <__svfiscanf_r+0x26a>
 800440c:	ab01      	add	r3, sp, #4
 800440e:	4622      	mov	r2, r4
 8004410:	a943      	add	r1, sp, #268	; 0x10c
 8004412:	4630      	mov	r0, r6
 8004414:	f000 f8ac 	bl	8004570 <_scanf_i>
 8004418:	e77f      	b.n	800431a <__svfiscanf_r+0x16a>
 800441a:	4b0e      	ldr	r3, [pc, #56]	; (8004454 <__svfiscanf_r+0x2a4>)
 800441c:	2b00      	cmp	r3, #0
 800441e:	f43f af3c 	beq.w	800429a <__svfiscanf_r+0xea>
 8004422:	ab01      	add	r3, sp, #4
 8004424:	4622      	mov	r2, r4
 8004426:	a943      	add	r1, sp, #268	; 0x10c
 8004428:	4630      	mov	r0, r6
 800442a:	f3af 8000 	nop.w
 800442e:	e774      	b.n	800431a <__svfiscanf_r+0x16a>
 8004430:	89a3      	ldrh	r3, [r4, #12]
 8004432:	f013 0f40 	tst.w	r3, #64	; 0x40
 8004436:	bf18      	it	ne
 8004438:	f04f 30ff 	movne.w	r0, #4294967295
 800443c:	f50d 7d25 	add.w	sp, sp, #660	; 0x294
 8004440:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004444:	9846      	ldr	r0, [sp, #280]	; 0x118
 8004446:	e7f9      	b.n	800443c <__svfiscanf_r+0x28c>
 8004448:	08004c45 	.word	0x08004c45
 800444c:	0800476d 	.word	0x0800476d
 8004450:	0800500a 	.word	0x0800500a
 8004454:	00000000 	.word	0x00000000

08004458 <_vfiscanf_r>:
 8004458:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800445c:	460c      	mov	r4, r1
 800445e:	4616      	mov	r6, r2
 8004460:	461f      	mov	r7, r3
 8004462:	4605      	mov	r5, r0
 8004464:	b118      	cbz	r0, 800446e <_vfiscanf_r+0x16>
 8004466:	6983      	ldr	r3, [r0, #24]
 8004468:	b90b      	cbnz	r3, 800446e <_vfiscanf_r+0x16>
 800446a:	f7ff fa0d 	bl	8003888 <__sinit>
 800446e:	4b0b      	ldr	r3, [pc, #44]	; (800449c <_vfiscanf_r+0x44>)
 8004470:	429c      	cmp	r4, r3
 8004472:	d108      	bne.n	8004486 <_vfiscanf_r+0x2e>
 8004474:	686c      	ldr	r4, [r5, #4]
 8004476:	463b      	mov	r3, r7
 8004478:	4632      	mov	r2, r6
 800447a:	4621      	mov	r1, r4
 800447c:	4628      	mov	r0, r5
 800447e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004482:	f7ff be95 	b.w	80041b0 <__svfiscanf_r>
 8004486:	4b06      	ldr	r3, [pc, #24]	; (80044a0 <_vfiscanf_r+0x48>)
 8004488:	429c      	cmp	r4, r3
 800448a:	d101      	bne.n	8004490 <_vfiscanf_r+0x38>
 800448c:	68ac      	ldr	r4, [r5, #8]
 800448e:	e7f2      	b.n	8004476 <_vfiscanf_r+0x1e>
 8004490:	4b04      	ldr	r3, [pc, #16]	; (80044a4 <_vfiscanf_r+0x4c>)
 8004492:	429c      	cmp	r4, r3
 8004494:	bf08      	it	eq
 8004496:	68ec      	ldreq	r4, [r5, #12]
 8004498:	e7ed      	b.n	8004476 <_vfiscanf_r+0x1e>
 800449a:	bf00      	nop
 800449c:	08004fc4 	.word	0x08004fc4
 80044a0:	08004fe4 	.word	0x08004fe4
 80044a4:	08004fa4 	.word	0x08004fa4

080044a8 <_scanf_chars>:
 80044a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80044ac:	4615      	mov	r5, r2
 80044ae:	688a      	ldr	r2, [r1, #8]
 80044b0:	4680      	mov	r8, r0
 80044b2:	460c      	mov	r4, r1
 80044b4:	b932      	cbnz	r2, 80044c4 <_scanf_chars+0x1c>
 80044b6:	698a      	ldr	r2, [r1, #24]
 80044b8:	2a00      	cmp	r2, #0
 80044ba:	bf0c      	ite	eq
 80044bc:	2201      	moveq	r2, #1
 80044be:	f04f 32ff 	movne.w	r2, #4294967295
 80044c2:	608a      	str	r2, [r1, #8]
 80044c4:	6822      	ldr	r2, [r4, #0]
 80044c6:	06d1      	lsls	r1, r2, #27
 80044c8:	bf5f      	itttt	pl
 80044ca:	681a      	ldrpl	r2, [r3, #0]
 80044cc:	1d11      	addpl	r1, r2, #4
 80044ce:	6019      	strpl	r1, [r3, #0]
 80044d0:	6817      	ldrpl	r7, [r2, #0]
 80044d2:	2600      	movs	r6, #0
 80044d4:	69a3      	ldr	r3, [r4, #24]
 80044d6:	b1db      	cbz	r3, 8004510 <_scanf_chars+0x68>
 80044d8:	2b01      	cmp	r3, #1
 80044da:	d107      	bne.n	80044ec <_scanf_chars+0x44>
 80044dc:	682b      	ldr	r3, [r5, #0]
 80044de:	6962      	ldr	r2, [r4, #20]
 80044e0:	781b      	ldrb	r3, [r3, #0]
 80044e2:	5cd3      	ldrb	r3, [r2, r3]
 80044e4:	b9a3      	cbnz	r3, 8004510 <_scanf_chars+0x68>
 80044e6:	2e00      	cmp	r6, #0
 80044e8:	d132      	bne.n	8004550 <_scanf_chars+0xa8>
 80044ea:	e006      	b.n	80044fa <_scanf_chars+0x52>
 80044ec:	2b02      	cmp	r3, #2
 80044ee:	d007      	beq.n	8004500 <_scanf_chars+0x58>
 80044f0:	2e00      	cmp	r6, #0
 80044f2:	d12d      	bne.n	8004550 <_scanf_chars+0xa8>
 80044f4:	69a3      	ldr	r3, [r4, #24]
 80044f6:	2b01      	cmp	r3, #1
 80044f8:	d12a      	bne.n	8004550 <_scanf_chars+0xa8>
 80044fa:	2001      	movs	r0, #1
 80044fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004500:	f000 fc5a 	bl	8004db8 <__locale_ctype_ptr>
 8004504:	682b      	ldr	r3, [r5, #0]
 8004506:	781b      	ldrb	r3, [r3, #0]
 8004508:	4418      	add	r0, r3
 800450a:	7843      	ldrb	r3, [r0, #1]
 800450c:	071b      	lsls	r3, r3, #28
 800450e:	d4ef      	bmi.n	80044f0 <_scanf_chars+0x48>
 8004510:	6823      	ldr	r3, [r4, #0]
 8004512:	06da      	lsls	r2, r3, #27
 8004514:	bf5e      	ittt	pl
 8004516:	682b      	ldrpl	r3, [r5, #0]
 8004518:	781b      	ldrbpl	r3, [r3, #0]
 800451a:	703b      	strbpl	r3, [r7, #0]
 800451c:	682a      	ldr	r2, [r5, #0]
 800451e:	686b      	ldr	r3, [r5, #4]
 8004520:	f102 0201 	add.w	r2, r2, #1
 8004524:	602a      	str	r2, [r5, #0]
 8004526:	68a2      	ldr	r2, [r4, #8]
 8004528:	f103 33ff 	add.w	r3, r3, #4294967295
 800452c:	f102 32ff 	add.w	r2, r2, #4294967295
 8004530:	606b      	str	r3, [r5, #4]
 8004532:	f106 0601 	add.w	r6, r6, #1
 8004536:	bf58      	it	pl
 8004538:	3701      	addpl	r7, #1
 800453a:	60a2      	str	r2, [r4, #8]
 800453c:	b142      	cbz	r2, 8004550 <_scanf_chars+0xa8>
 800453e:	2b00      	cmp	r3, #0
 8004540:	dcc8      	bgt.n	80044d4 <_scanf_chars+0x2c>
 8004542:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8004546:	4629      	mov	r1, r5
 8004548:	4640      	mov	r0, r8
 800454a:	4798      	blx	r3
 800454c:	2800      	cmp	r0, #0
 800454e:	d0c1      	beq.n	80044d4 <_scanf_chars+0x2c>
 8004550:	6823      	ldr	r3, [r4, #0]
 8004552:	f013 0310 	ands.w	r3, r3, #16
 8004556:	d105      	bne.n	8004564 <_scanf_chars+0xbc>
 8004558:	68e2      	ldr	r2, [r4, #12]
 800455a:	3201      	adds	r2, #1
 800455c:	60e2      	str	r2, [r4, #12]
 800455e:	69a2      	ldr	r2, [r4, #24]
 8004560:	b102      	cbz	r2, 8004564 <_scanf_chars+0xbc>
 8004562:	703b      	strb	r3, [r7, #0]
 8004564:	6923      	ldr	r3, [r4, #16]
 8004566:	441e      	add	r6, r3
 8004568:	6126      	str	r6, [r4, #16]
 800456a:	2000      	movs	r0, #0
 800456c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08004570 <_scanf_i>:
 8004570:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004574:	469a      	mov	sl, r3
 8004576:	4b74      	ldr	r3, [pc, #464]	; (8004748 <_scanf_i+0x1d8>)
 8004578:	460c      	mov	r4, r1
 800457a:	4683      	mov	fp, r0
 800457c:	4616      	mov	r6, r2
 800457e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8004582:	b087      	sub	sp, #28
 8004584:	ab03      	add	r3, sp, #12
 8004586:	68a7      	ldr	r7, [r4, #8]
 8004588:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800458c:	4b6f      	ldr	r3, [pc, #444]	; (800474c <_scanf_i+0x1dc>)
 800458e:	69a1      	ldr	r1, [r4, #24]
 8004590:	4a6f      	ldr	r2, [pc, #444]	; (8004750 <_scanf_i+0x1e0>)
 8004592:	2903      	cmp	r1, #3
 8004594:	bf18      	it	ne
 8004596:	461a      	movne	r2, r3
 8004598:	1e7b      	subs	r3, r7, #1
 800459a:	f5b3 7fae 	cmp.w	r3, #348	; 0x15c
 800459e:	bf84      	itt	hi
 80045a0:	f240 135d 	movwhi	r3, #349	; 0x15d
 80045a4:	60a3      	strhi	r3, [r4, #8]
 80045a6:	6823      	ldr	r3, [r4, #0]
 80045a8:	9200      	str	r2, [sp, #0]
 80045aa:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 80045ae:	bf88      	it	hi
 80045b0:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80045b4:	f104 091c 	add.w	r9, r4, #28
 80045b8:	6023      	str	r3, [r4, #0]
 80045ba:	bf8c      	ite	hi
 80045bc:	197f      	addhi	r7, r7, r5
 80045be:	2700      	movls	r7, #0
 80045c0:	464b      	mov	r3, r9
 80045c2:	f04f 0800 	mov.w	r8, #0
 80045c6:	9301      	str	r3, [sp, #4]
 80045c8:	6831      	ldr	r1, [r6, #0]
 80045ca:	ab03      	add	r3, sp, #12
 80045cc:	2202      	movs	r2, #2
 80045ce:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 80045d2:	7809      	ldrb	r1, [r1, #0]
 80045d4:	f7fb fdfc 	bl	80001d0 <memchr>
 80045d8:	9b01      	ldr	r3, [sp, #4]
 80045da:	b328      	cbz	r0, 8004628 <_scanf_i+0xb8>
 80045dc:	f1b8 0f01 	cmp.w	r8, #1
 80045e0:	d156      	bne.n	8004690 <_scanf_i+0x120>
 80045e2:	6862      	ldr	r2, [r4, #4]
 80045e4:	b92a      	cbnz	r2, 80045f2 <_scanf_i+0x82>
 80045e6:	2208      	movs	r2, #8
 80045e8:	6062      	str	r2, [r4, #4]
 80045ea:	6822      	ldr	r2, [r4, #0]
 80045ec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80045f0:	6022      	str	r2, [r4, #0]
 80045f2:	6822      	ldr	r2, [r4, #0]
 80045f4:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 80045f8:	6022      	str	r2, [r4, #0]
 80045fa:	68a2      	ldr	r2, [r4, #8]
 80045fc:	1e51      	subs	r1, r2, #1
 80045fe:	60a1      	str	r1, [r4, #8]
 8004600:	b192      	cbz	r2, 8004628 <_scanf_i+0xb8>
 8004602:	6832      	ldr	r2, [r6, #0]
 8004604:	1c51      	adds	r1, r2, #1
 8004606:	6031      	str	r1, [r6, #0]
 8004608:	7812      	ldrb	r2, [r2, #0]
 800460a:	701a      	strb	r2, [r3, #0]
 800460c:	1c5d      	adds	r5, r3, #1
 800460e:	6873      	ldr	r3, [r6, #4]
 8004610:	3b01      	subs	r3, #1
 8004612:	2b00      	cmp	r3, #0
 8004614:	6073      	str	r3, [r6, #4]
 8004616:	dc06      	bgt.n	8004626 <_scanf_i+0xb6>
 8004618:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800461c:	4631      	mov	r1, r6
 800461e:	4658      	mov	r0, fp
 8004620:	4798      	blx	r3
 8004622:	2800      	cmp	r0, #0
 8004624:	d176      	bne.n	8004714 <_scanf_i+0x1a4>
 8004626:	462b      	mov	r3, r5
 8004628:	f108 0801 	add.w	r8, r8, #1
 800462c:	f1b8 0f03 	cmp.w	r8, #3
 8004630:	d1c9      	bne.n	80045c6 <_scanf_i+0x56>
 8004632:	6862      	ldr	r2, [r4, #4]
 8004634:	b90a      	cbnz	r2, 800463a <_scanf_i+0xca>
 8004636:	220a      	movs	r2, #10
 8004638:	6062      	str	r2, [r4, #4]
 800463a:	6862      	ldr	r2, [r4, #4]
 800463c:	4945      	ldr	r1, [pc, #276]	; (8004754 <_scanf_i+0x1e4>)
 800463e:	6960      	ldr	r0, [r4, #20]
 8004640:	9301      	str	r3, [sp, #4]
 8004642:	1a89      	subs	r1, r1, r2
 8004644:	f000 f92c 	bl	80048a0 <__sccl>
 8004648:	9b01      	ldr	r3, [sp, #4]
 800464a:	f04f 0800 	mov.w	r8, #0
 800464e:	461d      	mov	r5, r3
 8004650:	68a3      	ldr	r3, [r4, #8]
 8004652:	2b00      	cmp	r3, #0
 8004654:	d038      	beq.n	80046c8 <_scanf_i+0x158>
 8004656:	6831      	ldr	r1, [r6, #0]
 8004658:	6960      	ldr	r0, [r4, #20]
 800465a:	780a      	ldrb	r2, [r1, #0]
 800465c:	5c80      	ldrb	r0, [r0, r2]
 800465e:	2800      	cmp	r0, #0
 8004660:	d032      	beq.n	80046c8 <_scanf_i+0x158>
 8004662:	2a30      	cmp	r2, #48	; 0x30
 8004664:	6822      	ldr	r2, [r4, #0]
 8004666:	d121      	bne.n	80046ac <_scanf_i+0x13c>
 8004668:	0510      	lsls	r0, r2, #20
 800466a:	d51f      	bpl.n	80046ac <_scanf_i+0x13c>
 800466c:	f108 0801 	add.w	r8, r8, #1
 8004670:	b117      	cbz	r7, 8004678 <_scanf_i+0x108>
 8004672:	3301      	adds	r3, #1
 8004674:	3f01      	subs	r7, #1
 8004676:	60a3      	str	r3, [r4, #8]
 8004678:	6873      	ldr	r3, [r6, #4]
 800467a:	3b01      	subs	r3, #1
 800467c:	2b00      	cmp	r3, #0
 800467e:	6073      	str	r3, [r6, #4]
 8004680:	dd1b      	ble.n	80046ba <_scanf_i+0x14a>
 8004682:	6833      	ldr	r3, [r6, #0]
 8004684:	3301      	adds	r3, #1
 8004686:	6033      	str	r3, [r6, #0]
 8004688:	68a3      	ldr	r3, [r4, #8]
 800468a:	3b01      	subs	r3, #1
 800468c:	60a3      	str	r3, [r4, #8]
 800468e:	e7df      	b.n	8004650 <_scanf_i+0xe0>
 8004690:	f1b8 0f02 	cmp.w	r8, #2
 8004694:	d1b1      	bne.n	80045fa <_scanf_i+0x8a>
 8004696:	6822      	ldr	r2, [r4, #0]
 8004698:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 800469c:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 80046a0:	d1c2      	bne.n	8004628 <_scanf_i+0xb8>
 80046a2:	2110      	movs	r1, #16
 80046a4:	6061      	str	r1, [r4, #4]
 80046a6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80046aa:	e7a5      	b.n	80045f8 <_scanf_i+0x88>
 80046ac:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 80046b0:	6022      	str	r2, [r4, #0]
 80046b2:	780b      	ldrb	r3, [r1, #0]
 80046b4:	702b      	strb	r3, [r5, #0]
 80046b6:	3501      	adds	r5, #1
 80046b8:	e7de      	b.n	8004678 <_scanf_i+0x108>
 80046ba:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80046be:	4631      	mov	r1, r6
 80046c0:	4658      	mov	r0, fp
 80046c2:	4798      	blx	r3
 80046c4:	2800      	cmp	r0, #0
 80046c6:	d0df      	beq.n	8004688 <_scanf_i+0x118>
 80046c8:	6823      	ldr	r3, [r4, #0]
 80046ca:	05d9      	lsls	r1, r3, #23
 80046cc:	d50c      	bpl.n	80046e8 <_scanf_i+0x178>
 80046ce:	454d      	cmp	r5, r9
 80046d0:	d908      	bls.n	80046e4 <_scanf_i+0x174>
 80046d2:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 80046d6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80046da:	4632      	mov	r2, r6
 80046dc:	4658      	mov	r0, fp
 80046de:	4798      	blx	r3
 80046e0:	1e6f      	subs	r7, r5, #1
 80046e2:	463d      	mov	r5, r7
 80046e4:	454d      	cmp	r5, r9
 80046e6:	d02c      	beq.n	8004742 <_scanf_i+0x1d2>
 80046e8:	6822      	ldr	r2, [r4, #0]
 80046ea:	f012 0210 	ands.w	r2, r2, #16
 80046ee:	d11e      	bne.n	800472e <_scanf_i+0x1be>
 80046f0:	702a      	strb	r2, [r5, #0]
 80046f2:	6863      	ldr	r3, [r4, #4]
 80046f4:	9e00      	ldr	r6, [sp, #0]
 80046f6:	4649      	mov	r1, r9
 80046f8:	4658      	mov	r0, fp
 80046fa:	47b0      	blx	r6
 80046fc:	6822      	ldr	r2, [r4, #0]
 80046fe:	f8da 3000 	ldr.w	r3, [sl]
 8004702:	f012 0f20 	tst.w	r2, #32
 8004706:	d008      	beq.n	800471a <_scanf_i+0x1aa>
 8004708:	1d1a      	adds	r2, r3, #4
 800470a:	f8ca 2000 	str.w	r2, [sl]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	6018      	str	r0, [r3, #0]
 8004712:	e009      	b.n	8004728 <_scanf_i+0x1b8>
 8004714:	f04f 0800 	mov.w	r8, #0
 8004718:	e7d6      	b.n	80046c8 <_scanf_i+0x158>
 800471a:	07d2      	lsls	r2, r2, #31
 800471c:	d5f4      	bpl.n	8004708 <_scanf_i+0x198>
 800471e:	1d1a      	adds	r2, r3, #4
 8004720:	f8ca 2000 	str.w	r2, [sl]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	8018      	strh	r0, [r3, #0]
 8004728:	68e3      	ldr	r3, [r4, #12]
 800472a:	3301      	adds	r3, #1
 800472c:	60e3      	str	r3, [r4, #12]
 800472e:	eba5 0509 	sub.w	r5, r5, r9
 8004732:	44a8      	add	r8, r5
 8004734:	6925      	ldr	r5, [r4, #16]
 8004736:	4445      	add	r5, r8
 8004738:	6125      	str	r5, [r4, #16]
 800473a:	2000      	movs	r0, #0
 800473c:	b007      	add	sp, #28
 800473e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004742:	2001      	movs	r0, #1
 8004744:	e7fa      	b.n	800473c <_scanf_i+0x1cc>
 8004746:	bf00      	nop
 8004748:	08004f7c 	.word	0x08004f7c
 800474c:	08004ba9 	.word	0x08004ba9
 8004750:	08004a89 	.word	0x08004a89
 8004754:	08005047 	.word	0x08005047

08004758 <lflush>:
 8004758:	8983      	ldrh	r3, [r0, #12]
 800475a:	f003 0309 	and.w	r3, r3, #9
 800475e:	2b09      	cmp	r3, #9
 8004760:	d101      	bne.n	8004766 <lflush+0xe>
 8004762:	f7ff b83f 	b.w	80037e4 <fflush>
 8004766:	2000      	movs	r0, #0
 8004768:	4770      	bx	lr
	...

0800476c <__srefill_r>:
 800476c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800476e:	460c      	mov	r4, r1
 8004770:	4605      	mov	r5, r0
 8004772:	b118      	cbz	r0, 800477c <__srefill_r+0x10>
 8004774:	6983      	ldr	r3, [r0, #24]
 8004776:	b90b      	cbnz	r3, 800477c <__srefill_r+0x10>
 8004778:	f7ff f886 	bl	8003888 <__sinit>
 800477c:	4b3b      	ldr	r3, [pc, #236]	; (800486c <__srefill_r+0x100>)
 800477e:	429c      	cmp	r4, r3
 8004780:	d10a      	bne.n	8004798 <__srefill_r+0x2c>
 8004782:	686c      	ldr	r4, [r5, #4]
 8004784:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004788:	2300      	movs	r3, #0
 800478a:	6063      	str	r3, [r4, #4]
 800478c:	b293      	uxth	r3, r2
 800478e:	069e      	lsls	r6, r3, #26
 8004790:	d50c      	bpl.n	80047ac <__srefill_r+0x40>
 8004792:	f04f 30ff 	mov.w	r0, #4294967295
 8004796:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004798:	4b35      	ldr	r3, [pc, #212]	; (8004870 <__srefill_r+0x104>)
 800479a:	429c      	cmp	r4, r3
 800479c:	d101      	bne.n	80047a2 <__srefill_r+0x36>
 800479e:	68ac      	ldr	r4, [r5, #8]
 80047a0:	e7f0      	b.n	8004784 <__srefill_r+0x18>
 80047a2:	4b34      	ldr	r3, [pc, #208]	; (8004874 <__srefill_r+0x108>)
 80047a4:	429c      	cmp	r4, r3
 80047a6:	bf08      	it	eq
 80047a8:	68ec      	ldreq	r4, [r5, #12]
 80047aa:	e7eb      	b.n	8004784 <__srefill_r+0x18>
 80047ac:	0758      	lsls	r0, r3, #29
 80047ae:	d448      	bmi.n	8004842 <__srefill_r+0xd6>
 80047b0:	06d9      	lsls	r1, r3, #27
 80047b2:	d405      	bmi.n	80047c0 <__srefill_r+0x54>
 80047b4:	2309      	movs	r3, #9
 80047b6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80047ba:	602b      	str	r3, [r5, #0]
 80047bc:	81a2      	strh	r2, [r4, #12]
 80047be:	e7e8      	b.n	8004792 <__srefill_r+0x26>
 80047c0:	071a      	lsls	r2, r3, #28
 80047c2:	d50b      	bpl.n	80047dc <__srefill_r+0x70>
 80047c4:	4621      	mov	r1, r4
 80047c6:	4628      	mov	r0, r5
 80047c8:	f7fe ffe2 	bl	8003790 <_fflush_r>
 80047cc:	2800      	cmp	r0, #0
 80047ce:	d1e0      	bne.n	8004792 <__srefill_r+0x26>
 80047d0:	89a3      	ldrh	r3, [r4, #12]
 80047d2:	60a0      	str	r0, [r4, #8]
 80047d4:	f023 0308 	bic.w	r3, r3, #8
 80047d8:	81a3      	strh	r3, [r4, #12]
 80047da:	61a0      	str	r0, [r4, #24]
 80047dc:	89a3      	ldrh	r3, [r4, #12]
 80047de:	f043 0304 	orr.w	r3, r3, #4
 80047e2:	81a3      	strh	r3, [r4, #12]
 80047e4:	6923      	ldr	r3, [r4, #16]
 80047e6:	b91b      	cbnz	r3, 80047f0 <__srefill_r+0x84>
 80047e8:	4621      	mov	r1, r4
 80047ea:	4628      	mov	r0, r5
 80047ec:	f7ff f916 	bl	8003a1c <__smakebuf_r>
 80047f0:	f9b4 700c 	ldrsh.w	r7, [r4, #12]
 80047f4:	b2be      	uxth	r6, r7
 80047f6:	07b3      	lsls	r3, r6, #30
 80047f8:	d00f      	beq.n	800481a <__srefill_r+0xae>
 80047fa:	2301      	movs	r3, #1
 80047fc:	81a3      	strh	r3, [r4, #12]
 80047fe:	4b1e      	ldr	r3, [pc, #120]	; (8004878 <__srefill_r+0x10c>)
 8004800:	491e      	ldr	r1, [pc, #120]	; (800487c <__srefill_r+0x110>)
 8004802:	6818      	ldr	r0, [r3, #0]
 8004804:	f006 0609 	and.w	r6, r6, #9
 8004808:	f7ff f8aa 	bl	8003960 <_fwalk>
 800480c:	2e09      	cmp	r6, #9
 800480e:	81a7      	strh	r7, [r4, #12]
 8004810:	d103      	bne.n	800481a <__srefill_r+0xae>
 8004812:	4621      	mov	r1, r4
 8004814:	4628      	mov	r0, r5
 8004816:	f7fe ff33 	bl	8003680 <__sflush_r>
 800481a:	6922      	ldr	r2, [r4, #16]
 800481c:	6022      	str	r2, [r4, #0]
 800481e:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8004820:	6963      	ldr	r3, [r4, #20]
 8004822:	6a21      	ldr	r1, [r4, #32]
 8004824:	4628      	mov	r0, r5
 8004826:	47b0      	blx	r6
 8004828:	2800      	cmp	r0, #0
 800482a:	6060      	str	r0, [r4, #4]
 800482c:	dc1c      	bgt.n	8004868 <__srefill_r+0xfc>
 800482e:	89a3      	ldrh	r3, [r4, #12]
 8004830:	bf17      	itett	ne
 8004832:	2200      	movne	r2, #0
 8004834:	f043 0320 	orreq.w	r3, r3, #32
 8004838:	f043 0340 	orrne.w	r3, r3, #64	; 0x40
 800483c:	6062      	strne	r2, [r4, #4]
 800483e:	81a3      	strh	r3, [r4, #12]
 8004840:	e7a7      	b.n	8004792 <__srefill_r+0x26>
 8004842:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004844:	2900      	cmp	r1, #0
 8004846:	d0cd      	beq.n	80047e4 <__srefill_r+0x78>
 8004848:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800484c:	4299      	cmp	r1, r3
 800484e:	d002      	beq.n	8004856 <__srefill_r+0xea>
 8004850:	4628      	mov	r0, r5
 8004852:	f7ff f92b 	bl	8003aac <_free_r>
 8004856:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004858:	6063      	str	r3, [r4, #4]
 800485a:	2000      	movs	r0, #0
 800485c:	6360      	str	r0, [r4, #52]	; 0x34
 800485e:	2b00      	cmp	r3, #0
 8004860:	d0c0      	beq.n	80047e4 <__srefill_r+0x78>
 8004862:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8004864:	6023      	str	r3, [r4, #0]
 8004866:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004868:	2000      	movs	r0, #0
 800486a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800486c:	08004fc4 	.word	0x08004fc4
 8004870:	08004fe4 	.word	0x08004fe4
 8004874:	08004fa4 	.word	0x08004fa4
 8004878:	08004fa0 	.word	0x08004fa0
 800487c:	08004759 	.word	0x08004759

08004880 <_sbrk_r>:
 8004880:	b538      	push	{r3, r4, r5, lr}
 8004882:	4c06      	ldr	r4, [pc, #24]	; (800489c <_sbrk_r+0x1c>)
 8004884:	2300      	movs	r3, #0
 8004886:	4605      	mov	r5, r0
 8004888:	4608      	mov	r0, r1
 800488a:	6023      	str	r3, [r4, #0]
 800488c:	f000 fb16 	bl	8004ebc <_sbrk>
 8004890:	1c43      	adds	r3, r0, #1
 8004892:	d102      	bne.n	800489a <_sbrk_r+0x1a>
 8004894:	6823      	ldr	r3, [r4, #0]
 8004896:	b103      	cbz	r3, 800489a <_sbrk_r+0x1a>
 8004898:	602b      	str	r3, [r5, #0]
 800489a:	bd38      	pop	{r3, r4, r5, pc}
 800489c:	20000364 	.word	0x20000364

080048a0 <__sccl>:
 80048a0:	b570      	push	{r4, r5, r6, lr}
 80048a2:	780b      	ldrb	r3, [r1, #0]
 80048a4:	2b5e      	cmp	r3, #94	; 0x5e
 80048a6:	bf13      	iteet	ne
 80048a8:	1c4a      	addne	r2, r1, #1
 80048aa:	1c8a      	addeq	r2, r1, #2
 80048ac:	784b      	ldrbeq	r3, [r1, #1]
 80048ae:	2100      	movne	r1, #0
 80048b0:	bf08      	it	eq
 80048b2:	2101      	moveq	r1, #1
 80048b4:	1e44      	subs	r4, r0, #1
 80048b6:	f100 05ff 	add.w	r5, r0, #255	; 0xff
 80048ba:	f804 1f01 	strb.w	r1, [r4, #1]!
 80048be:	42a5      	cmp	r5, r4
 80048c0:	d1fb      	bne.n	80048ba <__sccl+0x1a>
 80048c2:	b913      	cbnz	r3, 80048ca <__sccl+0x2a>
 80048c4:	3a01      	subs	r2, #1
 80048c6:	4610      	mov	r0, r2
 80048c8:	bd70      	pop	{r4, r5, r6, pc}
 80048ca:	f081 0401 	eor.w	r4, r1, #1
 80048ce:	54c4      	strb	r4, [r0, r3]
 80048d0:	4611      	mov	r1, r2
 80048d2:	780d      	ldrb	r5, [r1, #0]
 80048d4:	2d2d      	cmp	r5, #45	; 0x2d
 80048d6:	f101 0201 	add.w	r2, r1, #1
 80048da:	d006      	beq.n	80048ea <__sccl+0x4a>
 80048dc:	2d5d      	cmp	r5, #93	; 0x5d
 80048de:	d0f2      	beq.n	80048c6 <__sccl+0x26>
 80048e0:	b90d      	cbnz	r5, 80048e6 <__sccl+0x46>
 80048e2:	460a      	mov	r2, r1
 80048e4:	e7ef      	b.n	80048c6 <__sccl+0x26>
 80048e6:	462b      	mov	r3, r5
 80048e8:	e7f1      	b.n	80048ce <__sccl+0x2e>
 80048ea:	784e      	ldrb	r6, [r1, #1]
 80048ec:	2e5d      	cmp	r6, #93	; 0x5d
 80048ee:	d0fa      	beq.n	80048e6 <__sccl+0x46>
 80048f0:	42b3      	cmp	r3, r6
 80048f2:	dcf8      	bgt.n	80048e6 <__sccl+0x46>
 80048f4:	3102      	adds	r1, #2
 80048f6:	3301      	adds	r3, #1
 80048f8:	429e      	cmp	r6, r3
 80048fa:	54c4      	strb	r4, [r0, r3]
 80048fc:	dcfb      	bgt.n	80048f6 <__sccl+0x56>
 80048fe:	e7e8      	b.n	80048d2 <__sccl+0x32>

08004900 <__sread>:
 8004900:	b510      	push	{r4, lr}
 8004902:	460c      	mov	r4, r1
 8004904:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004908:	f000 fab0 	bl	8004e6c <_read_r>
 800490c:	2800      	cmp	r0, #0
 800490e:	bfab      	itete	ge
 8004910:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004912:	89a3      	ldrhlt	r3, [r4, #12]
 8004914:	181b      	addge	r3, r3, r0
 8004916:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800491a:	bfac      	ite	ge
 800491c:	6563      	strge	r3, [r4, #84]	; 0x54
 800491e:	81a3      	strhlt	r3, [r4, #12]
 8004920:	bd10      	pop	{r4, pc}

08004922 <__swrite>:
 8004922:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004926:	461f      	mov	r7, r3
 8004928:	898b      	ldrh	r3, [r1, #12]
 800492a:	05db      	lsls	r3, r3, #23
 800492c:	4605      	mov	r5, r0
 800492e:	460c      	mov	r4, r1
 8004930:	4616      	mov	r6, r2
 8004932:	d505      	bpl.n	8004940 <__swrite+0x1e>
 8004934:	2302      	movs	r3, #2
 8004936:	2200      	movs	r2, #0
 8004938:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800493c:	f000 fa4a 	bl	8004dd4 <_lseek_r>
 8004940:	89a3      	ldrh	r3, [r4, #12]
 8004942:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004946:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800494a:	81a3      	strh	r3, [r4, #12]
 800494c:	4632      	mov	r2, r6
 800494e:	463b      	mov	r3, r7
 8004950:	4628      	mov	r0, r5
 8004952:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004956:	f000 b9e7 	b.w	8004d28 <_write_r>

0800495a <__sseek>:
 800495a:	b510      	push	{r4, lr}
 800495c:	460c      	mov	r4, r1
 800495e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004962:	f000 fa37 	bl	8004dd4 <_lseek_r>
 8004966:	1c43      	adds	r3, r0, #1
 8004968:	89a3      	ldrh	r3, [r4, #12]
 800496a:	bf15      	itete	ne
 800496c:	6560      	strne	r0, [r4, #84]	; 0x54
 800496e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004972:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004976:	81a3      	strheq	r3, [r4, #12]
 8004978:	bf18      	it	ne
 800497a:	81a3      	strhne	r3, [r4, #12]
 800497c:	bd10      	pop	{r4, pc}

0800497e <__sclose>:
 800497e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004982:	f000 b9e3 	b.w	8004d4c <_close_r>

08004986 <_strtol_l.isra.0>:
 8004986:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800498a:	4680      	mov	r8, r0
 800498c:	4689      	mov	r9, r1
 800498e:	4692      	mov	sl, r2
 8004990:	461f      	mov	r7, r3
 8004992:	468b      	mov	fp, r1
 8004994:	465d      	mov	r5, fp
 8004996:	980a      	ldr	r0, [sp, #40]	; 0x28
 8004998:	f815 4b01 	ldrb.w	r4, [r5], #1
 800499c:	f000 fa08 	bl	8004db0 <__locale_ctype_ptr_l>
 80049a0:	4420      	add	r0, r4
 80049a2:	7846      	ldrb	r6, [r0, #1]
 80049a4:	f016 0608 	ands.w	r6, r6, #8
 80049a8:	d10b      	bne.n	80049c2 <_strtol_l.isra.0+0x3c>
 80049aa:	2c2d      	cmp	r4, #45	; 0x2d
 80049ac:	d10b      	bne.n	80049c6 <_strtol_l.isra.0+0x40>
 80049ae:	782c      	ldrb	r4, [r5, #0]
 80049b0:	2601      	movs	r6, #1
 80049b2:	f10b 0502 	add.w	r5, fp, #2
 80049b6:	b167      	cbz	r7, 80049d2 <_strtol_l.isra.0+0x4c>
 80049b8:	2f10      	cmp	r7, #16
 80049ba:	d114      	bne.n	80049e6 <_strtol_l.isra.0+0x60>
 80049bc:	2c30      	cmp	r4, #48	; 0x30
 80049be:	d00a      	beq.n	80049d6 <_strtol_l.isra.0+0x50>
 80049c0:	e011      	b.n	80049e6 <_strtol_l.isra.0+0x60>
 80049c2:	46ab      	mov	fp, r5
 80049c4:	e7e6      	b.n	8004994 <_strtol_l.isra.0+0xe>
 80049c6:	2c2b      	cmp	r4, #43	; 0x2b
 80049c8:	bf04      	itt	eq
 80049ca:	782c      	ldrbeq	r4, [r5, #0]
 80049cc:	f10b 0502 	addeq.w	r5, fp, #2
 80049d0:	e7f1      	b.n	80049b6 <_strtol_l.isra.0+0x30>
 80049d2:	2c30      	cmp	r4, #48	; 0x30
 80049d4:	d127      	bne.n	8004a26 <_strtol_l.isra.0+0xa0>
 80049d6:	782b      	ldrb	r3, [r5, #0]
 80049d8:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80049dc:	2b58      	cmp	r3, #88	; 0x58
 80049de:	d14b      	bne.n	8004a78 <_strtol_l.isra.0+0xf2>
 80049e0:	786c      	ldrb	r4, [r5, #1]
 80049e2:	2710      	movs	r7, #16
 80049e4:	3502      	adds	r5, #2
 80049e6:	2e00      	cmp	r6, #0
 80049e8:	bf0c      	ite	eq
 80049ea:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 80049ee:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 80049f2:	2200      	movs	r2, #0
 80049f4:	fbb1 fef7 	udiv	lr, r1, r7
 80049f8:	4610      	mov	r0, r2
 80049fa:	fb07 1c1e 	mls	ip, r7, lr, r1
 80049fe:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8004a02:	2b09      	cmp	r3, #9
 8004a04:	d811      	bhi.n	8004a2a <_strtol_l.isra.0+0xa4>
 8004a06:	461c      	mov	r4, r3
 8004a08:	42a7      	cmp	r7, r4
 8004a0a:	dd1d      	ble.n	8004a48 <_strtol_l.isra.0+0xc2>
 8004a0c:	1c53      	adds	r3, r2, #1
 8004a0e:	d007      	beq.n	8004a20 <_strtol_l.isra.0+0x9a>
 8004a10:	4586      	cmp	lr, r0
 8004a12:	d316      	bcc.n	8004a42 <_strtol_l.isra.0+0xbc>
 8004a14:	d101      	bne.n	8004a1a <_strtol_l.isra.0+0x94>
 8004a16:	45a4      	cmp	ip, r4
 8004a18:	db13      	blt.n	8004a42 <_strtol_l.isra.0+0xbc>
 8004a1a:	fb00 4007 	mla	r0, r0, r7, r4
 8004a1e:	2201      	movs	r2, #1
 8004a20:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004a24:	e7eb      	b.n	80049fe <_strtol_l.isra.0+0x78>
 8004a26:	270a      	movs	r7, #10
 8004a28:	e7dd      	b.n	80049e6 <_strtol_l.isra.0+0x60>
 8004a2a:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8004a2e:	2b19      	cmp	r3, #25
 8004a30:	d801      	bhi.n	8004a36 <_strtol_l.isra.0+0xb0>
 8004a32:	3c37      	subs	r4, #55	; 0x37
 8004a34:	e7e8      	b.n	8004a08 <_strtol_l.isra.0+0x82>
 8004a36:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8004a3a:	2b19      	cmp	r3, #25
 8004a3c:	d804      	bhi.n	8004a48 <_strtol_l.isra.0+0xc2>
 8004a3e:	3c57      	subs	r4, #87	; 0x57
 8004a40:	e7e2      	b.n	8004a08 <_strtol_l.isra.0+0x82>
 8004a42:	f04f 32ff 	mov.w	r2, #4294967295
 8004a46:	e7eb      	b.n	8004a20 <_strtol_l.isra.0+0x9a>
 8004a48:	1c53      	adds	r3, r2, #1
 8004a4a:	d108      	bne.n	8004a5e <_strtol_l.isra.0+0xd8>
 8004a4c:	2322      	movs	r3, #34	; 0x22
 8004a4e:	f8c8 3000 	str.w	r3, [r8]
 8004a52:	4608      	mov	r0, r1
 8004a54:	f1ba 0f00 	cmp.w	sl, #0
 8004a58:	d107      	bne.n	8004a6a <_strtol_l.isra.0+0xe4>
 8004a5a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004a5e:	b106      	cbz	r6, 8004a62 <_strtol_l.isra.0+0xdc>
 8004a60:	4240      	negs	r0, r0
 8004a62:	f1ba 0f00 	cmp.w	sl, #0
 8004a66:	d00c      	beq.n	8004a82 <_strtol_l.isra.0+0xfc>
 8004a68:	b122      	cbz	r2, 8004a74 <_strtol_l.isra.0+0xee>
 8004a6a:	3d01      	subs	r5, #1
 8004a6c:	f8ca 5000 	str.w	r5, [sl]
 8004a70:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004a74:	464d      	mov	r5, r9
 8004a76:	e7f9      	b.n	8004a6c <_strtol_l.isra.0+0xe6>
 8004a78:	2430      	movs	r4, #48	; 0x30
 8004a7a:	2f00      	cmp	r7, #0
 8004a7c:	d1b3      	bne.n	80049e6 <_strtol_l.isra.0+0x60>
 8004a7e:	2708      	movs	r7, #8
 8004a80:	e7b1      	b.n	80049e6 <_strtol_l.isra.0+0x60>
 8004a82:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08004a88 <_strtol_r>:
 8004a88:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004a8a:	4c06      	ldr	r4, [pc, #24]	; (8004aa4 <_strtol_r+0x1c>)
 8004a8c:	4d06      	ldr	r5, [pc, #24]	; (8004aa8 <_strtol_r+0x20>)
 8004a8e:	6824      	ldr	r4, [r4, #0]
 8004a90:	6a24      	ldr	r4, [r4, #32]
 8004a92:	2c00      	cmp	r4, #0
 8004a94:	bf08      	it	eq
 8004a96:	462c      	moveq	r4, r5
 8004a98:	9400      	str	r4, [sp, #0]
 8004a9a:	f7ff ff74 	bl	8004986 <_strtol_l.isra.0>
 8004a9e:	b003      	add	sp, #12
 8004aa0:	bd30      	pop	{r4, r5, pc}
 8004aa2:	bf00      	nop
 8004aa4:	2000000c 	.word	0x2000000c
 8004aa8:	20000070 	.word	0x20000070

08004aac <_strtoul_l.isra.0>:
 8004aac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004ab0:	4680      	mov	r8, r0
 8004ab2:	4689      	mov	r9, r1
 8004ab4:	4692      	mov	sl, r2
 8004ab6:	461e      	mov	r6, r3
 8004ab8:	460f      	mov	r7, r1
 8004aba:	463d      	mov	r5, r7
 8004abc:	9808      	ldr	r0, [sp, #32]
 8004abe:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004ac2:	f000 f975 	bl	8004db0 <__locale_ctype_ptr_l>
 8004ac6:	4420      	add	r0, r4
 8004ac8:	7843      	ldrb	r3, [r0, #1]
 8004aca:	f013 0308 	ands.w	r3, r3, #8
 8004ace:	d10a      	bne.n	8004ae6 <_strtoul_l.isra.0+0x3a>
 8004ad0:	2c2d      	cmp	r4, #45	; 0x2d
 8004ad2:	d10a      	bne.n	8004aea <_strtoul_l.isra.0+0x3e>
 8004ad4:	782c      	ldrb	r4, [r5, #0]
 8004ad6:	2301      	movs	r3, #1
 8004ad8:	1cbd      	adds	r5, r7, #2
 8004ada:	b15e      	cbz	r6, 8004af4 <_strtoul_l.isra.0+0x48>
 8004adc:	2e10      	cmp	r6, #16
 8004ade:	d113      	bne.n	8004b08 <_strtoul_l.isra.0+0x5c>
 8004ae0:	2c30      	cmp	r4, #48	; 0x30
 8004ae2:	d009      	beq.n	8004af8 <_strtoul_l.isra.0+0x4c>
 8004ae4:	e010      	b.n	8004b08 <_strtoul_l.isra.0+0x5c>
 8004ae6:	462f      	mov	r7, r5
 8004ae8:	e7e7      	b.n	8004aba <_strtoul_l.isra.0+0xe>
 8004aea:	2c2b      	cmp	r4, #43	; 0x2b
 8004aec:	bf04      	itt	eq
 8004aee:	782c      	ldrbeq	r4, [r5, #0]
 8004af0:	1cbd      	addeq	r5, r7, #2
 8004af2:	e7f2      	b.n	8004ada <_strtoul_l.isra.0+0x2e>
 8004af4:	2c30      	cmp	r4, #48	; 0x30
 8004af6:	d125      	bne.n	8004b44 <_strtoul_l.isra.0+0x98>
 8004af8:	782a      	ldrb	r2, [r5, #0]
 8004afa:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8004afe:	2a58      	cmp	r2, #88	; 0x58
 8004b00:	d14a      	bne.n	8004b98 <_strtoul_l.isra.0+0xec>
 8004b02:	786c      	ldrb	r4, [r5, #1]
 8004b04:	2610      	movs	r6, #16
 8004b06:	3502      	adds	r5, #2
 8004b08:	f04f 31ff 	mov.w	r1, #4294967295
 8004b0c:	2700      	movs	r7, #0
 8004b0e:	fbb1 f1f6 	udiv	r1, r1, r6
 8004b12:	fb06 fe01 	mul.w	lr, r6, r1
 8004b16:	ea6f 0e0e 	mvn.w	lr, lr
 8004b1a:	4638      	mov	r0, r7
 8004b1c:	f1a4 0230 	sub.w	r2, r4, #48	; 0x30
 8004b20:	2a09      	cmp	r2, #9
 8004b22:	d811      	bhi.n	8004b48 <_strtoul_l.isra.0+0x9c>
 8004b24:	4614      	mov	r4, r2
 8004b26:	42a6      	cmp	r6, r4
 8004b28:	dd1d      	ble.n	8004b66 <_strtoul_l.isra.0+0xba>
 8004b2a:	2f00      	cmp	r7, #0
 8004b2c:	db18      	blt.n	8004b60 <_strtoul_l.isra.0+0xb4>
 8004b2e:	4281      	cmp	r1, r0
 8004b30:	d316      	bcc.n	8004b60 <_strtoul_l.isra.0+0xb4>
 8004b32:	d101      	bne.n	8004b38 <_strtoul_l.isra.0+0x8c>
 8004b34:	45a6      	cmp	lr, r4
 8004b36:	db13      	blt.n	8004b60 <_strtoul_l.isra.0+0xb4>
 8004b38:	fb00 4006 	mla	r0, r0, r6, r4
 8004b3c:	2701      	movs	r7, #1
 8004b3e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004b42:	e7eb      	b.n	8004b1c <_strtoul_l.isra.0+0x70>
 8004b44:	260a      	movs	r6, #10
 8004b46:	e7df      	b.n	8004b08 <_strtoul_l.isra.0+0x5c>
 8004b48:	f1a4 0241 	sub.w	r2, r4, #65	; 0x41
 8004b4c:	2a19      	cmp	r2, #25
 8004b4e:	d801      	bhi.n	8004b54 <_strtoul_l.isra.0+0xa8>
 8004b50:	3c37      	subs	r4, #55	; 0x37
 8004b52:	e7e8      	b.n	8004b26 <_strtoul_l.isra.0+0x7a>
 8004b54:	f1a4 0261 	sub.w	r2, r4, #97	; 0x61
 8004b58:	2a19      	cmp	r2, #25
 8004b5a:	d804      	bhi.n	8004b66 <_strtoul_l.isra.0+0xba>
 8004b5c:	3c57      	subs	r4, #87	; 0x57
 8004b5e:	e7e2      	b.n	8004b26 <_strtoul_l.isra.0+0x7a>
 8004b60:	f04f 37ff 	mov.w	r7, #4294967295
 8004b64:	e7eb      	b.n	8004b3e <_strtoul_l.isra.0+0x92>
 8004b66:	2f00      	cmp	r7, #0
 8004b68:	da09      	bge.n	8004b7e <_strtoul_l.isra.0+0xd2>
 8004b6a:	2322      	movs	r3, #34	; 0x22
 8004b6c:	f8c8 3000 	str.w	r3, [r8]
 8004b70:	f04f 30ff 	mov.w	r0, #4294967295
 8004b74:	f1ba 0f00 	cmp.w	sl, #0
 8004b78:	d107      	bne.n	8004b8a <_strtoul_l.isra.0+0xde>
 8004b7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004b7e:	b103      	cbz	r3, 8004b82 <_strtoul_l.isra.0+0xd6>
 8004b80:	4240      	negs	r0, r0
 8004b82:	f1ba 0f00 	cmp.w	sl, #0
 8004b86:	d00c      	beq.n	8004ba2 <_strtoul_l.isra.0+0xf6>
 8004b88:	b127      	cbz	r7, 8004b94 <_strtoul_l.isra.0+0xe8>
 8004b8a:	3d01      	subs	r5, #1
 8004b8c:	f8ca 5000 	str.w	r5, [sl]
 8004b90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004b94:	464d      	mov	r5, r9
 8004b96:	e7f9      	b.n	8004b8c <_strtoul_l.isra.0+0xe0>
 8004b98:	2430      	movs	r4, #48	; 0x30
 8004b9a:	2e00      	cmp	r6, #0
 8004b9c:	d1b4      	bne.n	8004b08 <_strtoul_l.isra.0+0x5c>
 8004b9e:	2608      	movs	r6, #8
 8004ba0:	e7b2      	b.n	8004b08 <_strtoul_l.isra.0+0x5c>
 8004ba2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

08004ba8 <_strtoul_r>:
 8004ba8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004baa:	4c06      	ldr	r4, [pc, #24]	; (8004bc4 <_strtoul_r+0x1c>)
 8004bac:	4d06      	ldr	r5, [pc, #24]	; (8004bc8 <_strtoul_r+0x20>)
 8004bae:	6824      	ldr	r4, [r4, #0]
 8004bb0:	6a24      	ldr	r4, [r4, #32]
 8004bb2:	2c00      	cmp	r4, #0
 8004bb4:	bf08      	it	eq
 8004bb6:	462c      	moveq	r4, r5
 8004bb8:	9400      	str	r4, [sp, #0]
 8004bba:	f7ff ff77 	bl	8004aac <_strtoul_l.isra.0>
 8004bbe:	b003      	add	sp, #12
 8004bc0:	bd30      	pop	{r4, r5, pc}
 8004bc2:	bf00      	nop
 8004bc4:	2000000c 	.word	0x2000000c
 8004bc8:	20000070 	.word	0x20000070

08004bcc <__submore>:
 8004bcc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004bd0:	460c      	mov	r4, r1
 8004bd2:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8004bd4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004bd8:	4299      	cmp	r1, r3
 8004bda:	d11e      	bne.n	8004c1a <__submore+0x4e>
 8004bdc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004be0:	f7fe ffb2 	bl	8003b48 <_malloc_r>
 8004be4:	b918      	cbnz	r0, 8004bee <__submore+0x22>
 8004be6:	f04f 30ff 	mov.w	r0, #4294967295
 8004bea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004bee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004bf2:	63a3      	str	r3, [r4, #56]	; 0x38
 8004bf4:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8004bf8:	6360      	str	r0, [r4, #52]	; 0x34
 8004bfa:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8004bfe:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8004c02:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 8004c06:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8004c0a:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 8004c0e:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8004c12:	6020      	str	r0, [r4, #0]
 8004c14:	2000      	movs	r0, #0
 8004c16:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004c1a:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8004c1c:	0077      	lsls	r7, r6, #1
 8004c1e:	463a      	mov	r2, r7
 8004c20:	f000 f8fe 	bl	8004e20 <_realloc_r>
 8004c24:	4605      	mov	r5, r0
 8004c26:	2800      	cmp	r0, #0
 8004c28:	d0dd      	beq.n	8004be6 <__submore+0x1a>
 8004c2a:	eb00 0806 	add.w	r8, r0, r6
 8004c2e:	4601      	mov	r1, r0
 8004c30:	4632      	mov	r2, r6
 8004c32:	4640      	mov	r0, r8
 8004c34:	f7fe fb0e 	bl	8003254 <memcpy>
 8004c38:	f8c4 8000 	str.w	r8, [r4]
 8004c3c:	6365      	str	r5, [r4, #52]	; 0x34
 8004c3e:	63a7      	str	r7, [r4, #56]	; 0x38
 8004c40:	e7e8      	b.n	8004c14 <__submore+0x48>
	...

08004c44 <_ungetc_r>:
 8004c44:	1c4b      	adds	r3, r1, #1
 8004c46:	b570      	push	{r4, r5, r6, lr}
 8004c48:	4606      	mov	r6, r0
 8004c4a:	460d      	mov	r5, r1
 8004c4c:	4614      	mov	r4, r2
 8004c4e:	d103      	bne.n	8004c58 <_ungetc_r+0x14>
 8004c50:	f04f 35ff 	mov.w	r5, #4294967295
 8004c54:	4628      	mov	r0, r5
 8004c56:	bd70      	pop	{r4, r5, r6, pc}
 8004c58:	b118      	cbz	r0, 8004c62 <_ungetc_r+0x1e>
 8004c5a:	6983      	ldr	r3, [r0, #24]
 8004c5c:	b90b      	cbnz	r3, 8004c62 <_ungetc_r+0x1e>
 8004c5e:	f7fe fe13 	bl	8003888 <__sinit>
 8004c62:	4b2e      	ldr	r3, [pc, #184]	; (8004d1c <_ungetc_r+0xd8>)
 8004c64:	429c      	cmp	r4, r3
 8004c66:	d12c      	bne.n	8004cc2 <_ungetc_r+0x7e>
 8004c68:	6874      	ldr	r4, [r6, #4]
 8004c6a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004c6e:	f023 0320 	bic.w	r3, r3, #32
 8004c72:	81a3      	strh	r3, [r4, #12]
 8004c74:	b29b      	uxth	r3, r3
 8004c76:	0759      	lsls	r1, r3, #29
 8004c78:	d413      	bmi.n	8004ca2 <_ungetc_r+0x5e>
 8004c7a:	06da      	lsls	r2, r3, #27
 8004c7c:	d5e8      	bpl.n	8004c50 <_ungetc_r+0xc>
 8004c7e:	071b      	lsls	r3, r3, #28
 8004c80:	d50b      	bpl.n	8004c9a <_ungetc_r+0x56>
 8004c82:	4621      	mov	r1, r4
 8004c84:	4630      	mov	r0, r6
 8004c86:	f7fe fd83 	bl	8003790 <_fflush_r>
 8004c8a:	2800      	cmp	r0, #0
 8004c8c:	d1e0      	bne.n	8004c50 <_ungetc_r+0xc>
 8004c8e:	89a3      	ldrh	r3, [r4, #12]
 8004c90:	60a0      	str	r0, [r4, #8]
 8004c92:	f023 0308 	bic.w	r3, r3, #8
 8004c96:	81a3      	strh	r3, [r4, #12]
 8004c98:	61a0      	str	r0, [r4, #24]
 8004c9a:	89a3      	ldrh	r3, [r4, #12]
 8004c9c:	f043 0304 	orr.w	r3, r3, #4
 8004ca0:	81a3      	strh	r3, [r4, #12]
 8004ca2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004ca4:	6862      	ldr	r2, [r4, #4]
 8004ca6:	b2ed      	uxtb	r5, r5
 8004ca8:	b1e3      	cbz	r3, 8004ce4 <_ungetc_r+0xa0>
 8004caa:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004cac:	429a      	cmp	r2, r3
 8004cae:	da12      	bge.n	8004cd6 <_ungetc_r+0x92>
 8004cb0:	6823      	ldr	r3, [r4, #0]
 8004cb2:	1e5a      	subs	r2, r3, #1
 8004cb4:	6022      	str	r2, [r4, #0]
 8004cb6:	f803 5c01 	strb.w	r5, [r3, #-1]
 8004cba:	6863      	ldr	r3, [r4, #4]
 8004cbc:	3301      	adds	r3, #1
 8004cbe:	6063      	str	r3, [r4, #4]
 8004cc0:	e7c8      	b.n	8004c54 <_ungetc_r+0x10>
 8004cc2:	4b17      	ldr	r3, [pc, #92]	; (8004d20 <_ungetc_r+0xdc>)
 8004cc4:	429c      	cmp	r4, r3
 8004cc6:	d101      	bne.n	8004ccc <_ungetc_r+0x88>
 8004cc8:	68b4      	ldr	r4, [r6, #8]
 8004cca:	e7ce      	b.n	8004c6a <_ungetc_r+0x26>
 8004ccc:	4b15      	ldr	r3, [pc, #84]	; (8004d24 <_ungetc_r+0xe0>)
 8004cce:	429c      	cmp	r4, r3
 8004cd0:	bf08      	it	eq
 8004cd2:	68f4      	ldreq	r4, [r6, #12]
 8004cd4:	e7c9      	b.n	8004c6a <_ungetc_r+0x26>
 8004cd6:	4621      	mov	r1, r4
 8004cd8:	4630      	mov	r0, r6
 8004cda:	f7ff ff77 	bl	8004bcc <__submore>
 8004cde:	2800      	cmp	r0, #0
 8004ce0:	d0e6      	beq.n	8004cb0 <_ungetc_r+0x6c>
 8004ce2:	e7b5      	b.n	8004c50 <_ungetc_r+0xc>
 8004ce4:	6921      	ldr	r1, [r4, #16]
 8004ce6:	6823      	ldr	r3, [r4, #0]
 8004ce8:	b151      	cbz	r1, 8004d00 <_ungetc_r+0xbc>
 8004cea:	4299      	cmp	r1, r3
 8004cec:	d208      	bcs.n	8004d00 <_ungetc_r+0xbc>
 8004cee:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8004cf2:	428d      	cmp	r5, r1
 8004cf4:	d104      	bne.n	8004d00 <_ungetc_r+0xbc>
 8004cf6:	3b01      	subs	r3, #1
 8004cf8:	3201      	adds	r2, #1
 8004cfa:	6023      	str	r3, [r4, #0]
 8004cfc:	6062      	str	r2, [r4, #4]
 8004cfe:	e7a9      	b.n	8004c54 <_ungetc_r+0x10>
 8004d00:	63e3      	str	r3, [r4, #60]	; 0x3c
 8004d02:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004d06:	6363      	str	r3, [r4, #52]	; 0x34
 8004d08:	2303      	movs	r3, #3
 8004d0a:	63a3      	str	r3, [r4, #56]	; 0x38
 8004d0c:	4623      	mov	r3, r4
 8004d0e:	6422      	str	r2, [r4, #64]	; 0x40
 8004d10:	f803 5f46 	strb.w	r5, [r3, #70]!
 8004d14:	6023      	str	r3, [r4, #0]
 8004d16:	2301      	movs	r3, #1
 8004d18:	e7d1      	b.n	8004cbe <_ungetc_r+0x7a>
 8004d1a:	bf00      	nop
 8004d1c:	08004fc4 	.word	0x08004fc4
 8004d20:	08004fe4 	.word	0x08004fe4
 8004d24:	08004fa4 	.word	0x08004fa4

08004d28 <_write_r>:
 8004d28:	b538      	push	{r3, r4, r5, lr}
 8004d2a:	4c07      	ldr	r4, [pc, #28]	; (8004d48 <_write_r+0x20>)
 8004d2c:	4605      	mov	r5, r0
 8004d2e:	4608      	mov	r0, r1
 8004d30:	4611      	mov	r1, r2
 8004d32:	2200      	movs	r2, #0
 8004d34:	6022      	str	r2, [r4, #0]
 8004d36:	461a      	mov	r2, r3
 8004d38:	f7fe f816 	bl	8002d68 <_write>
 8004d3c:	1c43      	adds	r3, r0, #1
 8004d3e:	d102      	bne.n	8004d46 <_write_r+0x1e>
 8004d40:	6823      	ldr	r3, [r4, #0]
 8004d42:	b103      	cbz	r3, 8004d46 <_write_r+0x1e>
 8004d44:	602b      	str	r3, [r5, #0]
 8004d46:	bd38      	pop	{r3, r4, r5, pc}
 8004d48:	20000364 	.word	0x20000364

08004d4c <_close_r>:
 8004d4c:	b538      	push	{r3, r4, r5, lr}
 8004d4e:	4c06      	ldr	r4, [pc, #24]	; (8004d68 <_close_r+0x1c>)
 8004d50:	2300      	movs	r3, #0
 8004d52:	4605      	mov	r5, r0
 8004d54:	4608      	mov	r0, r1
 8004d56:	6023      	str	r3, [r4, #0]
 8004d58:	f7fe f832 	bl	8002dc0 <_close>
 8004d5c:	1c43      	adds	r3, r0, #1
 8004d5e:	d102      	bne.n	8004d66 <_close_r+0x1a>
 8004d60:	6823      	ldr	r3, [r4, #0]
 8004d62:	b103      	cbz	r3, 8004d66 <_close_r+0x1a>
 8004d64:	602b      	str	r3, [r5, #0]
 8004d66:	bd38      	pop	{r3, r4, r5, pc}
 8004d68:	20000364 	.word	0x20000364

08004d6c <_fstat_r>:
 8004d6c:	b538      	push	{r3, r4, r5, lr}
 8004d6e:	4c07      	ldr	r4, [pc, #28]	; (8004d8c <_fstat_r+0x20>)
 8004d70:	2300      	movs	r3, #0
 8004d72:	4605      	mov	r5, r0
 8004d74:	4608      	mov	r0, r1
 8004d76:	4611      	mov	r1, r2
 8004d78:	6023      	str	r3, [r4, #0]
 8004d7a:	f7fe f871 	bl	8002e60 <_fstat>
 8004d7e:	1c43      	adds	r3, r0, #1
 8004d80:	d102      	bne.n	8004d88 <_fstat_r+0x1c>
 8004d82:	6823      	ldr	r3, [r4, #0]
 8004d84:	b103      	cbz	r3, 8004d88 <_fstat_r+0x1c>
 8004d86:	602b      	str	r3, [r5, #0]
 8004d88:	bd38      	pop	{r3, r4, r5, pc}
 8004d8a:	bf00      	nop
 8004d8c:	20000364 	.word	0x20000364

08004d90 <_isatty_r>:
 8004d90:	b538      	push	{r3, r4, r5, lr}
 8004d92:	4c06      	ldr	r4, [pc, #24]	; (8004dac <_isatty_r+0x1c>)
 8004d94:	2300      	movs	r3, #0
 8004d96:	4605      	mov	r5, r0
 8004d98:	4608      	mov	r0, r1
 8004d9a:	6023      	str	r3, [r4, #0]
 8004d9c:	f7fd ffce 	bl	8002d3c <_isatty>
 8004da0:	1c43      	adds	r3, r0, #1
 8004da2:	d102      	bne.n	8004daa <_isatty_r+0x1a>
 8004da4:	6823      	ldr	r3, [r4, #0]
 8004da6:	b103      	cbz	r3, 8004daa <_isatty_r+0x1a>
 8004da8:	602b      	str	r3, [r5, #0]
 8004daa:	bd38      	pop	{r3, r4, r5, pc}
 8004dac:	20000364 	.word	0x20000364

08004db0 <__locale_ctype_ptr_l>:
 8004db0:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8004db4:	4770      	bx	lr
	...

08004db8 <__locale_ctype_ptr>:
 8004db8:	4b04      	ldr	r3, [pc, #16]	; (8004dcc <__locale_ctype_ptr+0x14>)
 8004dba:	4a05      	ldr	r2, [pc, #20]	; (8004dd0 <__locale_ctype_ptr+0x18>)
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	6a1b      	ldr	r3, [r3, #32]
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	bf08      	it	eq
 8004dc4:	4613      	moveq	r3, r2
 8004dc6:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
 8004dca:	4770      	bx	lr
 8004dcc:	2000000c 	.word	0x2000000c
 8004dd0:	20000070 	.word	0x20000070

08004dd4 <_lseek_r>:
 8004dd4:	b538      	push	{r3, r4, r5, lr}
 8004dd6:	4c07      	ldr	r4, [pc, #28]	; (8004df4 <_lseek_r+0x20>)
 8004dd8:	4605      	mov	r5, r0
 8004dda:	4608      	mov	r0, r1
 8004ddc:	4611      	mov	r1, r2
 8004dde:	2200      	movs	r2, #0
 8004de0:	6022      	str	r2, [r4, #0]
 8004de2:	461a      	mov	r2, r3
 8004de4:	f7fe f803 	bl	8002dee <_lseek>
 8004de8:	1c43      	adds	r3, r0, #1
 8004dea:	d102      	bne.n	8004df2 <_lseek_r+0x1e>
 8004dec:	6823      	ldr	r3, [r4, #0]
 8004dee:	b103      	cbz	r3, 8004df2 <_lseek_r+0x1e>
 8004df0:	602b      	str	r3, [r5, #0]
 8004df2:	bd38      	pop	{r3, r4, r5, pc}
 8004df4:	20000364 	.word	0x20000364

08004df8 <__ascii_mbtowc>:
 8004df8:	b082      	sub	sp, #8
 8004dfa:	b901      	cbnz	r1, 8004dfe <__ascii_mbtowc+0x6>
 8004dfc:	a901      	add	r1, sp, #4
 8004dfe:	b142      	cbz	r2, 8004e12 <__ascii_mbtowc+0x1a>
 8004e00:	b14b      	cbz	r3, 8004e16 <__ascii_mbtowc+0x1e>
 8004e02:	7813      	ldrb	r3, [r2, #0]
 8004e04:	600b      	str	r3, [r1, #0]
 8004e06:	7812      	ldrb	r2, [r2, #0]
 8004e08:	1c10      	adds	r0, r2, #0
 8004e0a:	bf18      	it	ne
 8004e0c:	2001      	movne	r0, #1
 8004e0e:	b002      	add	sp, #8
 8004e10:	4770      	bx	lr
 8004e12:	4610      	mov	r0, r2
 8004e14:	e7fb      	b.n	8004e0e <__ascii_mbtowc+0x16>
 8004e16:	f06f 0001 	mvn.w	r0, #1
 8004e1a:	e7f8      	b.n	8004e0e <__ascii_mbtowc+0x16>

08004e1c <__malloc_lock>:
 8004e1c:	4770      	bx	lr

08004e1e <__malloc_unlock>:
 8004e1e:	4770      	bx	lr

08004e20 <_realloc_r>:
 8004e20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e22:	4607      	mov	r7, r0
 8004e24:	4614      	mov	r4, r2
 8004e26:	460e      	mov	r6, r1
 8004e28:	b921      	cbnz	r1, 8004e34 <_realloc_r+0x14>
 8004e2a:	4611      	mov	r1, r2
 8004e2c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8004e30:	f7fe be8a 	b.w	8003b48 <_malloc_r>
 8004e34:	b922      	cbnz	r2, 8004e40 <_realloc_r+0x20>
 8004e36:	f7fe fe39 	bl	8003aac <_free_r>
 8004e3a:	4625      	mov	r5, r4
 8004e3c:	4628      	mov	r0, r5
 8004e3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004e40:	f000 f833 	bl	8004eaa <_malloc_usable_size_r>
 8004e44:	4284      	cmp	r4, r0
 8004e46:	d90f      	bls.n	8004e68 <_realloc_r+0x48>
 8004e48:	4621      	mov	r1, r4
 8004e4a:	4638      	mov	r0, r7
 8004e4c:	f7fe fe7c 	bl	8003b48 <_malloc_r>
 8004e50:	4605      	mov	r5, r0
 8004e52:	2800      	cmp	r0, #0
 8004e54:	d0f2      	beq.n	8004e3c <_realloc_r+0x1c>
 8004e56:	4631      	mov	r1, r6
 8004e58:	4622      	mov	r2, r4
 8004e5a:	f7fe f9fb 	bl	8003254 <memcpy>
 8004e5e:	4631      	mov	r1, r6
 8004e60:	4638      	mov	r0, r7
 8004e62:	f7fe fe23 	bl	8003aac <_free_r>
 8004e66:	e7e9      	b.n	8004e3c <_realloc_r+0x1c>
 8004e68:	4635      	mov	r5, r6
 8004e6a:	e7e7      	b.n	8004e3c <_realloc_r+0x1c>

08004e6c <_read_r>:
 8004e6c:	b538      	push	{r3, r4, r5, lr}
 8004e6e:	4c07      	ldr	r4, [pc, #28]	; (8004e8c <_read_r+0x20>)
 8004e70:	4605      	mov	r5, r0
 8004e72:	4608      	mov	r0, r1
 8004e74:	4611      	mov	r1, r2
 8004e76:	2200      	movs	r2, #0
 8004e78:	6022      	str	r2, [r4, #0]
 8004e7a:	461a      	mov	r2, r3
 8004e7c:	f7fd ffc8 	bl	8002e10 <_read>
 8004e80:	1c43      	adds	r3, r0, #1
 8004e82:	d102      	bne.n	8004e8a <_read_r+0x1e>
 8004e84:	6823      	ldr	r3, [r4, #0]
 8004e86:	b103      	cbz	r3, 8004e8a <_read_r+0x1e>
 8004e88:	602b      	str	r3, [r5, #0]
 8004e8a:	bd38      	pop	{r3, r4, r5, pc}
 8004e8c:	20000364 	.word	0x20000364

08004e90 <__ascii_wctomb>:
 8004e90:	b149      	cbz	r1, 8004ea6 <__ascii_wctomb+0x16>
 8004e92:	2aff      	cmp	r2, #255	; 0xff
 8004e94:	bf85      	ittet	hi
 8004e96:	238a      	movhi	r3, #138	; 0x8a
 8004e98:	6003      	strhi	r3, [r0, #0]
 8004e9a:	700a      	strbls	r2, [r1, #0]
 8004e9c:	f04f 30ff 	movhi.w	r0, #4294967295
 8004ea0:	bf98      	it	ls
 8004ea2:	2001      	movls	r0, #1
 8004ea4:	4770      	bx	lr
 8004ea6:	4608      	mov	r0, r1
 8004ea8:	4770      	bx	lr

08004eaa <_malloc_usable_size_r>:
 8004eaa:	f851 0c04 	ldr.w	r0, [r1, #-4]
 8004eae:	2800      	cmp	r0, #0
 8004eb0:	f1a0 0004 	sub.w	r0, r0, #4
 8004eb4:	bfbc      	itt	lt
 8004eb6:	580b      	ldrlt	r3, [r1, r0]
 8004eb8:	18c0      	addlt	r0, r0, r3
 8004eba:	4770      	bx	lr

08004ebc <_sbrk>:
 8004ebc:	4b04      	ldr	r3, [pc, #16]	; (8004ed0 <_sbrk+0x14>)
 8004ebe:	6819      	ldr	r1, [r3, #0]
 8004ec0:	4602      	mov	r2, r0
 8004ec2:	b909      	cbnz	r1, 8004ec8 <_sbrk+0xc>
 8004ec4:	4903      	ldr	r1, [pc, #12]	; (8004ed4 <_sbrk+0x18>)
 8004ec6:	6019      	str	r1, [r3, #0]
 8004ec8:	6818      	ldr	r0, [r3, #0]
 8004eca:	4402      	add	r2, r0
 8004ecc:	601a      	str	r2, [r3, #0]
 8004ece:	4770      	bx	lr
 8004ed0:	20000210 	.word	0x20000210
 8004ed4:	20000368 	.word	0x20000368

08004ed8 <_init>:
 8004ed8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004eda:	bf00      	nop
 8004edc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004ede:	bc08      	pop	{r3}
 8004ee0:	469e      	mov	lr, r3
 8004ee2:	4770      	bx	lr

08004ee4 <_fini>:
 8004ee4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ee6:	bf00      	nop
 8004ee8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004eea:	bc08      	pop	{r3}
 8004eec:	469e      	mov	lr, r3
 8004eee:	4770      	bx	lr
