
AC_Dimmer_SW.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005100  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000268  08005290  08005290  00015290  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080054f8  080054f8  000154f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08005500  08005500  00015500  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08005504  08005504  00015504  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000001dc  20000000  08005508  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ccmram       00000000  10000000  10000000  000201dc  2**0
                  CONTENTS
  8 .bss          00000184  200001dc  200001dc  000201dc  2**2
                  ALLOC
  9 ._user_heap_stack 00000600  20000360  20000360  000201dc  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 11 .debug_info   0000fa2a  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 00001a8d  00000000  00000000  0002fc36  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00000db8  00000000  00000000  000316c8  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000d10  00000000  00000000  00032480  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   0000754a  00000000  00000000  00033190  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    000044e6  00000000  00000000  0003a6da  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  0003ebc0  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000046b8  00000000  00000000  0003ec3c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001dc 	.word	0x200001dc
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005278 	.word	0x08005278

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e0 	.word	0x200001e0
 80001cc:	08005278 	.word	0x08005278

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b97a 	b.w	800057c <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	468c      	mov	ip, r1
 80002a6:	460d      	mov	r5, r1
 80002a8:	4604      	mov	r4, r0
 80002aa:	9e08      	ldr	r6, [sp, #32]
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d151      	bne.n	8000354 <__udivmoddi4+0xb4>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4617      	mov	r7, r2
 80002b4:	d96d      	bls.n	8000392 <__udivmoddi4+0xf2>
 80002b6:	fab2 fe82 	clz	lr, r2
 80002ba:	f1be 0f00 	cmp.w	lr, #0
 80002be:	d00b      	beq.n	80002d8 <__udivmoddi4+0x38>
 80002c0:	f1ce 0c20 	rsb	ip, lr, #32
 80002c4:	fa01 f50e 	lsl.w	r5, r1, lr
 80002c8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002cc:	fa02 f70e 	lsl.w	r7, r2, lr
 80002d0:	ea4c 0c05 	orr.w	ip, ip, r5
 80002d4:	fa00 f40e 	lsl.w	r4, r0, lr
 80002d8:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 80002dc:	0c25      	lsrs	r5, r4, #16
 80002de:	fbbc f8fa 	udiv	r8, ip, sl
 80002e2:	fa1f f987 	uxth.w	r9, r7
 80002e6:	fb0a cc18 	mls	ip, sl, r8, ip
 80002ea:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 80002ee:	fb08 f309 	mul.w	r3, r8, r9
 80002f2:	42ab      	cmp	r3, r5
 80002f4:	d90a      	bls.n	800030c <__udivmoddi4+0x6c>
 80002f6:	19ed      	adds	r5, r5, r7
 80002f8:	f108 32ff 	add.w	r2, r8, #4294967295
 80002fc:	f080 8123 	bcs.w	8000546 <__udivmoddi4+0x2a6>
 8000300:	42ab      	cmp	r3, r5
 8000302:	f240 8120 	bls.w	8000546 <__udivmoddi4+0x2a6>
 8000306:	f1a8 0802 	sub.w	r8, r8, #2
 800030a:	443d      	add	r5, r7
 800030c:	1aed      	subs	r5, r5, r3
 800030e:	b2a4      	uxth	r4, r4
 8000310:	fbb5 f0fa 	udiv	r0, r5, sl
 8000314:	fb0a 5510 	mls	r5, sl, r0, r5
 8000318:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800031c:	fb00 f909 	mul.w	r9, r0, r9
 8000320:	45a1      	cmp	r9, r4
 8000322:	d909      	bls.n	8000338 <__udivmoddi4+0x98>
 8000324:	19e4      	adds	r4, r4, r7
 8000326:	f100 33ff 	add.w	r3, r0, #4294967295
 800032a:	f080 810a 	bcs.w	8000542 <__udivmoddi4+0x2a2>
 800032e:	45a1      	cmp	r9, r4
 8000330:	f240 8107 	bls.w	8000542 <__udivmoddi4+0x2a2>
 8000334:	3802      	subs	r0, #2
 8000336:	443c      	add	r4, r7
 8000338:	eba4 0409 	sub.w	r4, r4, r9
 800033c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000340:	2100      	movs	r1, #0
 8000342:	2e00      	cmp	r6, #0
 8000344:	d061      	beq.n	800040a <__udivmoddi4+0x16a>
 8000346:	fa24 f40e 	lsr.w	r4, r4, lr
 800034a:	2300      	movs	r3, #0
 800034c:	6034      	str	r4, [r6, #0]
 800034e:	6073      	str	r3, [r6, #4]
 8000350:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000354:	428b      	cmp	r3, r1
 8000356:	d907      	bls.n	8000368 <__udivmoddi4+0xc8>
 8000358:	2e00      	cmp	r6, #0
 800035a:	d054      	beq.n	8000406 <__udivmoddi4+0x166>
 800035c:	2100      	movs	r1, #0
 800035e:	e886 0021 	stmia.w	r6, {r0, r5}
 8000362:	4608      	mov	r0, r1
 8000364:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000368:	fab3 f183 	clz	r1, r3
 800036c:	2900      	cmp	r1, #0
 800036e:	f040 808e 	bne.w	800048e <__udivmoddi4+0x1ee>
 8000372:	42ab      	cmp	r3, r5
 8000374:	d302      	bcc.n	800037c <__udivmoddi4+0xdc>
 8000376:	4282      	cmp	r2, r0
 8000378:	f200 80fa 	bhi.w	8000570 <__udivmoddi4+0x2d0>
 800037c:	1a84      	subs	r4, r0, r2
 800037e:	eb65 0503 	sbc.w	r5, r5, r3
 8000382:	2001      	movs	r0, #1
 8000384:	46ac      	mov	ip, r5
 8000386:	2e00      	cmp	r6, #0
 8000388:	d03f      	beq.n	800040a <__udivmoddi4+0x16a>
 800038a:	e886 1010 	stmia.w	r6, {r4, ip}
 800038e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000392:	b912      	cbnz	r2, 800039a <__udivmoddi4+0xfa>
 8000394:	2701      	movs	r7, #1
 8000396:	fbb7 f7f2 	udiv	r7, r7, r2
 800039a:	fab7 fe87 	clz	lr, r7
 800039e:	f1be 0f00 	cmp.w	lr, #0
 80003a2:	d134      	bne.n	800040e <__udivmoddi4+0x16e>
 80003a4:	1beb      	subs	r3, r5, r7
 80003a6:	0c3a      	lsrs	r2, r7, #16
 80003a8:	fa1f fc87 	uxth.w	ip, r7
 80003ac:	2101      	movs	r1, #1
 80003ae:	fbb3 f8f2 	udiv	r8, r3, r2
 80003b2:	0c25      	lsrs	r5, r4, #16
 80003b4:	fb02 3318 	mls	r3, r2, r8, r3
 80003b8:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80003bc:	fb0c f308 	mul.w	r3, ip, r8
 80003c0:	42ab      	cmp	r3, r5
 80003c2:	d907      	bls.n	80003d4 <__udivmoddi4+0x134>
 80003c4:	19ed      	adds	r5, r5, r7
 80003c6:	f108 30ff 	add.w	r0, r8, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x132>
 80003cc:	42ab      	cmp	r3, r5
 80003ce:	f200 80d1 	bhi.w	8000574 <__udivmoddi4+0x2d4>
 80003d2:	4680      	mov	r8, r0
 80003d4:	1aed      	subs	r5, r5, r3
 80003d6:	b2a3      	uxth	r3, r4
 80003d8:	fbb5 f0f2 	udiv	r0, r5, r2
 80003dc:	fb02 5510 	mls	r5, r2, r0, r5
 80003e0:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 80003e4:	fb0c fc00 	mul.w	ip, ip, r0
 80003e8:	45a4      	cmp	ip, r4
 80003ea:	d907      	bls.n	80003fc <__udivmoddi4+0x15c>
 80003ec:	19e4      	adds	r4, r4, r7
 80003ee:	f100 33ff 	add.w	r3, r0, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x15a>
 80003f4:	45a4      	cmp	ip, r4
 80003f6:	f200 80b8 	bhi.w	800056a <__udivmoddi4+0x2ca>
 80003fa:	4618      	mov	r0, r3
 80003fc:	eba4 040c 	sub.w	r4, r4, ip
 8000400:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000404:	e79d      	b.n	8000342 <__udivmoddi4+0xa2>
 8000406:	4631      	mov	r1, r6
 8000408:	4630      	mov	r0, r6
 800040a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800040e:	f1ce 0420 	rsb	r4, lr, #32
 8000412:	fa05 f30e 	lsl.w	r3, r5, lr
 8000416:	fa07 f70e 	lsl.w	r7, r7, lr
 800041a:	fa20 f804 	lsr.w	r8, r0, r4
 800041e:	0c3a      	lsrs	r2, r7, #16
 8000420:	fa25 f404 	lsr.w	r4, r5, r4
 8000424:	ea48 0803 	orr.w	r8, r8, r3
 8000428:	fbb4 f1f2 	udiv	r1, r4, r2
 800042c:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000430:	fb02 4411 	mls	r4, r2, r1, r4
 8000434:	fa1f fc87 	uxth.w	ip, r7
 8000438:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 800043c:	fb01 f30c 	mul.w	r3, r1, ip
 8000440:	42ab      	cmp	r3, r5
 8000442:	fa00 f40e 	lsl.w	r4, r0, lr
 8000446:	d909      	bls.n	800045c <__udivmoddi4+0x1bc>
 8000448:	19ed      	adds	r5, r5, r7
 800044a:	f101 30ff 	add.w	r0, r1, #4294967295
 800044e:	f080 808a 	bcs.w	8000566 <__udivmoddi4+0x2c6>
 8000452:	42ab      	cmp	r3, r5
 8000454:	f240 8087 	bls.w	8000566 <__udivmoddi4+0x2c6>
 8000458:	3902      	subs	r1, #2
 800045a:	443d      	add	r5, r7
 800045c:	1aeb      	subs	r3, r5, r3
 800045e:	fa1f f588 	uxth.w	r5, r8
 8000462:	fbb3 f0f2 	udiv	r0, r3, r2
 8000466:	fb02 3310 	mls	r3, r2, r0, r3
 800046a:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 800046e:	fb00 f30c 	mul.w	r3, r0, ip
 8000472:	42ab      	cmp	r3, r5
 8000474:	d907      	bls.n	8000486 <__udivmoddi4+0x1e6>
 8000476:	19ed      	adds	r5, r5, r7
 8000478:	f100 38ff 	add.w	r8, r0, #4294967295
 800047c:	d26f      	bcs.n	800055e <__udivmoddi4+0x2be>
 800047e:	42ab      	cmp	r3, r5
 8000480:	d96d      	bls.n	800055e <__udivmoddi4+0x2be>
 8000482:	3802      	subs	r0, #2
 8000484:	443d      	add	r5, r7
 8000486:	1aeb      	subs	r3, r5, r3
 8000488:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800048c:	e78f      	b.n	80003ae <__udivmoddi4+0x10e>
 800048e:	f1c1 0720 	rsb	r7, r1, #32
 8000492:	fa22 f807 	lsr.w	r8, r2, r7
 8000496:	408b      	lsls	r3, r1
 8000498:	fa05 f401 	lsl.w	r4, r5, r1
 800049c:	ea48 0303 	orr.w	r3, r8, r3
 80004a0:	fa20 fe07 	lsr.w	lr, r0, r7
 80004a4:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 80004a8:	40fd      	lsrs	r5, r7
 80004aa:	ea4e 0e04 	orr.w	lr, lr, r4
 80004ae:	fbb5 f9fc 	udiv	r9, r5, ip
 80004b2:	ea4f 441e 	mov.w	r4, lr, lsr #16
 80004b6:	fb0c 5519 	mls	r5, ip, r9, r5
 80004ba:	fa1f f883 	uxth.w	r8, r3
 80004be:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 80004c2:	fb09 f408 	mul.w	r4, r9, r8
 80004c6:	42ac      	cmp	r4, r5
 80004c8:	fa02 f201 	lsl.w	r2, r2, r1
 80004cc:	fa00 fa01 	lsl.w	sl, r0, r1
 80004d0:	d908      	bls.n	80004e4 <__udivmoddi4+0x244>
 80004d2:	18ed      	adds	r5, r5, r3
 80004d4:	f109 30ff 	add.w	r0, r9, #4294967295
 80004d8:	d243      	bcs.n	8000562 <__udivmoddi4+0x2c2>
 80004da:	42ac      	cmp	r4, r5
 80004dc:	d941      	bls.n	8000562 <__udivmoddi4+0x2c2>
 80004de:	f1a9 0902 	sub.w	r9, r9, #2
 80004e2:	441d      	add	r5, r3
 80004e4:	1b2d      	subs	r5, r5, r4
 80004e6:	fa1f fe8e 	uxth.w	lr, lr
 80004ea:	fbb5 f0fc 	udiv	r0, r5, ip
 80004ee:	fb0c 5510 	mls	r5, ip, r0, r5
 80004f2:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 80004f6:	fb00 f808 	mul.w	r8, r0, r8
 80004fa:	45a0      	cmp	r8, r4
 80004fc:	d907      	bls.n	800050e <__udivmoddi4+0x26e>
 80004fe:	18e4      	adds	r4, r4, r3
 8000500:	f100 35ff 	add.w	r5, r0, #4294967295
 8000504:	d229      	bcs.n	800055a <__udivmoddi4+0x2ba>
 8000506:	45a0      	cmp	r8, r4
 8000508:	d927      	bls.n	800055a <__udivmoddi4+0x2ba>
 800050a:	3802      	subs	r0, #2
 800050c:	441c      	add	r4, r3
 800050e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000512:	eba4 0408 	sub.w	r4, r4, r8
 8000516:	fba0 8902 	umull	r8, r9, r0, r2
 800051a:	454c      	cmp	r4, r9
 800051c:	46c6      	mov	lr, r8
 800051e:	464d      	mov	r5, r9
 8000520:	d315      	bcc.n	800054e <__udivmoddi4+0x2ae>
 8000522:	d012      	beq.n	800054a <__udivmoddi4+0x2aa>
 8000524:	b156      	cbz	r6, 800053c <__udivmoddi4+0x29c>
 8000526:	ebba 030e 	subs.w	r3, sl, lr
 800052a:	eb64 0405 	sbc.w	r4, r4, r5
 800052e:	fa04 f707 	lsl.w	r7, r4, r7
 8000532:	40cb      	lsrs	r3, r1
 8000534:	431f      	orrs	r7, r3
 8000536:	40cc      	lsrs	r4, r1
 8000538:	6037      	str	r7, [r6, #0]
 800053a:	6074      	str	r4, [r6, #4]
 800053c:	2100      	movs	r1, #0
 800053e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000542:	4618      	mov	r0, r3
 8000544:	e6f8      	b.n	8000338 <__udivmoddi4+0x98>
 8000546:	4690      	mov	r8, r2
 8000548:	e6e0      	b.n	800030c <__udivmoddi4+0x6c>
 800054a:	45c2      	cmp	sl, r8
 800054c:	d2ea      	bcs.n	8000524 <__udivmoddi4+0x284>
 800054e:	ebb8 0e02 	subs.w	lr, r8, r2
 8000552:	eb69 0503 	sbc.w	r5, r9, r3
 8000556:	3801      	subs	r0, #1
 8000558:	e7e4      	b.n	8000524 <__udivmoddi4+0x284>
 800055a:	4628      	mov	r0, r5
 800055c:	e7d7      	b.n	800050e <__udivmoddi4+0x26e>
 800055e:	4640      	mov	r0, r8
 8000560:	e791      	b.n	8000486 <__udivmoddi4+0x1e6>
 8000562:	4681      	mov	r9, r0
 8000564:	e7be      	b.n	80004e4 <__udivmoddi4+0x244>
 8000566:	4601      	mov	r1, r0
 8000568:	e778      	b.n	800045c <__udivmoddi4+0x1bc>
 800056a:	3802      	subs	r0, #2
 800056c:	443c      	add	r4, r7
 800056e:	e745      	b.n	80003fc <__udivmoddi4+0x15c>
 8000570:	4608      	mov	r0, r1
 8000572:	e708      	b.n	8000386 <__udivmoddi4+0xe6>
 8000574:	f1a8 0802 	sub.w	r8, r8, #2
 8000578:	443d      	add	r5, r7
 800057a:	e72b      	b.n	80003d4 <__udivmoddi4+0x134>

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000584:	4a0e      	ldr	r2, [pc, #56]	; (80005c0 <HAL_Init+0x40>)
 8000586:	4b0e      	ldr	r3, [pc, #56]	; (80005c0 <HAL_Init+0x40>)
 8000588:	681b      	ldr	r3, [r3, #0]
 800058a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800058e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000590:	4a0b      	ldr	r2, [pc, #44]	; (80005c0 <HAL_Init+0x40>)
 8000592:	4b0b      	ldr	r3, [pc, #44]	; (80005c0 <HAL_Init+0x40>)
 8000594:	681b      	ldr	r3, [r3, #0]
 8000596:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800059a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800059c:	4a08      	ldr	r2, [pc, #32]	; (80005c0 <HAL_Init+0x40>)
 800059e:	4b08      	ldr	r3, [pc, #32]	; (80005c0 <HAL_Init+0x40>)
 80005a0:	681b      	ldr	r3, [r3, #0]
 80005a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80005a6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80005a8:	2003      	movs	r0, #3
 80005aa:	f000 f929 	bl	8000800 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80005ae:	2000      	movs	r0, #0
 80005b0:	f000 f808 	bl	80005c4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80005b4:	f002 fe18 	bl	80031e8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80005b8:	2300      	movs	r3, #0
}
 80005ba:	4618      	mov	r0, r3
 80005bc:	bd80      	pop	{r7, pc}
 80005be:	bf00      	nop
 80005c0:	40023c00 	.word	0x40023c00

080005c4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b082      	sub	sp, #8
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80005cc:	4b12      	ldr	r3, [pc, #72]	; (8000618 <HAL_InitTick+0x54>)
 80005ce:	681a      	ldr	r2, [r3, #0]
 80005d0:	4b12      	ldr	r3, [pc, #72]	; (800061c <HAL_InitTick+0x58>)
 80005d2:	781b      	ldrb	r3, [r3, #0]
 80005d4:	4619      	mov	r1, r3
 80005d6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005da:	fbb3 f3f1 	udiv	r3, r3, r1
 80005de:	fbb2 f3f3 	udiv	r3, r2, r3
 80005e2:	4618      	mov	r0, r3
 80005e4:	f000 f941 	bl	800086a <HAL_SYSTICK_Config>
 80005e8:	4603      	mov	r3, r0
 80005ea:	2b00      	cmp	r3, #0
 80005ec:	d001      	beq.n	80005f2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80005ee:	2301      	movs	r3, #1
 80005f0:	e00e      	b.n	8000610 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	2b0f      	cmp	r3, #15
 80005f6:	d80a      	bhi.n	800060e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80005f8:	2200      	movs	r2, #0
 80005fa:	6879      	ldr	r1, [r7, #4]
 80005fc:	f04f 30ff 	mov.w	r0, #4294967295
 8000600:	f000 f909 	bl	8000816 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000604:	4a06      	ldr	r2, [pc, #24]	; (8000620 <HAL_InitTick+0x5c>)
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800060a:	2300      	movs	r3, #0
 800060c:	e000      	b.n	8000610 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800060e:	2301      	movs	r3, #1
}
 8000610:	4618      	mov	r0, r3
 8000612:	3708      	adds	r7, #8
 8000614:	46bd      	mov	sp, r7
 8000616:	bd80      	pop	{r7, pc}
 8000618:	20000008 	.word	0x20000008
 800061c:	20000004 	.word	0x20000004
 8000620:	20000000 	.word	0x20000000

08000624 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000624:	b480      	push	{r7}
 8000626:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000628:	4b06      	ldr	r3, [pc, #24]	; (8000644 <HAL_IncTick+0x20>)
 800062a:	781b      	ldrb	r3, [r3, #0]
 800062c:	461a      	mov	r2, r3
 800062e:	4b06      	ldr	r3, [pc, #24]	; (8000648 <HAL_IncTick+0x24>)
 8000630:	681b      	ldr	r3, [r3, #0]
 8000632:	4413      	add	r3, r2
 8000634:	4a04      	ldr	r2, [pc, #16]	; (8000648 <HAL_IncTick+0x24>)
 8000636:	6013      	str	r3, [r2, #0]
}
 8000638:	bf00      	nop
 800063a:	46bd      	mov	sp, r7
 800063c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000640:	4770      	bx	lr
 8000642:	bf00      	nop
 8000644:	20000004 	.word	0x20000004
 8000648:	20000210 	.word	0x20000210

0800064c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800064c:	b480      	push	{r7}
 800064e:	af00      	add	r7, sp, #0
  return uwTick;
 8000650:	4b03      	ldr	r3, [pc, #12]	; (8000660 <HAL_GetTick+0x14>)
 8000652:	681b      	ldr	r3, [r3, #0]
}
 8000654:	4618      	mov	r0, r3
 8000656:	46bd      	mov	sp, r7
 8000658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800065c:	4770      	bx	lr
 800065e:	bf00      	nop
 8000660:	20000210 	.word	0x20000210

08000664 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000664:	b480      	push	{r7}
 8000666:	b085      	sub	sp, #20
 8000668:	af00      	add	r7, sp, #0
 800066a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	f003 0307 	and.w	r3, r3, #7
 8000672:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000674:	4b0c      	ldr	r3, [pc, #48]	; (80006a8 <__NVIC_SetPriorityGrouping+0x44>)
 8000676:	68db      	ldr	r3, [r3, #12]
 8000678:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800067a:	68ba      	ldr	r2, [r7, #8]
 800067c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000680:	4013      	ands	r3, r2
 8000682:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000684:	68fb      	ldr	r3, [r7, #12]
 8000686:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000688:	68bb      	ldr	r3, [r7, #8]
 800068a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800068c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000690:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000694:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000696:	4a04      	ldr	r2, [pc, #16]	; (80006a8 <__NVIC_SetPriorityGrouping+0x44>)
 8000698:	68bb      	ldr	r3, [r7, #8]
 800069a:	60d3      	str	r3, [r2, #12]
}
 800069c:	bf00      	nop
 800069e:	3714      	adds	r7, #20
 80006a0:	46bd      	mov	sp, r7
 80006a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a6:	4770      	bx	lr
 80006a8:	e000ed00 	.word	0xe000ed00

080006ac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80006ac:	b480      	push	{r7}
 80006ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80006b0:	4b04      	ldr	r3, [pc, #16]	; (80006c4 <__NVIC_GetPriorityGrouping+0x18>)
 80006b2:	68db      	ldr	r3, [r3, #12]
 80006b4:	0a1b      	lsrs	r3, r3, #8
 80006b6:	f003 0307 	and.w	r3, r3, #7
}
 80006ba:	4618      	mov	r0, r3
 80006bc:	46bd      	mov	sp, r7
 80006be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c2:	4770      	bx	lr
 80006c4:	e000ed00 	.word	0xe000ed00

080006c8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80006c8:	b480      	push	{r7}
 80006ca:	b083      	sub	sp, #12
 80006cc:	af00      	add	r7, sp, #0
 80006ce:	4603      	mov	r3, r0
 80006d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80006d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	db0b      	blt.n	80006f2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80006da:	4909      	ldr	r1, [pc, #36]	; (8000700 <__NVIC_EnableIRQ+0x38>)
 80006dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006e0:	095b      	lsrs	r3, r3, #5
 80006e2:	79fa      	ldrb	r2, [r7, #7]
 80006e4:	f002 021f 	and.w	r2, r2, #31
 80006e8:	2001      	movs	r0, #1
 80006ea:	fa00 f202 	lsl.w	r2, r0, r2
 80006ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80006f2:	bf00      	nop
 80006f4:	370c      	adds	r7, #12
 80006f6:	46bd      	mov	sp, r7
 80006f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006fc:	4770      	bx	lr
 80006fe:	bf00      	nop
 8000700:	e000e100 	.word	0xe000e100

08000704 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000704:	b480      	push	{r7}
 8000706:	b083      	sub	sp, #12
 8000708:	af00      	add	r7, sp, #0
 800070a:	4603      	mov	r3, r0
 800070c:	6039      	str	r1, [r7, #0]
 800070e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000710:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000714:	2b00      	cmp	r3, #0
 8000716:	db0a      	blt.n	800072e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000718:	490d      	ldr	r1, [pc, #52]	; (8000750 <__NVIC_SetPriority+0x4c>)
 800071a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800071e:	683a      	ldr	r2, [r7, #0]
 8000720:	b2d2      	uxtb	r2, r2
 8000722:	0112      	lsls	r2, r2, #4
 8000724:	b2d2      	uxtb	r2, r2
 8000726:	440b      	add	r3, r1
 8000728:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800072c:	e00a      	b.n	8000744 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800072e:	4909      	ldr	r1, [pc, #36]	; (8000754 <__NVIC_SetPriority+0x50>)
 8000730:	79fb      	ldrb	r3, [r7, #7]
 8000732:	f003 030f 	and.w	r3, r3, #15
 8000736:	3b04      	subs	r3, #4
 8000738:	683a      	ldr	r2, [r7, #0]
 800073a:	b2d2      	uxtb	r2, r2
 800073c:	0112      	lsls	r2, r2, #4
 800073e:	b2d2      	uxtb	r2, r2
 8000740:	440b      	add	r3, r1
 8000742:	761a      	strb	r2, [r3, #24]
}
 8000744:	bf00      	nop
 8000746:	370c      	adds	r7, #12
 8000748:	46bd      	mov	sp, r7
 800074a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800074e:	4770      	bx	lr
 8000750:	e000e100 	.word	0xe000e100
 8000754:	e000ed00 	.word	0xe000ed00

08000758 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000758:	b480      	push	{r7}
 800075a:	b089      	sub	sp, #36	; 0x24
 800075c:	af00      	add	r7, sp, #0
 800075e:	60f8      	str	r0, [r7, #12]
 8000760:	60b9      	str	r1, [r7, #8]
 8000762:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000764:	68fb      	ldr	r3, [r7, #12]
 8000766:	f003 0307 	and.w	r3, r3, #7
 800076a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800076c:	69fb      	ldr	r3, [r7, #28]
 800076e:	f1c3 0307 	rsb	r3, r3, #7
 8000772:	2b04      	cmp	r3, #4
 8000774:	bf28      	it	cs
 8000776:	2304      	movcs	r3, #4
 8000778:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800077a:	69fb      	ldr	r3, [r7, #28]
 800077c:	3304      	adds	r3, #4
 800077e:	2b06      	cmp	r3, #6
 8000780:	d902      	bls.n	8000788 <NVIC_EncodePriority+0x30>
 8000782:	69fb      	ldr	r3, [r7, #28]
 8000784:	3b03      	subs	r3, #3
 8000786:	e000      	b.n	800078a <NVIC_EncodePriority+0x32>
 8000788:	2300      	movs	r3, #0
 800078a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800078c:	2201      	movs	r2, #1
 800078e:	69bb      	ldr	r3, [r7, #24]
 8000790:	fa02 f303 	lsl.w	r3, r2, r3
 8000794:	1e5a      	subs	r2, r3, #1
 8000796:	68bb      	ldr	r3, [r7, #8]
 8000798:	401a      	ands	r2, r3
 800079a:	697b      	ldr	r3, [r7, #20]
 800079c:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800079e:	2101      	movs	r1, #1
 80007a0:	697b      	ldr	r3, [r7, #20]
 80007a2:	fa01 f303 	lsl.w	r3, r1, r3
 80007a6:	1e59      	subs	r1, r3, #1
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007ac:	4313      	orrs	r3, r2
         );
}
 80007ae:	4618      	mov	r0, r3
 80007b0:	3724      	adds	r7, #36	; 0x24
 80007b2:	46bd      	mov	sp, r7
 80007b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b8:	4770      	bx	lr
	...

080007bc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	b082      	sub	sp, #8
 80007c0:	af00      	add	r7, sp, #0
 80007c2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	3b01      	subs	r3, #1
 80007c8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80007cc:	d301      	bcc.n	80007d2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80007ce:	2301      	movs	r3, #1
 80007d0:	e00f      	b.n	80007f2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80007d2:	4a0a      	ldr	r2, [pc, #40]	; (80007fc <SysTick_Config+0x40>)
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	3b01      	subs	r3, #1
 80007d8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80007da:	210f      	movs	r1, #15
 80007dc:	f04f 30ff 	mov.w	r0, #4294967295
 80007e0:	f7ff ff90 	bl	8000704 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80007e4:	4b05      	ldr	r3, [pc, #20]	; (80007fc <SysTick_Config+0x40>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80007ea:	4b04      	ldr	r3, [pc, #16]	; (80007fc <SysTick_Config+0x40>)
 80007ec:	2207      	movs	r2, #7
 80007ee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80007f0:	2300      	movs	r3, #0
}
 80007f2:	4618      	mov	r0, r3
 80007f4:	3708      	adds	r7, #8
 80007f6:	46bd      	mov	sp, r7
 80007f8:	bd80      	pop	{r7, pc}
 80007fa:	bf00      	nop
 80007fc:	e000e010 	.word	0xe000e010

08000800 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	b082      	sub	sp, #8
 8000804:	af00      	add	r7, sp, #0
 8000806:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000808:	6878      	ldr	r0, [r7, #4]
 800080a:	f7ff ff2b 	bl	8000664 <__NVIC_SetPriorityGrouping>
}
 800080e:	bf00      	nop
 8000810:	3708      	adds	r7, #8
 8000812:	46bd      	mov	sp, r7
 8000814:	bd80      	pop	{r7, pc}

08000816 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000816:	b580      	push	{r7, lr}
 8000818:	b086      	sub	sp, #24
 800081a:	af00      	add	r7, sp, #0
 800081c:	4603      	mov	r3, r0
 800081e:	60b9      	str	r1, [r7, #8]
 8000820:	607a      	str	r2, [r7, #4]
 8000822:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000824:	2300      	movs	r3, #0
 8000826:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000828:	f7ff ff40 	bl	80006ac <__NVIC_GetPriorityGrouping>
 800082c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800082e:	687a      	ldr	r2, [r7, #4]
 8000830:	68b9      	ldr	r1, [r7, #8]
 8000832:	6978      	ldr	r0, [r7, #20]
 8000834:	f7ff ff90 	bl	8000758 <NVIC_EncodePriority>
 8000838:	4602      	mov	r2, r0
 800083a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800083e:	4611      	mov	r1, r2
 8000840:	4618      	mov	r0, r3
 8000842:	f7ff ff5f 	bl	8000704 <__NVIC_SetPriority>
}
 8000846:	bf00      	nop
 8000848:	3718      	adds	r7, #24
 800084a:	46bd      	mov	sp, r7
 800084c:	bd80      	pop	{r7, pc}

0800084e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800084e:	b580      	push	{r7, lr}
 8000850:	b082      	sub	sp, #8
 8000852:	af00      	add	r7, sp, #0
 8000854:	4603      	mov	r3, r0
 8000856:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000858:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800085c:	4618      	mov	r0, r3
 800085e:	f7ff ff33 	bl	80006c8 <__NVIC_EnableIRQ>
}
 8000862:	bf00      	nop
 8000864:	3708      	adds	r7, #8
 8000866:	46bd      	mov	sp, r7
 8000868:	bd80      	pop	{r7, pc}

0800086a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800086a:	b580      	push	{r7, lr}
 800086c:	b082      	sub	sp, #8
 800086e:	af00      	add	r7, sp, #0
 8000870:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000872:	6878      	ldr	r0, [r7, #4]
 8000874:	f7ff ffa2 	bl	80007bc <SysTick_Config>
 8000878:	4603      	mov	r3, r0
}
 800087a:	4618      	mov	r0, r3
 800087c:	3708      	adds	r7, #8
 800087e:	46bd      	mov	sp, r7
 8000880:	bd80      	pop	{r7, pc}
	...

08000884 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000884:	b480      	push	{r7}
 8000886:	b089      	sub	sp, #36	; 0x24
 8000888:	af00      	add	r7, sp, #0
 800088a:	6078      	str	r0, [r7, #4]
 800088c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800088e:	2300      	movs	r3, #0
 8000890:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000892:	2300      	movs	r3, #0
 8000894:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000896:	2300      	movs	r3, #0
 8000898:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800089a:	2300      	movs	r3, #0
 800089c:	61fb      	str	r3, [r7, #28]
 800089e:	e16b      	b.n	8000b78 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80008a0:	2201      	movs	r2, #1
 80008a2:	69fb      	ldr	r3, [r7, #28]
 80008a4:	fa02 f303 	lsl.w	r3, r2, r3
 80008a8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80008aa:	683b      	ldr	r3, [r7, #0]
 80008ac:	681a      	ldr	r2, [r3, #0]
 80008ae:	697b      	ldr	r3, [r7, #20]
 80008b0:	4013      	ands	r3, r2
 80008b2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80008b4:	693a      	ldr	r2, [r7, #16]
 80008b6:	697b      	ldr	r3, [r7, #20]
 80008b8:	429a      	cmp	r2, r3
 80008ba:	f040 815a 	bne.w	8000b72 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80008be:	683b      	ldr	r3, [r7, #0]
 80008c0:	685b      	ldr	r3, [r3, #4]
 80008c2:	f003 0303 	and.w	r3, r3, #3
 80008c6:	2b01      	cmp	r3, #1
 80008c8:	d005      	beq.n	80008d6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80008ca:	683b      	ldr	r3, [r7, #0]
 80008cc:	685b      	ldr	r3, [r3, #4]
 80008ce:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80008d2:	2b02      	cmp	r3, #2
 80008d4:	d130      	bne.n	8000938 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	689b      	ldr	r3, [r3, #8]
 80008da:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80008dc:	69fb      	ldr	r3, [r7, #28]
 80008de:	005b      	lsls	r3, r3, #1
 80008e0:	2203      	movs	r2, #3
 80008e2:	fa02 f303 	lsl.w	r3, r2, r3
 80008e6:	43db      	mvns	r3, r3
 80008e8:	69ba      	ldr	r2, [r7, #24]
 80008ea:	4013      	ands	r3, r2
 80008ec:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80008ee:	683b      	ldr	r3, [r7, #0]
 80008f0:	68da      	ldr	r2, [r3, #12]
 80008f2:	69fb      	ldr	r3, [r7, #28]
 80008f4:	005b      	lsls	r3, r3, #1
 80008f6:	fa02 f303 	lsl.w	r3, r2, r3
 80008fa:	69ba      	ldr	r2, [r7, #24]
 80008fc:	4313      	orrs	r3, r2
 80008fe:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	69ba      	ldr	r2, [r7, #24]
 8000904:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	685b      	ldr	r3, [r3, #4]
 800090a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800090c:	2201      	movs	r2, #1
 800090e:	69fb      	ldr	r3, [r7, #28]
 8000910:	fa02 f303 	lsl.w	r3, r2, r3
 8000914:	43db      	mvns	r3, r3
 8000916:	69ba      	ldr	r2, [r7, #24]
 8000918:	4013      	ands	r3, r2
 800091a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800091c:	683b      	ldr	r3, [r7, #0]
 800091e:	685b      	ldr	r3, [r3, #4]
 8000920:	091b      	lsrs	r3, r3, #4
 8000922:	f003 0201 	and.w	r2, r3, #1
 8000926:	69fb      	ldr	r3, [r7, #28]
 8000928:	fa02 f303 	lsl.w	r3, r2, r3
 800092c:	69ba      	ldr	r2, [r7, #24]
 800092e:	4313      	orrs	r3, r2
 8000930:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	69ba      	ldr	r2, [r7, #24]
 8000936:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000938:	683b      	ldr	r3, [r7, #0]
 800093a:	685b      	ldr	r3, [r3, #4]
 800093c:	f003 0303 	and.w	r3, r3, #3
 8000940:	2b03      	cmp	r3, #3
 8000942:	d017      	beq.n	8000974 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	68db      	ldr	r3, [r3, #12]
 8000948:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800094a:	69fb      	ldr	r3, [r7, #28]
 800094c:	005b      	lsls	r3, r3, #1
 800094e:	2203      	movs	r2, #3
 8000950:	fa02 f303 	lsl.w	r3, r2, r3
 8000954:	43db      	mvns	r3, r3
 8000956:	69ba      	ldr	r2, [r7, #24]
 8000958:	4013      	ands	r3, r2
 800095a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800095c:	683b      	ldr	r3, [r7, #0]
 800095e:	689a      	ldr	r2, [r3, #8]
 8000960:	69fb      	ldr	r3, [r7, #28]
 8000962:	005b      	lsls	r3, r3, #1
 8000964:	fa02 f303 	lsl.w	r3, r2, r3
 8000968:	69ba      	ldr	r2, [r7, #24]
 800096a:	4313      	orrs	r3, r2
 800096c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	69ba      	ldr	r2, [r7, #24]
 8000972:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000974:	683b      	ldr	r3, [r7, #0]
 8000976:	685b      	ldr	r3, [r3, #4]
 8000978:	f003 0303 	and.w	r3, r3, #3
 800097c:	2b02      	cmp	r3, #2
 800097e:	d123      	bne.n	80009c8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000980:	69fb      	ldr	r3, [r7, #28]
 8000982:	08da      	lsrs	r2, r3, #3
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	3208      	adds	r2, #8
 8000988:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800098c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800098e:	69fb      	ldr	r3, [r7, #28]
 8000990:	f003 0307 	and.w	r3, r3, #7
 8000994:	009b      	lsls	r3, r3, #2
 8000996:	220f      	movs	r2, #15
 8000998:	fa02 f303 	lsl.w	r3, r2, r3
 800099c:	43db      	mvns	r3, r3
 800099e:	69ba      	ldr	r2, [r7, #24]
 80009a0:	4013      	ands	r3, r2
 80009a2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80009a4:	683b      	ldr	r3, [r7, #0]
 80009a6:	691a      	ldr	r2, [r3, #16]
 80009a8:	69fb      	ldr	r3, [r7, #28]
 80009aa:	f003 0307 	and.w	r3, r3, #7
 80009ae:	009b      	lsls	r3, r3, #2
 80009b0:	fa02 f303 	lsl.w	r3, r2, r3
 80009b4:	69ba      	ldr	r2, [r7, #24]
 80009b6:	4313      	orrs	r3, r2
 80009b8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80009ba:	69fb      	ldr	r3, [r7, #28]
 80009bc:	08da      	lsrs	r2, r3, #3
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	3208      	adds	r2, #8
 80009c2:	69b9      	ldr	r1, [r7, #24]
 80009c4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	681b      	ldr	r3, [r3, #0]
 80009cc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80009ce:	69fb      	ldr	r3, [r7, #28]
 80009d0:	005b      	lsls	r3, r3, #1
 80009d2:	2203      	movs	r2, #3
 80009d4:	fa02 f303 	lsl.w	r3, r2, r3
 80009d8:	43db      	mvns	r3, r3
 80009da:	69ba      	ldr	r2, [r7, #24]
 80009dc:	4013      	ands	r3, r2
 80009de:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80009e0:	683b      	ldr	r3, [r7, #0]
 80009e2:	685b      	ldr	r3, [r3, #4]
 80009e4:	f003 0203 	and.w	r2, r3, #3
 80009e8:	69fb      	ldr	r3, [r7, #28]
 80009ea:	005b      	lsls	r3, r3, #1
 80009ec:	fa02 f303 	lsl.w	r3, r2, r3
 80009f0:	69ba      	ldr	r2, [r7, #24]
 80009f2:	4313      	orrs	r3, r2
 80009f4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	69ba      	ldr	r2, [r7, #24]
 80009fa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80009fc:	683b      	ldr	r3, [r7, #0]
 80009fe:	685b      	ldr	r3, [r3, #4]
 8000a00:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	f000 80b4 	beq.w	8000b72 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	60fb      	str	r3, [r7, #12]
 8000a0e:	4a5f      	ldr	r2, [pc, #380]	; (8000b8c <HAL_GPIO_Init+0x308>)
 8000a10:	4b5e      	ldr	r3, [pc, #376]	; (8000b8c <HAL_GPIO_Init+0x308>)
 8000a12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a14:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a18:	6453      	str	r3, [r2, #68]	; 0x44
 8000a1a:	4b5c      	ldr	r3, [pc, #368]	; (8000b8c <HAL_GPIO_Init+0x308>)
 8000a1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a1e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a22:	60fb      	str	r3, [r7, #12]
 8000a24:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000a26:	4a5a      	ldr	r2, [pc, #360]	; (8000b90 <HAL_GPIO_Init+0x30c>)
 8000a28:	69fb      	ldr	r3, [r7, #28]
 8000a2a:	089b      	lsrs	r3, r3, #2
 8000a2c:	3302      	adds	r3, #2
 8000a2e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a32:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000a34:	69fb      	ldr	r3, [r7, #28]
 8000a36:	f003 0303 	and.w	r3, r3, #3
 8000a3a:	009b      	lsls	r3, r3, #2
 8000a3c:	220f      	movs	r2, #15
 8000a3e:	fa02 f303 	lsl.w	r3, r2, r3
 8000a42:	43db      	mvns	r3, r3
 8000a44:	69ba      	ldr	r2, [r7, #24]
 8000a46:	4013      	ands	r3, r2
 8000a48:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	4a51      	ldr	r2, [pc, #324]	; (8000b94 <HAL_GPIO_Init+0x310>)
 8000a4e:	4293      	cmp	r3, r2
 8000a50:	d02b      	beq.n	8000aaa <HAL_GPIO_Init+0x226>
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	4a50      	ldr	r2, [pc, #320]	; (8000b98 <HAL_GPIO_Init+0x314>)
 8000a56:	4293      	cmp	r3, r2
 8000a58:	d025      	beq.n	8000aa6 <HAL_GPIO_Init+0x222>
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	4a4f      	ldr	r2, [pc, #316]	; (8000b9c <HAL_GPIO_Init+0x318>)
 8000a5e:	4293      	cmp	r3, r2
 8000a60:	d01f      	beq.n	8000aa2 <HAL_GPIO_Init+0x21e>
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	4a4e      	ldr	r2, [pc, #312]	; (8000ba0 <HAL_GPIO_Init+0x31c>)
 8000a66:	4293      	cmp	r3, r2
 8000a68:	d019      	beq.n	8000a9e <HAL_GPIO_Init+0x21a>
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	4a4d      	ldr	r2, [pc, #308]	; (8000ba4 <HAL_GPIO_Init+0x320>)
 8000a6e:	4293      	cmp	r3, r2
 8000a70:	d013      	beq.n	8000a9a <HAL_GPIO_Init+0x216>
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	4a4c      	ldr	r2, [pc, #304]	; (8000ba8 <HAL_GPIO_Init+0x324>)
 8000a76:	4293      	cmp	r3, r2
 8000a78:	d00d      	beq.n	8000a96 <HAL_GPIO_Init+0x212>
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	4a4b      	ldr	r2, [pc, #300]	; (8000bac <HAL_GPIO_Init+0x328>)
 8000a7e:	4293      	cmp	r3, r2
 8000a80:	d007      	beq.n	8000a92 <HAL_GPIO_Init+0x20e>
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	4a4a      	ldr	r2, [pc, #296]	; (8000bb0 <HAL_GPIO_Init+0x32c>)
 8000a86:	4293      	cmp	r3, r2
 8000a88:	d101      	bne.n	8000a8e <HAL_GPIO_Init+0x20a>
 8000a8a:	2307      	movs	r3, #7
 8000a8c:	e00e      	b.n	8000aac <HAL_GPIO_Init+0x228>
 8000a8e:	2308      	movs	r3, #8
 8000a90:	e00c      	b.n	8000aac <HAL_GPIO_Init+0x228>
 8000a92:	2306      	movs	r3, #6
 8000a94:	e00a      	b.n	8000aac <HAL_GPIO_Init+0x228>
 8000a96:	2305      	movs	r3, #5
 8000a98:	e008      	b.n	8000aac <HAL_GPIO_Init+0x228>
 8000a9a:	2304      	movs	r3, #4
 8000a9c:	e006      	b.n	8000aac <HAL_GPIO_Init+0x228>
 8000a9e:	2303      	movs	r3, #3
 8000aa0:	e004      	b.n	8000aac <HAL_GPIO_Init+0x228>
 8000aa2:	2302      	movs	r3, #2
 8000aa4:	e002      	b.n	8000aac <HAL_GPIO_Init+0x228>
 8000aa6:	2301      	movs	r3, #1
 8000aa8:	e000      	b.n	8000aac <HAL_GPIO_Init+0x228>
 8000aaa:	2300      	movs	r3, #0
 8000aac:	69fa      	ldr	r2, [r7, #28]
 8000aae:	f002 0203 	and.w	r2, r2, #3
 8000ab2:	0092      	lsls	r2, r2, #2
 8000ab4:	4093      	lsls	r3, r2
 8000ab6:	69ba      	ldr	r2, [r7, #24]
 8000ab8:	4313      	orrs	r3, r2
 8000aba:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000abc:	4934      	ldr	r1, [pc, #208]	; (8000b90 <HAL_GPIO_Init+0x30c>)
 8000abe:	69fb      	ldr	r3, [r7, #28]
 8000ac0:	089b      	lsrs	r3, r3, #2
 8000ac2:	3302      	adds	r3, #2
 8000ac4:	69ba      	ldr	r2, [r7, #24]
 8000ac6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000aca:	4b3a      	ldr	r3, [pc, #232]	; (8000bb4 <HAL_GPIO_Init+0x330>)
 8000acc:	689b      	ldr	r3, [r3, #8]
 8000ace:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ad0:	693b      	ldr	r3, [r7, #16]
 8000ad2:	43db      	mvns	r3, r3
 8000ad4:	69ba      	ldr	r2, [r7, #24]
 8000ad6:	4013      	ands	r3, r2
 8000ad8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000ada:	683b      	ldr	r3, [r7, #0]
 8000adc:	685b      	ldr	r3, [r3, #4]
 8000ade:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	d003      	beq.n	8000aee <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8000ae6:	69ba      	ldr	r2, [r7, #24]
 8000ae8:	693b      	ldr	r3, [r7, #16]
 8000aea:	4313      	orrs	r3, r2
 8000aec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000aee:	4a31      	ldr	r2, [pc, #196]	; (8000bb4 <HAL_GPIO_Init+0x330>)
 8000af0:	69bb      	ldr	r3, [r7, #24]
 8000af2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000af4:	4b2f      	ldr	r3, [pc, #188]	; (8000bb4 <HAL_GPIO_Init+0x330>)
 8000af6:	68db      	ldr	r3, [r3, #12]
 8000af8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000afa:	693b      	ldr	r3, [r7, #16]
 8000afc:	43db      	mvns	r3, r3
 8000afe:	69ba      	ldr	r2, [r7, #24]
 8000b00:	4013      	ands	r3, r2
 8000b02:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000b04:	683b      	ldr	r3, [r7, #0]
 8000b06:	685b      	ldr	r3, [r3, #4]
 8000b08:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	d003      	beq.n	8000b18 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8000b10:	69ba      	ldr	r2, [r7, #24]
 8000b12:	693b      	ldr	r3, [r7, #16]
 8000b14:	4313      	orrs	r3, r2
 8000b16:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000b18:	4a26      	ldr	r2, [pc, #152]	; (8000bb4 <HAL_GPIO_Init+0x330>)
 8000b1a:	69bb      	ldr	r3, [r7, #24]
 8000b1c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000b1e:	4b25      	ldr	r3, [pc, #148]	; (8000bb4 <HAL_GPIO_Init+0x330>)
 8000b20:	685b      	ldr	r3, [r3, #4]
 8000b22:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000b24:	693b      	ldr	r3, [r7, #16]
 8000b26:	43db      	mvns	r3, r3
 8000b28:	69ba      	ldr	r2, [r7, #24]
 8000b2a:	4013      	ands	r3, r2
 8000b2c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000b2e:	683b      	ldr	r3, [r7, #0]
 8000b30:	685b      	ldr	r3, [r3, #4]
 8000b32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d003      	beq.n	8000b42 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8000b3a:	69ba      	ldr	r2, [r7, #24]
 8000b3c:	693b      	ldr	r3, [r7, #16]
 8000b3e:	4313      	orrs	r3, r2
 8000b40:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000b42:	4a1c      	ldr	r2, [pc, #112]	; (8000bb4 <HAL_GPIO_Init+0x330>)
 8000b44:	69bb      	ldr	r3, [r7, #24]
 8000b46:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000b48:	4b1a      	ldr	r3, [pc, #104]	; (8000bb4 <HAL_GPIO_Init+0x330>)
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000b4e:	693b      	ldr	r3, [r7, #16]
 8000b50:	43db      	mvns	r3, r3
 8000b52:	69ba      	ldr	r2, [r7, #24]
 8000b54:	4013      	ands	r3, r2
 8000b56:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000b58:	683b      	ldr	r3, [r7, #0]
 8000b5a:	685b      	ldr	r3, [r3, #4]
 8000b5c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d003      	beq.n	8000b6c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8000b64:	69ba      	ldr	r2, [r7, #24]
 8000b66:	693b      	ldr	r3, [r7, #16]
 8000b68:	4313      	orrs	r3, r2
 8000b6a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000b6c:	4a11      	ldr	r2, [pc, #68]	; (8000bb4 <HAL_GPIO_Init+0x330>)
 8000b6e:	69bb      	ldr	r3, [r7, #24]
 8000b70:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000b72:	69fb      	ldr	r3, [r7, #28]
 8000b74:	3301      	adds	r3, #1
 8000b76:	61fb      	str	r3, [r7, #28]
 8000b78:	69fb      	ldr	r3, [r7, #28]
 8000b7a:	2b0f      	cmp	r3, #15
 8000b7c:	f67f ae90 	bls.w	80008a0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000b80:	bf00      	nop
 8000b82:	3724      	adds	r7, #36	; 0x24
 8000b84:	46bd      	mov	sp, r7
 8000b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8a:	4770      	bx	lr
 8000b8c:	40023800 	.word	0x40023800
 8000b90:	40013800 	.word	0x40013800
 8000b94:	40020000 	.word	0x40020000
 8000b98:	40020400 	.word	0x40020400
 8000b9c:	40020800 	.word	0x40020800
 8000ba0:	40020c00 	.word	0x40020c00
 8000ba4:	40021000 	.word	0x40021000
 8000ba8:	40021400 	.word	0x40021400
 8000bac:	40021800 	.word	0x40021800
 8000bb0:	40021c00 	.word	0x40021c00
 8000bb4:	40013c00 	.word	0x40013c00

08000bb8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000bb8:	b480      	push	{r7}
 8000bba:	b083      	sub	sp, #12
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	6078      	str	r0, [r7, #4]
 8000bc0:	460b      	mov	r3, r1
 8000bc2:	807b      	strh	r3, [r7, #2]
 8000bc4:	4613      	mov	r3, r2
 8000bc6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000bc8:	787b      	ldrb	r3, [r7, #1]
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d003      	beq.n	8000bd6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000bce:	887a      	ldrh	r2, [r7, #2]
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000bd4:	e003      	b.n	8000bde <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000bd6:	887b      	ldrh	r3, [r7, #2]
 8000bd8:	041a      	lsls	r2, r3, #16
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	619a      	str	r2, [r3, #24]
}
 8000bde:	bf00      	nop
 8000be0:	370c      	adds	r7, #12
 8000be2:	46bd      	mov	sp, r7
 8000be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be8:	4770      	bx	lr

08000bea <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000bea:	b480      	push	{r7}
 8000bec:	b085      	sub	sp, #20
 8000bee:	af00      	add	r7, sp, #0
 8000bf0:	6078      	str	r0, [r7, #4]
 8000bf2:	460b      	mov	r3, r1
 8000bf4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	695b      	ldr	r3, [r3, #20]
 8000bfa:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000bfc:	887a      	ldrh	r2, [r7, #2]
 8000bfe:	68fb      	ldr	r3, [r7, #12]
 8000c00:	4013      	ands	r3, r2
 8000c02:	041a      	lsls	r2, r3, #16
 8000c04:	68fb      	ldr	r3, [r7, #12]
 8000c06:	43d9      	mvns	r1, r3
 8000c08:	887b      	ldrh	r3, [r7, #2]
 8000c0a:	400b      	ands	r3, r1
 8000c0c:	431a      	orrs	r2, r3
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	619a      	str	r2, [r3, #24]
}
 8000c12:	bf00      	nop
 8000c14:	3714      	adds	r7, #20
 8000c16:	46bd      	mov	sp, r7
 8000c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1c:	4770      	bx	lr
	...

08000c20 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b082      	sub	sp, #8
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	4603      	mov	r3, r0
 8000c28:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8000c2a:	4b08      	ldr	r3, [pc, #32]	; (8000c4c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000c2c:	695a      	ldr	r2, [r3, #20]
 8000c2e:	88fb      	ldrh	r3, [r7, #6]
 8000c30:	4013      	ands	r3, r2
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d006      	beq.n	8000c44 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000c36:	4a05      	ldr	r2, [pc, #20]	; (8000c4c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000c38:	88fb      	ldrh	r3, [r7, #6]
 8000c3a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000c3c:	88fb      	ldrh	r3, [r7, #6]
 8000c3e:	4618      	mov	r0, r3
 8000c40:	f002 f9da 	bl	8002ff8 <HAL_GPIO_EXTI_Callback>
  }
}
 8000c44:	bf00      	nop
 8000c46:	3708      	adds	r7, #8
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	bd80      	pop	{r7, pc}
 8000c4c:	40013c00 	.word	0x40013c00

08000c50 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b086      	sub	sp, #24
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d101      	bne.n	8000c62 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000c5e:	2301      	movs	r3, #1
 8000c60:	e264      	b.n	800112c <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	f003 0301 	and.w	r3, r3, #1
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d075      	beq.n	8000d5a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000c6e:	4ba3      	ldr	r3, [pc, #652]	; (8000efc <HAL_RCC_OscConfig+0x2ac>)
 8000c70:	689b      	ldr	r3, [r3, #8]
 8000c72:	f003 030c 	and.w	r3, r3, #12
 8000c76:	2b04      	cmp	r3, #4
 8000c78:	d00c      	beq.n	8000c94 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000c7a:	4ba0      	ldr	r3, [pc, #640]	; (8000efc <HAL_RCC_OscConfig+0x2ac>)
 8000c7c:	689b      	ldr	r3, [r3, #8]
 8000c7e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000c82:	2b08      	cmp	r3, #8
 8000c84:	d112      	bne.n	8000cac <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000c86:	4b9d      	ldr	r3, [pc, #628]	; (8000efc <HAL_RCC_OscConfig+0x2ac>)
 8000c88:	685b      	ldr	r3, [r3, #4]
 8000c8a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000c8e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8000c92:	d10b      	bne.n	8000cac <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000c94:	4b99      	ldr	r3, [pc, #612]	; (8000efc <HAL_RCC_OscConfig+0x2ac>)
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d05b      	beq.n	8000d58 <HAL_RCC_OscConfig+0x108>
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	685b      	ldr	r3, [r3, #4]
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d157      	bne.n	8000d58 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8000ca8:	2301      	movs	r3, #1
 8000caa:	e23f      	b.n	800112c <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	685b      	ldr	r3, [r3, #4]
 8000cb0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000cb4:	d106      	bne.n	8000cc4 <HAL_RCC_OscConfig+0x74>
 8000cb6:	4a91      	ldr	r2, [pc, #580]	; (8000efc <HAL_RCC_OscConfig+0x2ac>)
 8000cb8:	4b90      	ldr	r3, [pc, #576]	; (8000efc <HAL_RCC_OscConfig+0x2ac>)
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000cc0:	6013      	str	r3, [r2, #0]
 8000cc2:	e01d      	b.n	8000d00 <HAL_RCC_OscConfig+0xb0>
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	685b      	ldr	r3, [r3, #4]
 8000cc8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000ccc:	d10c      	bne.n	8000ce8 <HAL_RCC_OscConfig+0x98>
 8000cce:	4a8b      	ldr	r2, [pc, #556]	; (8000efc <HAL_RCC_OscConfig+0x2ac>)
 8000cd0:	4b8a      	ldr	r3, [pc, #552]	; (8000efc <HAL_RCC_OscConfig+0x2ac>)
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000cd8:	6013      	str	r3, [r2, #0]
 8000cda:	4a88      	ldr	r2, [pc, #544]	; (8000efc <HAL_RCC_OscConfig+0x2ac>)
 8000cdc:	4b87      	ldr	r3, [pc, #540]	; (8000efc <HAL_RCC_OscConfig+0x2ac>)
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000ce4:	6013      	str	r3, [r2, #0]
 8000ce6:	e00b      	b.n	8000d00 <HAL_RCC_OscConfig+0xb0>
 8000ce8:	4a84      	ldr	r2, [pc, #528]	; (8000efc <HAL_RCC_OscConfig+0x2ac>)
 8000cea:	4b84      	ldr	r3, [pc, #528]	; (8000efc <HAL_RCC_OscConfig+0x2ac>)
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000cf2:	6013      	str	r3, [r2, #0]
 8000cf4:	4a81      	ldr	r2, [pc, #516]	; (8000efc <HAL_RCC_OscConfig+0x2ac>)
 8000cf6:	4b81      	ldr	r3, [pc, #516]	; (8000efc <HAL_RCC_OscConfig+0x2ac>)
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000cfe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	685b      	ldr	r3, [r3, #4]
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d013      	beq.n	8000d30 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d08:	f7ff fca0 	bl	800064c <HAL_GetTick>
 8000d0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d0e:	e008      	b.n	8000d22 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000d10:	f7ff fc9c 	bl	800064c <HAL_GetTick>
 8000d14:	4602      	mov	r2, r0
 8000d16:	693b      	ldr	r3, [r7, #16]
 8000d18:	1ad3      	subs	r3, r2, r3
 8000d1a:	2b64      	cmp	r3, #100	; 0x64
 8000d1c:	d901      	bls.n	8000d22 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8000d1e:	2303      	movs	r3, #3
 8000d20:	e204      	b.n	800112c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d22:	4b76      	ldr	r3, [pc, #472]	; (8000efc <HAL_RCC_OscConfig+0x2ac>)
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d0f0      	beq.n	8000d10 <HAL_RCC_OscConfig+0xc0>
 8000d2e:	e014      	b.n	8000d5a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d30:	f7ff fc8c 	bl	800064c <HAL_GetTick>
 8000d34:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000d36:	e008      	b.n	8000d4a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000d38:	f7ff fc88 	bl	800064c <HAL_GetTick>
 8000d3c:	4602      	mov	r2, r0
 8000d3e:	693b      	ldr	r3, [r7, #16]
 8000d40:	1ad3      	subs	r3, r2, r3
 8000d42:	2b64      	cmp	r3, #100	; 0x64
 8000d44:	d901      	bls.n	8000d4a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8000d46:	2303      	movs	r3, #3
 8000d48:	e1f0      	b.n	800112c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000d4a:	4b6c      	ldr	r3, [pc, #432]	; (8000efc <HAL_RCC_OscConfig+0x2ac>)
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d1f0      	bne.n	8000d38 <HAL_RCC_OscConfig+0xe8>
 8000d56:	e000      	b.n	8000d5a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000d58:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	f003 0302 	and.w	r3, r3, #2
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d063      	beq.n	8000e2e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000d66:	4b65      	ldr	r3, [pc, #404]	; (8000efc <HAL_RCC_OscConfig+0x2ac>)
 8000d68:	689b      	ldr	r3, [r3, #8]
 8000d6a:	f003 030c 	and.w	r3, r3, #12
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d00b      	beq.n	8000d8a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000d72:	4b62      	ldr	r3, [pc, #392]	; (8000efc <HAL_RCC_OscConfig+0x2ac>)
 8000d74:	689b      	ldr	r3, [r3, #8]
 8000d76:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000d7a:	2b08      	cmp	r3, #8
 8000d7c:	d11c      	bne.n	8000db8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000d7e:	4b5f      	ldr	r3, [pc, #380]	; (8000efc <HAL_RCC_OscConfig+0x2ac>)
 8000d80:	685b      	ldr	r3, [r3, #4]
 8000d82:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d116      	bne.n	8000db8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000d8a:	4b5c      	ldr	r3, [pc, #368]	; (8000efc <HAL_RCC_OscConfig+0x2ac>)
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	f003 0302 	and.w	r3, r3, #2
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d005      	beq.n	8000da2 <HAL_RCC_OscConfig+0x152>
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	68db      	ldr	r3, [r3, #12]
 8000d9a:	2b01      	cmp	r3, #1
 8000d9c:	d001      	beq.n	8000da2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8000d9e:	2301      	movs	r3, #1
 8000da0:	e1c4      	b.n	800112c <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000da2:	4956      	ldr	r1, [pc, #344]	; (8000efc <HAL_RCC_OscConfig+0x2ac>)
 8000da4:	4b55      	ldr	r3, [pc, #340]	; (8000efc <HAL_RCC_OscConfig+0x2ac>)
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	691b      	ldr	r3, [r3, #16]
 8000db0:	00db      	lsls	r3, r3, #3
 8000db2:	4313      	orrs	r3, r2
 8000db4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000db6:	e03a      	b.n	8000e2e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	68db      	ldr	r3, [r3, #12]
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	d020      	beq.n	8000e02 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000dc0:	4b4f      	ldr	r3, [pc, #316]	; (8000f00 <HAL_RCC_OscConfig+0x2b0>)
 8000dc2:	2201      	movs	r2, #1
 8000dc4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000dc6:	f7ff fc41 	bl	800064c <HAL_GetTick>
 8000dca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000dcc:	e008      	b.n	8000de0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000dce:	f7ff fc3d 	bl	800064c <HAL_GetTick>
 8000dd2:	4602      	mov	r2, r0
 8000dd4:	693b      	ldr	r3, [r7, #16]
 8000dd6:	1ad3      	subs	r3, r2, r3
 8000dd8:	2b02      	cmp	r3, #2
 8000dda:	d901      	bls.n	8000de0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8000ddc:	2303      	movs	r3, #3
 8000dde:	e1a5      	b.n	800112c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000de0:	4b46      	ldr	r3, [pc, #280]	; (8000efc <HAL_RCC_OscConfig+0x2ac>)
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	f003 0302 	and.w	r3, r3, #2
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	d0f0      	beq.n	8000dce <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000dec:	4943      	ldr	r1, [pc, #268]	; (8000efc <HAL_RCC_OscConfig+0x2ac>)
 8000dee:	4b43      	ldr	r3, [pc, #268]	; (8000efc <HAL_RCC_OscConfig+0x2ac>)
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	691b      	ldr	r3, [r3, #16]
 8000dfa:	00db      	lsls	r3, r3, #3
 8000dfc:	4313      	orrs	r3, r2
 8000dfe:	600b      	str	r3, [r1, #0]
 8000e00:	e015      	b.n	8000e2e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000e02:	4b3f      	ldr	r3, [pc, #252]	; (8000f00 <HAL_RCC_OscConfig+0x2b0>)
 8000e04:	2200      	movs	r2, #0
 8000e06:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000e08:	f7ff fc20 	bl	800064c <HAL_GetTick>
 8000e0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000e0e:	e008      	b.n	8000e22 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000e10:	f7ff fc1c 	bl	800064c <HAL_GetTick>
 8000e14:	4602      	mov	r2, r0
 8000e16:	693b      	ldr	r3, [r7, #16]
 8000e18:	1ad3      	subs	r3, r2, r3
 8000e1a:	2b02      	cmp	r3, #2
 8000e1c:	d901      	bls.n	8000e22 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8000e1e:	2303      	movs	r3, #3
 8000e20:	e184      	b.n	800112c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000e22:	4b36      	ldr	r3, [pc, #216]	; (8000efc <HAL_RCC_OscConfig+0x2ac>)
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	f003 0302 	and.w	r3, r3, #2
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d1f0      	bne.n	8000e10 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	f003 0308 	and.w	r3, r3, #8
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d030      	beq.n	8000e9c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	695b      	ldr	r3, [r3, #20]
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d016      	beq.n	8000e70 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000e42:	4b30      	ldr	r3, [pc, #192]	; (8000f04 <HAL_RCC_OscConfig+0x2b4>)
 8000e44:	2201      	movs	r2, #1
 8000e46:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000e48:	f7ff fc00 	bl	800064c <HAL_GetTick>
 8000e4c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000e4e:	e008      	b.n	8000e62 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000e50:	f7ff fbfc 	bl	800064c <HAL_GetTick>
 8000e54:	4602      	mov	r2, r0
 8000e56:	693b      	ldr	r3, [r7, #16]
 8000e58:	1ad3      	subs	r3, r2, r3
 8000e5a:	2b02      	cmp	r3, #2
 8000e5c:	d901      	bls.n	8000e62 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8000e5e:	2303      	movs	r3, #3
 8000e60:	e164      	b.n	800112c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000e62:	4b26      	ldr	r3, [pc, #152]	; (8000efc <HAL_RCC_OscConfig+0x2ac>)
 8000e64:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000e66:	f003 0302 	and.w	r3, r3, #2
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d0f0      	beq.n	8000e50 <HAL_RCC_OscConfig+0x200>
 8000e6e:	e015      	b.n	8000e9c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000e70:	4b24      	ldr	r3, [pc, #144]	; (8000f04 <HAL_RCC_OscConfig+0x2b4>)
 8000e72:	2200      	movs	r2, #0
 8000e74:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000e76:	f7ff fbe9 	bl	800064c <HAL_GetTick>
 8000e7a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000e7c:	e008      	b.n	8000e90 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000e7e:	f7ff fbe5 	bl	800064c <HAL_GetTick>
 8000e82:	4602      	mov	r2, r0
 8000e84:	693b      	ldr	r3, [r7, #16]
 8000e86:	1ad3      	subs	r3, r2, r3
 8000e88:	2b02      	cmp	r3, #2
 8000e8a:	d901      	bls.n	8000e90 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8000e8c:	2303      	movs	r3, #3
 8000e8e:	e14d      	b.n	800112c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000e90:	4b1a      	ldr	r3, [pc, #104]	; (8000efc <HAL_RCC_OscConfig+0x2ac>)
 8000e92:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000e94:	f003 0302 	and.w	r3, r3, #2
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d1f0      	bne.n	8000e7e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	f003 0304 	and.w	r3, r3, #4
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	f000 80a0 	beq.w	8000fea <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000eaa:	2300      	movs	r3, #0
 8000eac:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000eae:	4b13      	ldr	r3, [pc, #76]	; (8000efc <HAL_RCC_OscConfig+0x2ac>)
 8000eb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eb2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d10f      	bne.n	8000eda <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000eba:	2300      	movs	r3, #0
 8000ebc:	60bb      	str	r3, [r7, #8]
 8000ebe:	4a0f      	ldr	r2, [pc, #60]	; (8000efc <HAL_RCC_OscConfig+0x2ac>)
 8000ec0:	4b0e      	ldr	r3, [pc, #56]	; (8000efc <HAL_RCC_OscConfig+0x2ac>)
 8000ec2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ec4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ec8:	6413      	str	r3, [r2, #64]	; 0x40
 8000eca:	4b0c      	ldr	r3, [pc, #48]	; (8000efc <HAL_RCC_OscConfig+0x2ac>)
 8000ecc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ece:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ed2:	60bb      	str	r3, [r7, #8]
 8000ed4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000ed6:	2301      	movs	r3, #1
 8000ed8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000eda:	4b0b      	ldr	r3, [pc, #44]	; (8000f08 <HAL_RCC_OscConfig+0x2b8>)
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d121      	bne.n	8000f2a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000ee6:	4a08      	ldr	r2, [pc, #32]	; (8000f08 <HAL_RCC_OscConfig+0x2b8>)
 8000ee8:	4b07      	ldr	r3, [pc, #28]	; (8000f08 <HAL_RCC_OscConfig+0x2b8>)
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ef0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000ef2:	f7ff fbab 	bl	800064c <HAL_GetTick>
 8000ef6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000ef8:	e011      	b.n	8000f1e <HAL_RCC_OscConfig+0x2ce>
 8000efa:	bf00      	nop
 8000efc:	40023800 	.word	0x40023800
 8000f00:	42470000 	.word	0x42470000
 8000f04:	42470e80 	.word	0x42470e80
 8000f08:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000f0c:	f7ff fb9e 	bl	800064c <HAL_GetTick>
 8000f10:	4602      	mov	r2, r0
 8000f12:	693b      	ldr	r3, [r7, #16]
 8000f14:	1ad3      	subs	r3, r2, r3
 8000f16:	2b02      	cmp	r3, #2
 8000f18:	d901      	bls.n	8000f1e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8000f1a:	2303      	movs	r3, #3
 8000f1c:	e106      	b.n	800112c <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f1e:	4b85      	ldr	r3, [pc, #532]	; (8001134 <HAL_RCC_OscConfig+0x4e4>)
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d0f0      	beq.n	8000f0c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	689b      	ldr	r3, [r3, #8]
 8000f2e:	2b01      	cmp	r3, #1
 8000f30:	d106      	bne.n	8000f40 <HAL_RCC_OscConfig+0x2f0>
 8000f32:	4a81      	ldr	r2, [pc, #516]	; (8001138 <HAL_RCC_OscConfig+0x4e8>)
 8000f34:	4b80      	ldr	r3, [pc, #512]	; (8001138 <HAL_RCC_OscConfig+0x4e8>)
 8000f36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000f38:	f043 0301 	orr.w	r3, r3, #1
 8000f3c:	6713      	str	r3, [r2, #112]	; 0x70
 8000f3e:	e01c      	b.n	8000f7a <HAL_RCC_OscConfig+0x32a>
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	689b      	ldr	r3, [r3, #8]
 8000f44:	2b05      	cmp	r3, #5
 8000f46:	d10c      	bne.n	8000f62 <HAL_RCC_OscConfig+0x312>
 8000f48:	4a7b      	ldr	r2, [pc, #492]	; (8001138 <HAL_RCC_OscConfig+0x4e8>)
 8000f4a:	4b7b      	ldr	r3, [pc, #492]	; (8001138 <HAL_RCC_OscConfig+0x4e8>)
 8000f4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000f4e:	f043 0304 	orr.w	r3, r3, #4
 8000f52:	6713      	str	r3, [r2, #112]	; 0x70
 8000f54:	4a78      	ldr	r2, [pc, #480]	; (8001138 <HAL_RCC_OscConfig+0x4e8>)
 8000f56:	4b78      	ldr	r3, [pc, #480]	; (8001138 <HAL_RCC_OscConfig+0x4e8>)
 8000f58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000f5a:	f043 0301 	orr.w	r3, r3, #1
 8000f5e:	6713      	str	r3, [r2, #112]	; 0x70
 8000f60:	e00b      	b.n	8000f7a <HAL_RCC_OscConfig+0x32a>
 8000f62:	4a75      	ldr	r2, [pc, #468]	; (8001138 <HAL_RCC_OscConfig+0x4e8>)
 8000f64:	4b74      	ldr	r3, [pc, #464]	; (8001138 <HAL_RCC_OscConfig+0x4e8>)
 8000f66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000f68:	f023 0301 	bic.w	r3, r3, #1
 8000f6c:	6713      	str	r3, [r2, #112]	; 0x70
 8000f6e:	4a72      	ldr	r2, [pc, #456]	; (8001138 <HAL_RCC_OscConfig+0x4e8>)
 8000f70:	4b71      	ldr	r3, [pc, #452]	; (8001138 <HAL_RCC_OscConfig+0x4e8>)
 8000f72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000f74:	f023 0304 	bic.w	r3, r3, #4
 8000f78:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	689b      	ldr	r3, [r3, #8]
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d015      	beq.n	8000fae <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000f82:	f7ff fb63 	bl	800064c <HAL_GetTick>
 8000f86:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000f88:	e00a      	b.n	8000fa0 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000f8a:	f7ff fb5f 	bl	800064c <HAL_GetTick>
 8000f8e:	4602      	mov	r2, r0
 8000f90:	693b      	ldr	r3, [r7, #16]
 8000f92:	1ad3      	subs	r3, r2, r3
 8000f94:	f241 3288 	movw	r2, #5000	; 0x1388
 8000f98:	4293      	cmp	r3, r2
 8000f9a:	d901      	bls.n	8000fa0 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8000f9c:	2303      	movs	r3, #3
 8000f9e:	e0c5      	b.n	800112c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000fa0:	4b65      	ldr	r3, [pc, #404]	; (8001138 <HAL_RCC_OscConfig+0x4e8>)
 8000fa2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000fa4:	f003 0302 	and.w	r3, r3, #2
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d0ee      	beq.n	8000f8a <HAL_RCC_OscConfig+0x33a>
 8000fac:	e014      	b.n	8000fd8 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000fae:	f7ff fb4d 	bl	800064c <HAL_GetTick>
 8000fb2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000fb4:	e00a      	b.n	8000fcc <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000fb6:	f7ff fb49 	bl	800064c <HAL_GetTick>
 8000fba:	4602      	mov	r2, r0
 8000fbc:	693b      	ldr	r3, [r7, #16]
 8000fbe:	1ad3      	subs	r3, r2, r3
 8000fc0:	f241 3288 	movw	r2, #5000	; 0x1388
 8000fc4:	4293      	cmp	r3, r2
 8000fc6:	d901      	bls.n	8000fcc <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8000fc8:	2303      	movs	r3, #3
 8000fca:	e0af      	b.n	800112c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000fcc:	4b5a      	ldr	r3, [pc, #360]	; (8001138 <HAL_RCC_OscConfig+0x4e8>)
 8000fce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000fd0:	f003 0302 	and.w	r3, r3, #2
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d1ee      	bne.n	8000fb6 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8000fd8:	7dfb      	ldrb	r3, [r7, #23]
 8000fda:	2b01      	cmp	r3, #1
 8000fdc:	d105      	bne.n	8000fea <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000fde:	4a56      	ldr	r2, [pc, #344]	; (8001138 <HAL_RCC_OscConfig+0x4e8>)
 8000fe0:	4b55      	ldr	r3, [pc, #340]	; (8001138 <HAL_RCC_OscConfig+0x4e8>)
 8000fe2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fe4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000fe8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	699b      	ldr	r3, [r3, #24]
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	f000 809b 	beq.w	800112a <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8000ff4:	4b50      	ldr	r3, [pc, #320]	; (8001138 <HAL_RCC_OscConfig+0x4e8>)
 8000ff6:	689b      	ldr	r3, [r3, #8]
 8000ff8:	f003 030c 	and.w	r3, r3, #12
 8000ffc:	2b08      	cmp	r3, #8
 8000ffe:	d05c      	beq.n	80010ba <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	699b      	ldr	r3, [r3, #24]
 8001004:	2b02      	cmp	r3, #2
 8001006:	d141      	bne.n	800108c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001008:	4b4c      	ldr	r3, [pc, #304]	; (800113c <HAL_RCC_OscConfig+0x4ec>)
 800100a:	2200      	movs	r2, #0
 800100c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800100e:	f7ff fb1d 	bl	800064c <HAL_GetTick>
 8001012:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001014:	e008      	b.n	8001028 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001016:	f7ff fb19 	bl	800064c <HAL_GetTick>
 800101a:	4602      	mov	r2, r0
 800101c:	693b      	ldr	r3, [r7, #16]
 800101e:	1ad3      	subs	r3, r2, r3
 8001020:	2b02      	cmp	r3, #2
 8001022:	d901      	bls.n	8001028 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8001024:	2303      	movs	r3, #3
 8001026:	e081      	b.n	800112c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001028:	4b43      	ldr	r3, [pc, #268]	; (8001138 <HAL_RCC_OscConfig+0x4e8>)
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001030:	2b00      	cmp	r3, #0
 8001032:	d1f0      	bne.n	8001016 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001034:	4940      	ldr	r1, [pc, #256]	; (8001138 <HAL_RCC_OscConfig+0x4e8>)
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	69da      	ldr	r2, [r3, #28]
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	6a1b      	ldr	r3, [r3, #32]
 800103e:	431a      	orrs	r2, r3
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001044:	019b      	lsls	r3, r3, #6
 8001046:	431a      	orrs	r2, r3
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800104c:	085b      	lsrs	r3, r3, #1
 800104e:	3b01      	subs	r3, #1
 8001050:	041b      	lsls	r3, r3, #16
 8001052:	431a      	orrs	r2, r3
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001058:	061b      	lsls	r3, r3, #24
 800105a:	4313      	orrs	r3, r2
 800105c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800105e:	4b37      	ldr	r3, [pc, #220]	; (800113c <HAL_RCC_OscConfig+0x4ec>)
 8001060:	2201      	movs	r2, #1
 8001062:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001064:	f7ff faf2 	bl	800064c <HAL_GetTick>
 8001068:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800106a:	e008      	b.n	800107e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800106c:	f7ff faee 	bl	800064c <HAL_GetTick>
 8001070:	4602      	mov	r2, r0
 8001072:	693b      	ldr	r3, [r7, #16]
 8001074:	1ad3      	subs	r3, r2, r3
 8001076:	2b02      	cmp	r3, #2
 8001078:	d901      	bls.n	800107e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800107a:	2303      	movs	r3, #3
 800107c:	e056      	b.n	800112c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800107e:	4b2e      	ldr	r3, [pc, #184]	; (8001138 <HAL_RCC_OscConfig+0x4e8>)
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001086:	2b00      	cmp	r3, #0
 8001088:	d0f0      	beq.n	800106c <HAL_RCC_OscConfig+0x41c>
 800108a:	e04e      	b.n	800112a <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800108c:	4b2b      	ldr	r3, [pc, #172]	; (800113c <HAL_RCC_OscConfig+0x4ec>)
 800108e:	2200      	movs	r2, #0
 8001090:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001092:	f7ff fadb 	bl	800064c <HAL_GetTick>
 8001096:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001098:	e008      	b.n	80010ac <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800109a:	f7ff fad7 	bl	800064c <HAL_GetTick>
 800109e:	4602      	mov	r2, r0
 80010a0:	693b      	ldr	r3, [r7, #16]
 80010a2:	1ad3      	subs	r3, r2, r3
 80010a4:	2b02      	cmp	r3, #2
 80010a6:	d901      	bls.n	80010ac <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80010a8:	2303      	movs	r3, #3
 80010aa:	e03f      	b.n	800112c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80010ac:	4b22      	ldr	r3, [pc, #136]	; (8001138 <HAL_RCC_OscConfig+0x4e8>)
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d1f0      	bne.n	800109a <HAL_RCC_OscConfig+0x44a>
 80010b8:	e037      	b.n	800112a <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	699b      	ldr	r3, [r3, #24]
 80010be:	2b01      	cmp	r3, #1
 80010c0:	d101      	bne.n	80010c6 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80010c2:	2301      	movs	r3, #1
 80010c4:	e032      	b.n	800112c <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80010c6:	4b1c      	ldr	r3, [pc, #112]	; (8001138 <HAL_RCC_OscConfig+0x4e8>)
 80010c8:	685b      	ldr	r3, [r3, #4]
 80010ca:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	699b      	ldr	r3, [r3, #24]
 80010d0:	2b01      	cmp	r3, #1
 80010d2:	d028      	beq.n	8001126 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80010d4:	68fb      	ldr	r3, [r7, #12]
 80010d6:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80010de:	429a      	cmp	r2, r3
 80010e0:	d121      	bne.n	8001126 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80010e2:	68fb      	ldr	r3, [r7, #12]
 80010e4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80010ec:	429a      	cmp	r2, r3
 80010ee:	d11a      	bne.n	8001126 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80010f0:	68fa      	ldr	r2, [r7, #12]
 80010f2:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80010f6:	4013      	ands	r3, r2
 80010f8:	687a      	ldr	r2, [r7, #4]
 80010fa:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80010fc:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80010fe:	4293      	cmp	r3, r2
 8001100:	d111      	bne.n	8001126 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001102:	68fb      	ldr	r3, [r7, #12]
 8001104:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800110c:	085b      	lsrs	r3, r3, #1
 800110e:	3b01      	subs	r3, #1
 8001110:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001112:	429a      	cmp	r2, r3
 8001114:	d107      	bne.n	8001126 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001116:	68fb      	ldr	r3, [r7, #12]
 8001118:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001120:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001122:	429a      	cmp	r2, r3
 8001124:	d001      	beq.n	800112a <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8001126:	2301      	movs	r3, #1
 8001128:	e000      	b.n	800112c <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800112a:	2300      	movs	r3, #0
}
 800112c:	4618      	mov	r0, r3
 800112e:	3718      	adds	r7, #24
 8001130:	46bd      	mov	sp, r7
 8001132:	bd80      	pop	{r7, pc}
 8001134:	40007000 	.word	0x40007000
 8001138:	40023800 	.word	0x40023800
 800113c:	42470060 	.word	0x42470060

08001140 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	b084      	sub	sp, #16
 8001144:	af00      	add	r7, sp, #0
 8001146:	6078      	str	r0, [r7, #4]
 8001148:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	2b00      	cmp	r3, #0
 800114e:	d101      	bne.n	8001154 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001150:	2301      	movs	r3, #1
 8001152:	e0cc      	b.n	80012ee <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001154:	4b68      	ldr	r3, [pc, #416]	; (80012f8 <HAL_RCC_ClockConfig+0x1b8>)
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	f003 0207 	and.w	r2, r3, #7
 800115c:	683b      	ldr	r3, [r7, #0]
 800115e:	429a      	cmp	r2, r3
 8001160:	d20c      	bcs.n	800117c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001162:	4b65      	ldr	r3, [pc, #404]	; (80012f8 <HAL_RCC_ClockConfig+0x1b8>)
 8001164:	683a      	ldr	r2, [r7, #0]
 8001166:	b2d2      	uxtb	r2, r2
 8001168:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800116a:	4b63      	ldr	r3, [pc, #396]	; (80012f8 <HAL_RCC_ClockConfig+0x1b8>)
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	f003 0207 	and.w	r2, r3, #7
 8001172:	683b      	ldr	r3, [r7, #0]
 8001174:	429a      	cmp	r2, r3
 8001176:	d001      	beq.n	800117c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001178:	2301      	movs	r3, #1
 800117a:	e0b8      	b.n	80012ee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	f003 0302 	and.w	r3, r3, #2
 8001184:	2b00      	cmp	r3, #0
 8001186:	d020      	beq.n	80011ca <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	f003 0304 	and.w	r3, r3, #4
 8001190:	2b00      	cmp	r3, #0
 8001192:	d005      	beq.n	80011a0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001194:	4a59      	ldr	r2, [pc, #356]	; (80012fc <HAL_RCC_ClockConfig+0x1bc>)
 8001196:	4b59      	ldr	r3, [pc, #356]	; (80012fc <HAL_RCC_ClockConfig+0x1bc>)
 8001198:	689b      	ldr	r3, [r3, #8]
 800119a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800119e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	f003 0308 	and.w	r3, r3, #8
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d005      	beq.n	80011b8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80011ac:	4a53      	ldr	r2, [pc, #332]	; (80012fc <HAL_RCC_ClockConfig+0x1bc>)
 80011ae:	4b53      	ldr	r3, [pc, #332]	; (80012fc <HAL_RCC_ClockConfig+0x1bc>)
 80011b0:	689b      	ldr	r3, [r3, #8]
 80011b2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80011b6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80011b8:	4950      	ldr	r1, [pc, #320]	; (80012fc <HAL_RCC_ClockConfig+0x1bc>)
 80011ba:	4b50      	ldr	r3, [pc, #320]	; (80012fc <HAL_RCC_ClockConfig+0x1bc>)
 80011bc:	689b      	ldr	r3, [r3, #8]
 80011be:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	689b      	ldr	r3, [r3, #8]
 80011c6:	4313      	orrs	r3, r2
 80011c8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	f003 0301 	and.w	r3, r3, #1
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d044      	beq.n	8001260 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	685b      	ldr	r3, [r3, #4]
 80011da:	2b01      	cmp	r3, #1
 80011dc:	d107      	bne.n	80011ee <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011de:	4b47      	ldr	r3, [pc, #284]	; (80012fc <HAL_RCC_ClockConfig+0x1bc>)
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d119      	bne.n	800121e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80011ea:	2301      	movs	r3, #1
 80011ec:	e07f      	b.n	80012ee <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	685b      	ldr	r3, [r3, #4]
 80011f2:	2b02      	cmp	r3, #2
 80011f4:	d003      	beq.n	80011fe <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80011fa:	2b03      	cmp	r3, #3
 80011fc:	d107      	bne.n	800120e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80011fe:	4b3f      	ldr	r3, [pc, #252]	; (80012fc <HAL_RCC_ClockConfig+0x1bc>)
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001206:	2b00      	cmp	r3, #0
 8001208:	d109      	bne.n	800121e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800120a:	2301      	movs	r3, #1
 800120c:	e06f      	b.n	80012ee <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800120e:	4b3b      	ldr	r3, [pc, #236]	; (80012fc <HAL_RCC_ClockConfig+0x1bc>)
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	f003 0302 	and.w	r3, r3, #2
 8001216:	2b00      	cmp	r3, #0
 8001218:	d101      	bne.n	800121e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800121a:	2301      	movs	r3, #1
 800121c:	e067      	b.n	80012ee <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800121e:	4937      	ldr	r1, [pc, #220]	; (80012fc <HAL_RCC_ClockConfig+0x1bc>)
 8001220:	4b36      	ldr	r3, [pc, #216]	; (80012fc <HAL_RCC_ClockConfig+0x1bc>)
 8001222:	689b      	ldr	r3, [r3, #8]
 8001224:	f023 0203 	bic.w	r2, r3, #3
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	685b      	ldr	r3, [r3, #4]
 800122c:	4313      	orrs	r3, r2
 800122e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001230:	f7ff fa0c 	bl	800064c <HAL_GetTick>
 8001234:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001236:	e00a      	b.n	800124e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001238:	f7ff fa08 	bl	800064c <HAL_GetTick>
 800123c:	4602      	mov	r2, r0
 800123e:	68fb      	ldr	r3, [r7, #12]
 8001240:	1ad3      	subs	r3, r2, r3
 8001242:	f241 3288 	movw	r2, #5000	; 0x1388
 8001246:	4293      	cmp	r3, r2
 8001248:	d901      	bls.n	800124e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800124a:	2303      	movs	r3, #3
 800124c:	e04f      	b.n	80012ee <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800124e:	4b2b      	ldr	r3, [pc, #172]	; (80012fc <HAL_RCC_ClockConfig+0x1bc>)
 8001250:	689b      	ldr	r3, [r3, #8]
 8001252:	f003 020c 	and.w	r2, r3, #12
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	685b      	ldr	r3, [r3, #4]
 800125a:	009b      	lsls	r3, r3, #2
 800125c:	429a      	cmp	r2, r3
 800125e:	d1eb      	bne.n	8001238 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001260:	4b25      	ldr	r3, [pc, #148]	; (80012f8 <HAL_RCC_ClockConfig+0x1b8>)
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	f003 0207 	and.w	r2, r3, #7
 8001268:	683b      	ldr	r3, [r7, #0]
 800126a:	429a      	cmp	r2, r3
 800126c:	d90c      	bls.n	8001288 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800126e:	4b22      	ldr	r3, [pc, #136]	; (80012f8 <HAL_RCC_ClockConfig+0x1b8>)
 8001270:	683a      	ldr	r2, [r7, #0]
 8001272:	b2d2      	uxtb	r2, r2
 8001274:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001276:	4b20      	ldr	r3, [pc, #128]	; (80012f8 <HAL_RCC_ClockConfig+0x1b8>)
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	f003 0207 	and.w	r2, r3, #7
 800127e:	683b      	ldr	r3, [r7, #0]
 8001280:	429a      	cmp	r2, r3
 8001282:	d001      	beq.n	8001288 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001284:	2301      	movs	r3, #1
 8001286:	e032      	b.n	80012ee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	f003 0304 	and.w	r3, r3, #4
 8001290:	2b00      	cmp	r3, #0
 8001292:	d008      	beq.n	80012a6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001294:	4919      	ldr	r1, [pc, #100]	; (80012fc <HAL_RCC_ClockConfig+0x1bc>)
 8001296:	4b19      	ldr	r3, [pc, #100]	; (80012fc <HAL_RCC_ClockConfig+0x1bc>)
 8001298:	689b      	ldr	r3, [r3, #8]
 800129a:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	68db      	ldr	r3, [r3, #12]
 80012a2:	4313      	orrs	r3, r2
 80012a4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	f003 0308 	and.w	r3, r3, #8
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d009      	beq.n	80012c6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80012b2:	4912      	ldr	r1, [pc, #72]	; (80012fc <HAL_RCC_ClockConfig+0x1bc>)
 80012b4:	4b11      	ldr	r3, [pc, #68]	; (80012fc <HAL_RCC_ClockConfig+0x1bc>)
 80012b6:	689b      	ldr	r3, [r3, #8]
 80012b8:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	691b      	ldr	r3, [r3, #16]
 80012c0:	00db      	lsls	r3, r3, #3
 80012c2:	4313      	orrs	r3, r2
 80012c4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80012c6:	f000 f821 	bl	800130c <HAL_RCC_GetSysClockFreq>
 80012ca:	4601      	mov	r1, r0
 80012cc:	4b0b      	ldr	r3, [pc, #44]	; (80012fc <HAL_RCC_ClockConfig+0x1bc>)
 80012ce:	689b      	ldr	r3, [r3, #8]
 80012d0:	091b      	lsrs	r3, r3, #4
 80012d2:	f003 030f 	and.w	r3, r3, #15
 80012d6:	4a0a      	ldr	r2, [pc, #40]	; (8001300 <HAL_RCC_ClockConfig+0x1c0>)
 80012d8:	5cd3      	ldrb	r3, [r2, r3]
 80012da:	fa21 f303 	lsr.w	r3, r1, r3
 80012de:	4a09      	ldr	r2, [pc, #36]	; (8001304 <HAL_RCC_ClockConfig+0x1c4>)
 80012e0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80012e2:	4b09      	ldr	r3, [pc, #36]	; (8001308 <HAL_RCC_ClockConfig+0x1c8>)
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	4618      	mov	r0, r3
 80012e8:	f7ff f96c 	bl	80005c4 <HAL_InitTick>

  return HAL_OK;
 80012ec:	2300      	movs	r3, #0
}
 80012ee:	4618      	mov	r0, r3
 80012f0:	3710      	adds	r7, #16
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bd80      	pop	{r7, pc}
 80012f6:	bf00      	nop
 80012f8:	40023c00 	.word	0x40023c00
 80012fc:	40023800 	.word	0x40023800
 8001300:	08005320 	.word	0x08005320
 8001304:	20000008 	.word	0x20000008
 8001308:	20000000 	.word	0x20000000

0800130c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800130c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001310:	b08f      	sub	sp, #60	; 0x3c
 8001312:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001314:	2300      	movs	r3, #0
 8001316:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001318:	2300      	movs	r3, #0
 800131a:	637b      	str	r3, [r7, #52]	; 0x34
 800131c:	2300      	movs	r3, #0
 800131e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t sysclockfreq = 0U;
 8001320:	2300      	movs	r3, #0
 8001322:	633b      	str	r3, [r7, #48]	; 0x30

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001324:	4b62      	ldr	r3, [pc, #392]	; (80014b0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001326:	689b      	ldr	r3, [r3, #8]
 8001328:	f003 030c 	and.w	r3, r3, #12
 800132c:	2b04      	cmp	r3, #4
 800132e:	d007      	beq.n	8001340 <HAL_RCC_GetSysClockFreq+0x34>
 8001330:	2b08      	cmp	r3, #8
 8001332:	d008      	beq.n	8001346 <HAL_RCC_GetSysClockFreq+0x3a>
 8001334:	2b00      	cmp	r3, #0
 8001336:	f040 80b2 	bne.w	800149e <HAL_RCC_GetSysClockFreq+0x192>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800133a:	4b5e      	ldr	r3, [pc, #376]	; (80014b4 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800133c:	633b      	str	r3, [r7, #48]	; 0x30
       break;
 800133e:	e0b1      	b.n	80014a4 <HAL_RCC_GetSysClockFreq+0x198>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001340:	4b5d      	ldr	r3, [pc, #372]	; (80014b8 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8001342:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001344:	e0ae      	b.n	80014a4 <HAL_RCC_GetSysClockFreq+0x198>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001346:	4b5a      	ldr	r3, [pc, #360]	; (80014b0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001348:	685b      	ldr	r3, [r3, #4]
 800134a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800134e:	62fb      	str	r3, [r7, #44]	; 0x2c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001350:	4b57      	ldr	r3, [pc, #348]	; (80014b0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001352:	685b      	ldr	r3, [r3, #4]
 8001354:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001358:	2b00      	cmp	r3, #0
 800135a:	d04e      	beq.n	80013fa <HAL_RCC_GetSysClockFreq+0xee>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800135c:	4b54      	ldr	r3, [pc, #336]	; (80014b0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800135e:	685b      	ldr	r3, [r3, #4]
 8001360:	099b      	lsrs	r3, r3, #6
 8001362:	f04f 0400 	mov.w	r4, #0
 8001366:	f240 11ff 	movw	r1, #511	; 0x1ff
 800136a:	f04f 0200 	mov.w	r2, #0
 800136e:	ea01 0103 	and.w	r1, r1, r3
 8001372:	ea02 0204 	and.w	r2, r2, r4
 8001376:	460b      	mov	r3, r1
 8001378:	4614      	mov	r4, r2
 800137a:	0160      	lsls	r0, r4, #5
 800137c:	6278      	str	r0, [r7, #36]	; 0x24
 800137e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001380:	ea40 60d3 	orr.w	r0, r0, r3, lsr #27
 8001384:	6278      	str	r0, [r7, #36]	; 0x24
 8001386:	015b      	lsls	r3, r3, #5
 8001388:	623b      	str	r3, [r7, #32]
 800138a:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 800138e:	1a5b      	subs	r3, r3, r1
 8001390:	eb64 0402 	sbc.w	r4, r4, r2
 8001394:	ea4f 1984 	mov.w	r9, r4, lsl #6
 8001398:	ea49 6993 	orr.w	r9, r9, r3, lsr #26
 800139c:	ea4f 1883 	mov.w	r8, r3, lsl #6
 80013a0:	ebb8 0803 	subs.w	r8, r8, r3
 80013a4:	eb69 0904 	sbc.w	r9, r9, r4
 80013a8:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80013ac:	61fb      	str	r3, [r7, #28]
 80013ae:	69fb      	ldr	r3, [r7, #28]
 80013b0:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80013b4:	61fb      	str	r3, [r7, #28]
 80013b6:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 80013ba:	61bb      	str	r3, [r7, #24]
 80013bc:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 80013c0:	eb18 0801 	adds.w	r8, r8, r1
 80013c4:	eb49 0902 	adc.w	r9, r9, r2
 80013c8:	ea4f 2349 	mov.w	r3, r9, lsl #9
 80013cc:	617b      	str	r3, [r7, #20]
 80013ce:	697b      	ldr	r3, [r7, #20]
 80013d0:	ea43 53d8 	orr.w	r3, r3, r8, lsr #23
 80013d4:	617b      	str	r3, [r7, #20]
 80013d6:	ea4f 2348 	mov.w	r3, r8, lsl #9
 80013da:	613b      	str	r3, [r7, #16]
 80013dc:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 80013e0:	4640      	mov	r0, r8
 80013e2:	4649      	mov	r1, r9
 80013e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013e6:	f04f 0400 	mov.w	r4, #0
 80013ea:	461a      	mov	r2, r3
 80013ec:	4623      	mov	r3, r4
 80013ee:	f7fe ff3f 	bl	8000270 <__aeabi_uldivmod>
 80013f2:	4603      	mov	r3, r0
 80013f4:	460c      	mov	r4, r1
 80013f6:	637b      	str	r3, [r7, #52]	; 0x34
 80013f8:	e043      	b.n	8001482 <HAL_RCC_GetSysClockFreq+0x176>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80013fa:	4b2d      	ldr	r3, [pc, #180]	; (80014b0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80013fc:	685b      	ldr	r3, [r3, #4]
 80013fe:	099b      	lsrs	r3, r3, #6
 8001400:	f04f 0400 	mov.w	r4, #0
 8001404:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001408:	f04f 0200 	mov.w	r2, #0
 800140c:	ea01 0103 	and.w	r1, r1, r3
 8001410:	ea02 0204 	and.w	r2, r2, r4
 8001414:	460b      	mov	r3, r1
 8001416:	4614      	mov	r4, r2
 8001418:	0160      	lsls	r0, r4, #5
 800141a:	60f8      	str	r0, [r7, #12]
 800141c:	68f8      	ldr	r0, [r7, #12]
 800141e:	ea40 60d3 	orr.w	r0, r0, r3, lsr #27
 8001422:	60f8      	str	r0, [r7, #12]
 8001424:	015b      	lsls	r3, r3, #5
 8001426:	60bb      	str	r3, [r7, #8]
 8001428:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 800142c:	1a5b      	subs	r3, r3, r1
 800142e:	eb64 0402 	sbc.w	r4, r4, r2
 8001432:	01a6      	lsls	r6, r4, #6
 8001434:	ea46 6693 	orr.w	r6, r6, r3, lsr #26
 8001438:	019d      	lsls	r5, r3, #6
 800143a:	1aed      	subs	r5, r5, r3
 800143c:	eb66 0604 	sbc.w	r6, r6, r4
 8001440:	00f3      	lsls	r3, r6, #3
 8001442:	607b      	str	r3, [r7, #4]
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	ea43 7355 	orr.w	r3, r3, r5, lsr #29
 800144a:	607b      	str	r3, [r7, #4]
 800144c:	00eb      	lsls	r3, r5, #3
 800144e:	603b      	str	r3, [r7, #0]
 8001450:	e897 0060 	ldmia.w	r7, {r5, r6}
 8001454:	186d      	adds	r5, r5, r1
 8001456:	eb46 0602 	adc.w	r6, r6, r2
 800145a:	ea4f 2b86 	mov.w	fp, r6, lsl #10
 800145e:	ea4b 5b95 	orr.w	fp, fp, r5, lsr #22
 8001462:	ea4f 2a85 	mov.w	sl, r5, lsl #10
 8001466:	4655      	mov	r5, sl
 8001468:	465e      	mov	r6, fp
 800146a:	4628      	mov	r0, r5
 800146c:	4631      	mov	r1, r6
 800146e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001470:	f04f 0400 	mov.w	r4, #0
 8001474:	461a      	mov	r2, r3
 8001476:	4623      	mov	r3, r4
 8001478:	f7fe fefa 	bl	8000270 <__aeabi_uldivmod>
 800147c:	4603      	mov	r3, r0
 800147e:	460c      	mov	r4, r1
 8001480:	637b      	str	r3, [r7, #52]	; 0x34
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001482:	4b0b      	ldr	r3, [pc, #44]	; (80014b0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001484:	685b      	ldr	r3, [r3, #4]
 8001486:	0c1b      	lsrs	r3, r3, #16
 8001488:	f003 0303 	and.w	r3, r3, #3
 800148c:	3301      	adds	r3, #1
 800148e:	005b      	lsls	r3, r3, #1
 8001490:	62bb      	str	r3, [r7, #40]	; 0x28

      sysclockfreq = pllvco/pllp;
 8001492:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001494:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001496:	fbb2 f3f3 	udiv	r3, r2, r3
 800149a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800149c:	e002      	b.n	80014a4 <HAL_RCC_GetSysClockFreq+0x198>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800149e:	4b05      	ldr	r3, [pc, #20]	; (80014b4 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80014a0:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80014a2:	bf00      	nop
    }
  }
  return sysclockfreq;
 80014a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 80014a6:	4618      	mov	r0, r3
 80014a8:	373c      	adds	r7, #60	; 0x3c
 80014aa:	46bd      	mov	sp, r7
 80014ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80014b0:	40023800 	.word	0x40023800
 80014b4:	00f42400 	.word	0x00f42400
 80014b8:	007a1200 	.word	0x007a1200

080014bc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80014bc:	b480      	push	{r7}
 80014be:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80014c0:	4b03      	ldr	r3, [pc, #12]	; (80014d0 <HAL_RCC_GetHCLKFreq+0x14>)
 80014c2:	681b      	ldr	r3, [r3, #0]
}
 80014c4:	4618      	mov	r0, r3
 80014c6:	46bd      	mov	sp, r7
 80014c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014cc:	4770      	bx	lr
 80014ce:	bf00      	nop
 80014d0:	20000008 	.word	0x20000008

080014d4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80014d8:	f7ff fff0 	bl	80014bc <HAL_RCC_GetHCLKFreq>
 80014dc:	4601      	mov	r1, r0
 80014de:	4b05      	ldr	r3, [pc, #20]	; (80014f4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80014e0:	689b      	ldr	r3, [r3, #8]
 80014e2:	0a9b      	lsrs	r3, r3, #10
 80014e4:	f003 0307 	and.w	r3, r3, #7
 80014e8:	4a03      	ldr	r2, [pc, #12]	; (80014f8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80014ea:	5cd3      	ldrb	r3, [r2, r3]
 80014ec:	fa21 f303 	lsr.w	r3, r1, r3
}
 80014f0:	4618      	mov	r0, r3
 80014f2:	bd80      	pop	{r7, pc}
 80014f4:	40023800 	.word	0x40023800
 80014f8:	08005330 	.word	0x08005330

080014fc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001500:	f7ff ffdc 	bl	80014bc <HAL_RCC_GetHCLKFreq>
 8001504:	4601      	mov	r1, r0
 8001506:	4b05      	ldr	r3, [pc, #20]	; (800151c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001508:	689b      	ldr	r3, [r3, #8]
 800150a:	0b5b      	lsrs	r3, r3, #13
 800150c:	f003 0307 	and.w	r3, r3, #7
 8001510:	4a03      	ldr	r2, [pc, #12]	; (8001520 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001512:	5cd3      	ldrb	r3, [r2, r3]
 8001514:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001518:	4618      	mov	r0, r3
 800151a:	bd80      	pop	{r7, pc}
 800151c:	40023800 	.word	0x40023800
 8001520:	08005330 	.word	0x08005330

08001524 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	b082      	sub	sp, #8
 8001528:	af00      	add	r7, sp, #0
 800152a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	2b00      	cmp	r3, #0
 8001530:	d101      	bne.n	8001536 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001532:	2301      	movs	r3, #1
 8001534:	e07a      	b.n	800162c <HAL_SPI_Init+0x108>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800153a:	2b00      	cmp	r3, #0
 800153c:	d108      	bne.n	8001550 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	685b      	ldr	r3, [r3, #4]
 8001542:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001546:	d009      	beq.n	800155c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	2200      	movs	r2, #0
 800154c:	61da      	str	r2, [r3, #28]
 800154e:	e005      	b.n	800155c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	2200      	movs	r2, #0
 8001554:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	2200      	movs	r2, #0
 800155a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	2200      	movs	r2, #0
 8001560:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001568:	b2db      	uxtb	r3, r3
 800156a:	2b00      	cmp	r3, #0
 800156c:	d106      	bne.n	800157c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	2200      	movs	r2, #0
 8001572:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001576:	6878      	ldr	r0, [r7, #4]
 8001578:	f001 fe5e 	bl	8003238 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	2202      	movs	r2, #2
 8001580:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	687a      	ldr	r2, [r7, #4]
 800158a:	6812      	ldr	r2, [r2, #0]
 800158c:	6812      	ldr	r2, [r2, #0]
 800158e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001592:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	687a      	ldr	r2, [r7, #4]
 800159a:	6852      	ldr	r2, [r2, #4]
 800159c:	f402 7182 	and.w	r1, r2, #260	; 0x104
 80015a0:	687a      	ldr	r2, [r7, #4]
 80015a2:	6892      	ldr	r2, [r2, #8]
 80015a4:	f402 4204 	and.w	r2, r2, #33792	; 0x8400
 80015a8:	4311      	orrs	r1, r2
 80015aa:	687a      	ldr	r2, [r7, #4]
 80015ac:	68d2      	ldr	r2, [r2, #12]
 80015ae:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80015b2:	4311      	orrs	r1, r2
 80015b4:	687a      	ldr	r2, [r7, #4]
 80015b6:	6912      	ldr	r2, [r2, #16]
 80015b8:	f002 0202 	and.w	r2, r2, #2
 80015bc:	4311      	orrs	r1, r2
 80015be:	687a      	ldr	r2, [r7, #4]
 80015c0:	6952      	ldr	r2, [r2, #20]
 80015c2:	f002 0201 	and.w	r2, r2, #1
 80015c6:	4311      	orrs	r1, r2
 80015c8:	687a      	ldr	r2, [r7, #4]
 80015ca:	6992      	ldr	r2, [r2, #24]
 80015cc:	f402 7200 	and.w	r2, r2, #512	; 0x200
 80015d0:	4311      	orrs	r1, r2
 80015d2:	687a      	ldr	r2, [r7, #4]
 80015d4:	69d2      	ldr	r2, [r2, #28]
 80015d6:	f002 0238 	and.w	r2, r2, #56	; 0x38
 80015da:	4311      	orrs	r1, r2
 80015dc:	687a      	ldr	r2, [r7, #4]
 80015de:	6a12      	ldr	r2, [r2, #32]
 80015e0:	f002 0280 	and.w	r2, r2, #128	; 0x80
 80015e4:	4311      	orrs	r1, r2
 80015e6:	687a      	ldr	r2, [r7, #4]
 80015e8:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80015ea:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80015ee:	430a      	orrs	r2, r1
 80015f0:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	687a      	ldr	r2, [r7, #4]
 80015f8:	6992      	ldr	r2, [r2, #24]
 80015fa:	0c12      	lsrs	r2, r2, #16
 80015fc:	f002 0104 	and.w	r1, r2, #4
 8001600:	687a      	ldr	r2, [r7, #4]
 8001602:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001604:	f002 0210 	and.w	r2, r2, #16
 8001608:	430a      	orrs	r2, r1
 800160a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	687a      	ldr	r2, [r7, #4]
 8001612:	6812      	ldr	r2, [r2, #0]
 8001614:	69d2      	ldr	r2, [r2, #28]
 8001616:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800161a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	2200      	movs	r2, #0
 8001620:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	2201      	movs	r2, #1
 8001626:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800162a:	2300      	movs	r3, #0
}
 800162c:	4618      	mov	r0, r3
 800162e:	3708      	adds	r7, #8
 8001630:	46bd      	mov	sp, r7
 8001632:	bd80      	pop	{r7, pc}

08001634 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	b082      	sub	sp, #8
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	2b00      	cmp	r3, #0
 8001640:	d101      	bne.n	8001646 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001642:	2301      	movs	r3, #1
 8001644:	e041      	b.n	80016ca <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800164c:	b2db      	uxtb	r3, r3
 800164e:	2b00      	cmp	r3, #0
 8001650:	d106      	bne.n	8001660 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	2200      	movs	r2, #0
 8001656:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800165a:	6878      	ldr	r0, [r7, #4]
 800165c:	f001 fe8a 	bl	8003374 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	2202      	movs	r2, #2
 8001664:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681a      	ldr	r2, [r3, #0]
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	3304      	adds	r3, #4
 8001670:	4619      	mov	r1, r3
 8001672:	4610      	mov	r0, r2
 8001674:	f000 facc 	bl	8001c10 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	2201      	movs	r2, #1
 800167c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	2201      	movs	r2, #1
 8001684:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	2201      	movs	r2, #1
 800168c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	2201      	movs	r2, #1
 8001694:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	2201      	movs	r2, #1
 800169c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	2201      	movs	r2, #1
 80016a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	2201      	movs	r2, #1
 80016ac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	2201      	movs	r2, #1
 80016b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	2201      	movs	r2, #1
 80016bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	2201      	movs	r2, #1
 80016c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80016c8:	2300      	movs	r3, #0
}
 80016ca:	4618      	mov	r0, r3
 80016cc:	3708      	adds	r7, #8
 80016ce:	46bd      	mov	sp, r7
 80016d0:	bd80      	pop	{r7, pc}

080016d2 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80016d2:	b580      	push	{r7, lr}
 80016d4:	b082      	sub	sp, #8
 80016d6:	af00      	add	r7, sp, #0
 80016d8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d101      	bne.n	80016e4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80016e0:	2301      	movs	r3, #1
 80016e2:	e041      	b.n	8001768 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80016ea:	b2db      	uxtb	r3, r3
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d106      	bne.n	80016fe <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	2200      	movs	r2, #0
 80016f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80016f8:	6878      	ldr	r0, [r7, #4]
 80016fa:	f000 f839 	bl	8001770 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	2202      	movs	r2, #2
 8001702:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681a      	ldr	r2, [r3, #0]
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	3304      	adds	r3, #4
 800170e:	4619      	mov	r1, r3
 8001710:	4610      	mov	r0, r2
 8001712:	f000 fa7d 	bl	8001c10 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	2201      	movs	r2, #1
 800171a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	2201      	movs	r2, #1
 8001722:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	2201      	movs	r2, #1
 800172a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	2201      	movs	r2, #1
 8001732:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	2201      	movs	r2, #1
 800173a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	2201      	movs	r2, #1
 8001742:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	2201      	movs	r2, #1
 800174a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	2201      	movs	r2, #1
 8001752:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	2201      	movs	r2, #1
 800175a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	2201      	movs	r2, #1
 8001762:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001766:	2300      	movs	r3, #0
}
 8001768:	4618      	mov	r0, r3
 800176a:	3708      	adds	r7, #8
 800176c:	46bd      	mov	sp, r7
 800176e:	bd80      	pop	{r7, pc}

08001770 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8001770:	b480      	push	{r7}
 8001772:	b083      	sub	sp, #12
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8001778:	bf00      	nop
 800177a:	370c      	adds	r7, #12
 800177c:	46bd      	mov	sp, r7
 800177e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001782:	4770      	bx	lr

08001784 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	b084      	sub	sp, #16
 8001788:	af00      	add	r7, sp, #0
 800178a:	6078      	str	r0, [r7, #4]
 800178c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800178e:	683b      	ldr	r3, [r7, #0]
 8001790:	2b00      	cmp	r3, #0
 8001792:	d109      	bne.n	80017a8 <HAL_TIM_PWM_Start+0x24>
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800179a:	b2db      	uxtb	r3, r3
 800179c:	2b01      	cmp	r3, #1
 800179e:	bf14      	ite	ne
 80017a0:	2301      	movne	r3, #1
 80017a2:	2300      	moveq	r3, #0
 80017a4:	b2db      	uxtb	r3, r3
 80017a6:	e022      	b.n	80017ee <HAL_TIM_PWM_Start+0x6a>
 80017a8:	683b      	ldr	r3, [r7, #0]
 80017aa:	2b04      	cmp	r3, #4
 80017ac:	d109      	bne.n	80017c2 <HAL_TIM_PWM_Start+0x3e>
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80017b4:	b2db      	uxtb	r3, r3
 80017b6:	2b01      	cmp	r3, #1
 80017b8:	bf14      	ite	ne
 80017ba:	2301      	movne	r3, #1
 80017bc:	2300      	moveq	r3, #0
 80017be:	b2db      	uxtb	r3, r3
 80017c0:	e015      	b.n	80017ee <HAL_TIM_PWM_Start+0x6a>
 80017c2:	683b      	ldr	r3, [r7, #0]
 80017c4:	2b08      	cmp	r3, #8
 80017c6:	d109      	bne.n	80017dc <HAL_TIM_PWM_Start+0x58>
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80017ce:	b2db      	uxtb	r3, r3
 80017d0:	2b01      	cmp	r3, #1
 80017d2:	bf14      	ite	ne
 80017d4:	2301      	movne	r3, #1
 80017d6:	2300      	moveq	r3, #0
 80017d8:	b2db      	uxtb	r3, r3
 80017da:	e008      	b.n	80017ee <HAL_TIM_PWM_Start+0x6a>
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80017e2:	b2db      	uxtb	r3, r3
 80017e4:	2b01      	cmp	r3, #1
 80017e6:	bf14      	ite	ne
 80017e8:	2301      	movne	r3, #1
 80017ea:	2300      	moveq	r3, #0
 80017ec:	b2db      	uxtb	r3, r3
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d001      	beq.n	80017f6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80017f2:	2301      	movs	r3, #1
 80017f4:	e07c      	b.n	80018f0 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80017f6:	683b      	ldr	r3, [r7, #0]
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d104      	bne.n	8001806 <HAL_TIM_PWM_Start+0x82>
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	2202      	movs	r2, #2
 8001800:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001804:	e013      	b.n	800182e <HAL_TIM_PWM_Start+0xaa>
 8001806:	683b      	ldr	r3, [r7, #0]
 8001808:	2b04      	cmp	r3, #4
 800180a:	d104      	bne.n	8001816 <HAL_TIM_PWM_Start+0x92>
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	2202      	movs	r2, #2
 8001810:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001814:	e00b      	b.n	800182e <HAL_TIM_PWM_Start+0xaa>
 8001816:	683b      	ldr	r3, [r7, #0]
 8001818:	2b08      	cmp	r3, #8
 800181a:	d104      	bne.n	8001826 <HAL_TIM_PWM_Start+0xa2>
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	2202      	movs	r2, #2
 8001820:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001824:	e003      	b.n	800182e <HAL_TIM_PWM_Start+0xaa>
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	2202      	movs	r2, #2
 800182a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	2201      	movs	r2, #1
 8001834:	6839      	ldr	r1, [r7, #0]
 8001836:	4618      	mov	r0, r3
 8001838:	f000 fcd4 	bl	80021e4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	4a2d      	ldr	r2, [pc, #180]	; (80018f8 <HAL_TIM_PWM_Start+0x174>)
 8001842:	4293      	cmp	r3, r2
 8001844:	d004      	beq.n	8001850 <HAL_TIM_PWM_Start+0xcc>
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	4a2c      	ldr	r2, [pc, #176]	; (80018fc <HAL_TIM_PWM_Start+0x178>)
 800184c:	4293      	cmp	r3, r2
 800184e:	d101      	bne.n	8001854 <HAL_TIM_PWM_Start+0xd0>
 8001850:	2301      	movs	r3, #1
 8001852:	e000      	b.n	8001856 <HAL_TIM_PWM_Start+0xd2>
 8001854:	2300      	movs	r3, #0
 8001856:	2b00      	cmp	r3, #0
 8001858:	d007      	beq.n	800186a <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	687a      	ldr	r2, [r7, #4]
 8001860:	6812      	ldr	r2, [r2, #0]
 8001862:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001864:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001868:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	4a22      	ldr	r2, [pc, #136]	; (80018f8 <HAL_TIM_PWM_Start+0x174>)
 8001870:	4293      	cmp	r3, r2
 8001872:	d022      	beq.n	80018ba <HAL_TIM_PWM_Start+0x136>
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800187c:	d01d      	beq.n	80018ba <HAL_TIM_PWM_Start+0x136>
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	4a1f      	ldr	r2, [pc, #124]	; (8001900 <HAL_TIM_PWM_Start+0x17c>)
 8001884:	4293      	cmp	r3, r2
 8001886:	d018      	beq.n	80018ba <HAL_TIM_PWM_Start+0x136>
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	4a1d      	ldr	r2, [pc, #116]	; (8001904 <HAL_TIM_PWM_Start+0x180>)
 800188e:	4293      	cmp	r3, r2
 8001890:	d013      	beq.n	80018ba <HAL_TIM_PWM_Start+0x136>
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	4a1c      	ldr	r2, [pc, #112]	; (8001908 <HAL_TIM_PWM_Start+0x184>)
 8001898:	4293      	cmp	r3, r2
 800189a:	d00e      	beq.n	80018ba <HAL_TIM_PWM_Start+0x136>
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	4a16      	ldr	r2, [pc, #88]	; (80018fc <HAL_TIM_PWM_Start+0x178>)
 80018a2:	4293      	cmp	r3, r2
 80018a4:	d009      	beq.n	80018ba <HAL_TIM_PWM_Start+0x136>
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	4a18      	ldr	r2, [pc, #96]	; (800190c <HAL_TIM_PWM_Start+0x188>)
 80018ac:	4293      	cmp	r3, r2
 80018ae:	d004      	beq.n	80018ba <HAL_TIM_PWM_Start+0x136>
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	4a16      	ldr	r2, [pc, #88]	; (8001910 <HAL_TIM_PWM_Start+0x18c>)
 80018b6:	4293      	cmp	r3, r2
 80018b8:	d111      	bne.n	80018de <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	689b      	ldr	r3, [r3, #8]
 80018c0:	f003 0307 	and.w	r3, r3, #7
 80018c4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	2b06      	cmp	r3, #6
 80018ca:	d010      	beq.n	80018ee <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	687a      	ldr	r2, [r7, #4]
 80018d2:	6812      	ldr	r2, [r2, #0]
 80018d4:	6812      	ldr	r2, [r2, #0]
 80018d6:	f042 0201 	orr.w	r2, r2, #1
 80018da:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80018dc:	e007      	b.n	80018ee <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	687a      	ldr	r2, [r7, #4]
 80018e4:	6812      	ldr	r2, [r2, #0]
 80018e6:	6812      	ldr	r2, [r2, #0]
 80018e8:	f042 0201 	orr.w	r2, r2, #1
 80018ec:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80018ee:	2300      	movs	r3, #0
}
 80018f0:	4618      	mov	r0, r3
 80018f2:	3710      	adds	r7, #16
 80018f4:	46bd      	mov	sp, r7
 80018f6:	bd80      	pop	{r7, pc}
 80018f8:	40010000 	.word	0x40010000
 80018fc:	40010400 	.word	0x40010400
 8001900:	40000400 	.word	0x40000400
 8001904:	40000800 	.word	0x40000800
 8001908:	40000c00 	.word	0x40000c00
 800190c:	40014000 	.word	0x40014000
 8001910:	40001800 	.word	0x40001800

08001914 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	b086      	sub	sp, #24
 8001918:	af00      	add	r7, sp, #0
 800191a:	60f8      	str	r0, [r7, #12]
 800191c:	60b9      	str	r1, [r7, #8]
 800191e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001920:	2300      	movs	r3, #0
 8001922:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800192a:	2b01      	cmp	r3, #1
 800192c:	d101      	bne.n	8001932 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800192e:	2302      	movs	r3, #2
 8001930:	e0ae      	b.n	8001a90 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	2201      	movs	r2, #1
 8001936:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	2b0c      	cmp	r3, #12
 800193e:	f200 809f 	bhi.w	8001a80 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8001942:	a201      	add	r2, pc, #4	; (adr r2, 8001948 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8001944:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001948:	0800197d 	.word	0x0800197d
 800194c:	08001a81 	.word	0x08001a81
 8001950:	08001a81 	.word	0x08001a81
 8001954:	08001a81 	.word	0x08001a81
 8001958:	080019bd 	.word	0x080019bd
 800195c:	08001a81 	.word	0x08001a81
 8001960:	08001a81 	.word	0x08001a81
 8001964:	08001a81 	.word	0x08001a81
 8001968:	080019ff 	.word	0x080019ff
 800196c:	08001a81 	.word	0x08001a81
 8001970:	08001a81 	.word	0x08001a81
 8001974:	08001a81 	.word	0x08001a81
 8001978:	08001a3f 	.word	0x08001a3f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	68b9      	ldr	r1, [r7, #8]
 8001982:	4618      	mov	r0, r3
 8001984:	f000 f9e4 	bl	8001d50 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	68fa      	ldr	r2, [r7, #12]
 800198e:	6812      	ldr	r2, [r2, #0]
 8001990:	6992      	ldr	r2, [r2, #24]
 8001992:	f042 0208 	orr.w	r2, r2, #8
 8001996:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	68fa      	ldr	r2, [r7, #12]
 800199e:	6812      	ldr	r2, [r2, #0]
 80019a0:	6992      	ldr	r2, [r2, #24]
 80019a2:	f022 0204 	bic.w	r2, r2, #4
 80019a6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	68fa      	ldr	r2, [r7, #12]
 80019ae:	6812      	ldr	r2, [r2, #0]
 80019b0:	6991      	ldr	r1, [r2, #24]
 80019b2:	68ba      	ldr	r2, [r7, #8]
 80019b4:	6912      	ldr	r2, [r2, #16]
 80019b6:	430a      	orrs	r2, r1
 80019b8:	619a      	str	r2, [r3, #24]
      break;
 80019ba:	e064      	b.n	8001a86 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	68b9      	ldr	r1, [r7, #8]
 80019c2:	4618      	mov	r0, r3
 80019c4:	f000 fa34 	bl	8001e30 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	68fa      	ldr	r2, [r7, #12]
 80019ce:	6812      	ldr	r2, [r2, #0]
 80019d0:	6992      	ldr	r2, [r2, #24]
 80019d2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80019d6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	68fa      	ldr	r2, [r7, #12]
 80019de:	6812      	ldr	r2, [r2, #0]
 80019e0:	6992      	ldr	r2, [r2, #24]
 80019e2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80019e6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	68fa      	ldr	r2, [r7, #12]
 80019ee:	6812      	ldr	r2, [r2, #0]
 80019f0:	6991      	ldr	r1, [r2, #24]
 80019f2:	68ba      	ldr	r2, [r7, #8]
 80019f4:	6912      	ldr	r2, [r2, #16]
 80019f6:	0212      	lsls	r2, r2, #8
 80019f8:	430a      	orrs	r2, r1
 80019fa:	619a      	str	r2, [r3, #24]
      break;
 80019fc:	e043      	b.n	8001a86 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	68b9      	ldr	r1, [r7, #8]
 8001a04:	4618      	mov	r0, r3
 8001a06:	f000 fa89 	bl	8001f1c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	68fa      	ldr	r2, [r7, #12]
 8001a10:	6812      	ldr	r2, [r2, #0]
 8001a12:	69d2      	ldr	r2, [r2, #28]
 8001a14:	f042 0208 	orr.w	r2, r2, #8
 8001a18:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	68fa      	ldr	r2, [r7, #12]
 8001a20:	6812      	ldr	r2, [r2, #0]
 8001a22:	69d2      	ldr	r2, [r2, #28]
 8001a24:	f022 0204 	bic.w	r2, r2, #4
 8001a28:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	68fa      	ldr	r2, [r7, #12]
 8001a30:	6812      	ldr	r2, [r2, #0]
 8001a32:	69d1      	ldr	r1, [r2, #28]
 8001a34:	68ba      	ldr	r2, [r7, #8]
 8001a36:	6912      	ldr	r2, [r2, #16]
 8001a38:	430a      	orrs	r2, r1
 8001a3a:	61da      	str	r2, [r3, #28]
      break;
 8001a3c:	e023      	b.n	8001a86 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	68b9      	ldr	r1, [r7, #8]
 8001a44:	4618      	mov	r0, r3
 8001a46:	f000 fadd 	bl	8002004 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	68fa      	ldr	r2, [r7, #12]
 8001a50:	6812      	ldr	r2, [r2, #0]
 8001a52:	69d2      	ldr	r2, [r2, #28]
 8001a54:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001a58:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	68fa      	ldr	r2, [r7, #12]
 8001a60:	6812      	ldr	r2, [r2, #0]
 8001a62:	69d2      	ldr	r2, [r2, #28]
 8001a64:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001a68:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	68fa      	ldr	r2, [r7, #12]
 8001a70:	6812      	ldr	r2, [r2, #0]
 8001a72:	69d1      	ldr	r1, [r2, #28]
 8001a74:	68ba      	ldr	r2, [r7, #8]
 8001a76:	6912      	ldr	r2, [r2, #16]
 8001a78:	0212      	lsls	r2, r2, #8
 8001a7a:	430a      	orrs	r2, r1
 8001a7c:	61da      	str	r2, [r3, #28]
      break;
 8001a7e:	e002      	b.n	8001a86 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8001a80:	2301      	movs	r3, #1
 8001a82:	75fb      	strb	r3, [r7, #23]
      break;
 8001a84:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	2200      	movs	r2, #0
 8001a8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8001a8e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001a90:	4618      	mov	r0, r3
 8001a92:	3718      	adds	r7, #24
 8001a94:	46bd      	mov	sp, r7
 8001a96:	bd80      	pop	{r7, pc}

08001a98 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b084      	sub	sp, #16
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
 8001aa0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001aac:	2b01      	cmp	r3, #1
 8001aae:	d101      	bne.n	8001ab4 <HAL_TIM_ConfigClockSource+0x1c>
 8001ab0:	2302      	movs	r3, #2
 8001ab2:	e0a9      	b.n	8001c08 <HAL_TIM_ConfigClockSource+0x170>
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	2201      	movs	r2, #1
 8001ab8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	2202      	movs	r2, #2
 8001ac0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	689b      	ldr	r3, [r3, #8]
 8001aca:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001acc:	68bb      	ldr	r3, [r7, #8]
 8001ace:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8001ad2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001ad4:	68bb      	ldr	r3, [r7, #8]
 8001ad6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001ada:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	68ba      	ldr	r2, [r7, #8]
 8001ae2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8001ae4:	683b      	ldr	r3, [r7, #0]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	2b40      	cmp	r3, #64	; 0x40
 8001aea:	d067      	beq.n	8001bbc <HAL_TIM_ConfigClockSource+0x124>
 8001aec:	2b40      	cmp	r3, #64	; 0x40
 8001aee:	d80b      	bhi.n	8001b08 <HAL_TIM_ConfigClockSource+0x70>
 8001af0:	2b10      	cmp	r3, #16
 8001af2:	d073      	beq.n	8001bdc <HAL_TIM_ConfigClockSource+0x144>
 8001af4:	2b10      	cmp	r3, #16
 8001af6:	d802      	bhi.n	8001afe <HAL_TIM_ConfigClockSource+0x66>
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d06f      	beq.n	8001bdc <HAL_TIM_ConfigClockSource+0x144>
 8001afc:	e077      	b.n	8001bee <HAL_TIM_ConfigClockSource+0x156>
 8001afe:	2b20      	cmp	r3, #32
 8001b00:	d06c      	beq.n	8001bdc <HAL_TIM_ConfigClockSource+0x144>
 8001b02:	2b30      	cmp	r3, #48	; 0x30
 8001b04:	d06a      	beq.n	8001bdc <HAL_TIM_ConfigClockSource+0x144>
 8001b06:	e072      	b.n	8001bee <HAL_TIM_ConfigClockSource+0x156>
 8001b08:	2b70      	cmp	r3, #112	; 0x70
 8001b0a:	d00d      	beq.n	8001b28 <HAL_TIM_ConfigClockSource+0x90>
 8001b0c:	2b70      	cmp	r3, #112	; 0x70
 8001b0e:	d804      	bhi.n	8001b1a <HAL_TIM_ConfigClockSource+0x82>
 8001b10:	2b50      	cmp	r3, #80	; 0x50
 8001b12:	d033      	beq.n	8001b7c <HAL_TIM_ConfigClockSource+0xe4>
 8001b14:	2b60      	cmp	r3, #96	; 0x60
 8001b16:	d041      	beq.n	8001b9c <HAL_TIM_ConfigClockSource+0x104>
 8001b18:	e069      	b.n	8001bee <HAL_TIM_ConfigClockSource+0x156>
 8001b1a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001b1e:	d069      	beq.n	8001bf4 <HAL_TIM_ConfigClockSource+0x15c>
 8001b20:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001b24:	d017      	beq.n	8001b56 <HAL_TIM_ConfigClockSource+0xbe>
 8001b26:	e062      	b.n	8001bee <HAL_TIM_ConfigClockSource+0x156>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	6818      	ldr	r0, [r3, #0]
 8001b2c:	683b      	ldr	r3, [r7, #0]
 8001b2e:	6899      	ldr	r1, [r3, #8]
 8001b30:	683b      	ldr	r3, [r7, #0]
 8001b32:	685a      	ldr	r2, [r3, #4]
 8001b34:	683b      	ldr	r3, [r7, #0]
 8001b36:	68db      	ldr	r3, [r3, #12]
 8001b38:	f000 fb34 	bl	80021a4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	689b      	ldr	r3, [r3, #8]
 8001b42:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001b44:	68bb      	ldr	r3, [r7, #8]
 8001b46:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8001b4a:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	68ba      	ldr	r2, [r7, #8]
 8001b52:	609a      	str	r2, [r3, #8]
      break;
 8001b54:	e04f      	b.n	8001bf6 <HAL_TIM_ConfigClockSource+0x15e>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	6818      	ldr	r0, [r3, #0]
 8001b5a:	683b      	ldr	r3, [r7, #0]
 8001b5c:	6899      	ldr	r1, [r3, #8]
 8001b5e:	683b      	ldr	r3, [r7, #0]
 8001b60:	685a      	ldr	r2, [r3, #4]
 8001b62:	683b      	ldr	r3, [r7, #0]
 8001b64:	68db      	ldr	r3, [r3, #12]
 8001b66:	f000 fb1d 	bl	80021a4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	687a      	ldr	r2, [r7, #4]
 8001b70:	6812      	ldr	r2, [r2, #0]
 8001b72:	6892      	ldr	r2, [r2, #8]
 8001b74:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001b78:	609a      	str	r2, [r3, #8]
      break;
 8001b7a:	e03c      	b.n	8001bf6 <HAL_TIM_ConfigClockSource+0x15e>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	6818      	ldr	r0, [r3, #0]
 8001b80:	683b      	ldr	r3, [r7, #0]
 8001b82:	6859      	ldr	r1, [r3, #4]
 8001b84:	683b      	ldr	r3, [r7, #0]
 8001b86:	68db      	ldr	r3, [r3, #12]
 8001b88:	461a      	mov	r2, r3
 8001b8a:	f000 fa91 	bl	80020b0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	2150      	movs	r1, #80	; 0x50
 8001b94:	4618      	mov	r0, r3
 8001b96:	f000 faea 	bl	800216e <TIM_ITRx_SetConfig>
      break;
 8001b9a:	e02c      	b.n	8001bf6 <HAL_TIM_ConfigClockSource+0x15e>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	6818      	ldr	r0, [r3, #0]
 8001ba0:	683b      	ldr	r3, [r7, #0]
 8001ba2:	6859      	ldr	r1, [r3, #4]
 8001ba4:	683b      	ldr	r3, [r7, #0]
 8001ba6:	68db      	ldr	r3, [r3, #12]
 8001ba8:	461a      	mov	r2, r3
 8001baa:	f000 fab0 	bl	800210e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	2160      	movs	r1, #96	; 0x60
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	f000 fada 	bl	800216e <TIM_ITRx_SetConfig>
      break;
 8001bba:	e01c      	b.n	8001bf6 <HAL_TIM_ConfigClockSource+0x15e>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	6818      	ldr	r0, [r3, #0]
 8001bc0:	683b      	ldr	r3, [r7, #0]
 8001bc2:	6859      	ldr	r1, [r3, #4]
 8001bc4:	683b      	ldr	r3, [r7, #0]
 8001bc6:	68db      	ldr	r3, [r3, #12]
 8001bc8:	461a      	mov	r2, r3
 8001bca:	f000 fa71 	bl	80020b0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	2140      	movs	r1, #64	; 0x40
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	f000 faca 	bl	800216e <TIM_ITRx_SetConfig>
      break;
 8001bda:	e00c      	b.n	8001bf6 <HAL_TIM_ConfigClockSource+0x15e>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681a      	ldr	r2, [r3, #0]
 8001be0:	683b      	ldr	r3, [r7, #0]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	4619      	mov	r1, r3
 8001be6:	4610      	mov	r0, r2
 8001be8:	f000 fac1 	bl	800216e <TIM_ITRx_SetConfig>
      break;
 8001bec:	e003      	b.n	8001bf6 <HAL_TIM_ConfigClockSource+0x15e>
    }

    default:
      status = HAL_ERROR;
 8001bee:	2301      	movs	r3, #1
 8001bf0:	73fb      	strb	r3, [r7, #15]
      break;
 8001bf2:	e000      	b.n	8001bf6 <HAL_TIM_ConfigClockSource+0x15e>
      break;
 8001bf4:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	2201      	movs	r2, #1
 8001bfa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	2200      	movs	r2, #0
 8001c02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8001c06:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c08:	4618      	mov	r0, r3
 8001c0a:	3710      	adds	r7, #16
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	bd80      	pop	{r7, pc}

08001c10 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001c10:	b480      	push	{r7}
 8001c12:	b085      	sub	sp, #20
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]
 8001c18:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	4a40      	ldr	r2, [pc, #256]	; (8001d24 <TIM_Base_SetConfig+0x114>)
 8001c24:	4293      	cmp	r3, r2
 8001c26:	d013      	beq.n	8001c50 <TIM_Base_SetConfig+0x40>
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c2e:	d00f      	beq.n	8001c50 <TIM_Base_SetConfig+0x40>
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	4a3d      	ldr	r2, [pc, #244]	; (8001d28 <TIM_Base_SetConfig+0x118>)
 8001c34:	4293      	cmp	r3, r2
 8001c36:	d00b      	beq.n	8001c50 <TIM_Base_SetConfig+0x40>
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	4a3c      	ldr	r2, [pc, #240]	; (8001d2c <TIM_Base_SetConfig+0x11c>)
 8001c3c:	4293      	cmp	r3, r2
 8001c3e:	d007      	beq.n	8001c50 <TIM_Base_SetConfig+0x40>
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	4a3b      	ldr	r2, [pc, #236]	; (8001d30 <TIM_Base_SetConfig+0x120>)
 8001c44:	4293      	cmp	r3, r2
 8001c46:	d003      	beq.n	8001c50 <TIM_Base_SetConfig+0x40>
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	4a3a      	ldr	r2, [pc, #232]	; (8001d34 <TIM_Base_SetConfig+0x124>)
 8001c4c:	4293      	cmp	r3, r2
 8001c4e:	d108      	bne.n	8001c62 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001c56:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001c58:	683b      	ldr	r3, [r7, #0]
 8001c5a:	685b      	ldr	r3, [r3, #4]
 8001c5c:	68fa      	ldr	r2, [r7, #12]
 8001c5e:	4313      	orrs	r3, r2
 8001c60:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	4a2f      	ldr	r2, [pc, #188]	; (8001d24 <TIM_Base_SetConfig+0x114>)
 8001c66:	4293      	cmp	r3, r2
 8001c68:	d02b      	beq.n	8001cc2 <TIM_Base_SetConfig+0xb2>
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c70:	d027      	beq.n	8001cc2 <TIM_Base_SetConfig+0xb2>
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	4a2c      	ldr	r2, [pc, #176]	; (8001d28 <TIM_Base_SetConfig+0x118>)
 8001c76:	4293      	cmp	r3, r2
 8001c78:	d023      	beq.n	8001cc2 <TIM_Base_SetConfig+0xb2>
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	4a2b      	ldr	r2, [pc, #172]	; (8001d2c <TIM_Base_SetConfig+0x11c>)
 8001c7e:	4293      	cmp	r3, r2
 8001c80:	d01f      	beq.n	8001cc2 <TIM_Base_SetConfig+0xb2>
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	4a2a      	ldr	r2, [pc, #168]	; (8001d30 <TIM_Base_SetConfig+0x120>)
 8001c86:	4293      	cmp	r3, r2
 8001c88:	d01b      	beq.n	8001cc2 <TIM_Base_SetConfig+0xb2>
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	4a29      	ldr	r2, [pc, #164]	; (8001d34 <TIM_Base_SetConfig+0x124>)
 8001c8e:	4293      	cmp	r3, r2
 8001c90:	d017      	beq.n	8001cc2 <TIM_Base_SetConfig+0xb2>
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	4a28      	ldr	r2, [pc, #160]	; (8001d38 <TIM_Base_SetConfig+0x128>)
 8001c96:	4293      	cmp	r3, r2
 8001c98:	d013      	beq.n	8001cc2 <TIM_Base_SetConfig+0xb2>
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	4a27      	ldr	r2, [pc, #156]	; (8001d3c <TIM_Base_SetConfig+0x12c>)
 8001c9e:	4293      	cmp	r3, r2
 8001ca0:	d00f      	beq.n	8001cc2 <TIM_Base_SetConfig+0xb2>
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	4a26      	ldr	r2, [pc, #152]	; (8001d40 <TIM_Base_SetConfig+0x130>)
 8001ca6:	4293      	cmp	r3, r2
 8001ca8:	d00b      	beq.n	8001cc2 <TIM_Base_SetConfig+0xb2>
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	4a25      	ldr	r2, [pc, #148]	; (8001d44 <TIM_Base_SetConfig+0x134>)
 8001cae:	4293      	cmp	r3, r2
 8001cb0:	d007      	beq.n	8001cc2 <TIM_Base_SetConfig+0xb2>
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	4a24      	ldr	r2, [pc, #144]	; (8001d48 <TIM_Base_SetConfig+0x138>)
 8001cb6:	4293      	cmp	r3, r2
 8001cb8:	d003      	beq.n	8001cc2 <TIM_Base_SetConfig+0xb2>
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	4a23      	ldr	r2, [pc, #140]	; (8001d4c <TIM_Base_SetConfig+0x13c>)
 8001cbe:	4293      	cmp	r3, r2
 8001cc0:	d108      	bne.n	8001cd4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001cc8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001cca:	683b      	ldr	r3, [r7, #0]
 8001ccc:	68db      	ldr	r3, [r3, #12]
 8001cce:	68fa      	ldr	r2, [r7, #12]
 8001cd0:	4313      	orrs	r3, r2
 8001cd2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001cda:	683b      	ldr	r3, [r7, #0]
 8001cdc:	695b      	ldr	r3, [r3, #20]
 8001cde:	4313      	orrs	r3, r2
 8001ce0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	68fa      	ldr	r2, [r7, #12]
 8001ce6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001ce8:	683b      	ldr	r3, [r7, #0]
 8001cea:	689a      	ldr	r2, [r3, #8]
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001cf0:	683b      	ldr	r3, [r7, #0]
 8001cf2:	681a      	ldr	r2, [r3, #0]
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	4a0a      	ldr	r2, [pc, #40]	; (8001d24 <TIM_Base_SetConfig+0x114>)
 8001cfc:	4293      	cmp	r3, r2
 8001cfe:	d003      	beq.n	8001d08 <TIM_Base_SetConfig+0xf8>
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	4a0c      	ldr	r2, [pc, #48]	; (8001d34 <TIM_Base_SetConfig+0x124>)
 8001d04:	4293      	cmp	r3, r2
 8001d06:	d103      	bne.n	8001d10 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001d08:	683b      	ldr	r3, [r7, #0]
 8001d0a:	691a      	ldr	r2, [r3, #16]
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	2201      	movs	r2, #1
 8001d14:	615a      	str	r2, [r3, #20]
}
 8001d16:	bf00      	nop
 8001d18:	3714      	adds	r7, #20
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d20:	4770      	bx	lr
 8001d22:	bf00      	nop
 8001d24:	40010000 	.word	0x40010000
 8001d28:	40000400 	.word	0x40000400
 8001d2c:	40000800 	.word	0x40000800
 8001d30:	40000c00 	.word	0x40000c00
 8001d34:	40010400 	.word	0x40010400
 8001d38:	40014000 	.word	0x40014000
 8001d3c:	40014400 	.word	0x40014400
 8001d40:	40014800 	.word	0x40014800
 8001d44:	40001800 	.word	0x40001800
 8001d48:	40001c00 	.word	0x40001c00
 8001d4c:	40002000 	.word	0x40002000

08001d50 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8001d50:	b480      	push	{r7}
 8001d52:	b087      	sub	sp, #28
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
 8001d58:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	6a1b      	ldr	r3, [r3, #32]
 8001d5e:	f023 0201 	bic.w	r2, r3, #1
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	6a1b      	ldr	r3, [r3, #32]
 8001d6a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	685b      	ldr	r3, [r3, #4]
 8001d70:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	699b      	ldr	r3, [r3, #24]
 8001d76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001d7e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	f023 0303 	bic.w	r3, r3, #3
 8001d86:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001d88:	683b      	ldr	r3, [r7, #0]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	68fa      	ldr	r2, [r7, #12]
 8001d8e:	4313      	orrs	r3, r2
 8001d90:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8001d92:	697b      	ldr	r3, [r7, #20]
 8001d94:	f023 0302 	bic.w	r3, r3, #2
 8001d98:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8001d9a:	683b      	ldr	r3, [r7, #0]
 8001d9c:	689b      	ldr	r3, [r3, #8]
 8001d9e:	697a      	ldr	r2, [r7, #20]
 8001da0:	4313      	orrs	r3, r2
 8001da2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	4a20      	ldr	r2, [pc, #128]	; (8001e28 <TIM_OC1_SetConfig+0xd8>)
 8001da8:	4293      	cmp	r3, r2
 8001daa:	d003      	beq.n	8001db4 <TIM_OC1_SetConfig+0x64>
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	4a1f      	ldr	r2, [pc, #124]	; (8001e2c <TIM_OC1_SetConfig+0xdc>)
 8001db0:	4293      	cmp	r3, r2
 8001db2:	d10c      	bne.n	8001dce <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8001db4:	697b      	ldr	r3, [r7, #20]
 8001db6:	f023 0308 	bic.w	r3, r3, #8
 8001dba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8001dbc:	683b      	ldr	r3, [r7, #0]
 8001dbe:	68db      	ldr	r3, [r3, #12]
 8001dc0:	697a      	ldr	r2, [r7, #20]
 8001dc2:	4313      	orrs	r3, r2
 8001dc4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8001dc6:	697b      	ldr	r3, [r7, #20]
 8001dc8:	f023 0304 	bic.w	r3, r3, #4
 8001dcc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	4a15      	ldr	r2, [pc, #84]	; (8001e28 <TIM_OC1_SetConfig+0xd8>)
 8001dd2:	4293      	cmp	r3, r2
 8001dd4:	d003      	beq.n	8001dde <TIM_OC1_SetConfig+0x8e>
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	4a14      	ldr	r2, [pc, #80]	; (8001e2c <TIM_OC1_SetConfig+0xdc>)
 8001dda:	4293      	cmp	r3, r2
 8001ddc:	d111      	bne.n	8001e02 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8001dde:	693b      	ldr	r3, [r7, #16]
 8001de0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001de4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8001de6:	693b      	ldr	r3, [r7, #16]
 8001de8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001dec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8001dee:	683b      	ldr	r3, [r7, #0]
 8001df0:	695b      	ldr	r3, [r3, #20]
 8001df2:	693a      	ldr	r2, [r7, #16]
 8001df4:	4313      	orrs	r3, r2
 8001df6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8001df8:	683b      	ldr	r3, [r7, #0]
 8001dfa:	699b      	ldr	r3, [r3, #24]
 8001dfc:	693a      	ldr	r2, [r7, #16]
 8001dfe:	4313      	orrs	r3, r2
 8001e00:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	693a      	ldr	r2, [r7, #16]
 8001e06:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	68fa      	ldr	r2, [r7, #12]
 8001e0c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8001e0e:	683b      	ldr	r3, [r7, #0]
 8001e10:	685a      	ldr	r2, [r3, #4]
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	697a      	ldr	r2, [r7, #20]
 8001e1a:	621a      	str	r2, [r3, #32]
}
 8001e1c:	bf00      	nop
 8001e1e:	371c      	adds	r7, #28
 8001e20:	46bd      	mov	sp, r7
 8001e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e26:	4770      	bx	lr
 8001e28:	40010000 	.word	0x40010000
 8001e2c:	40010400 	.word	0x40010400

08001e30 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8001e30:	b480      	push	{r7}
 8001e32:	b087      	sub	sp, #28
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	6078      	str	r0, [r7, #4]
 8001e38:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	6a1b      	ldr	r3, [r3, #32]
 8001e3e:	f023 0210 	bic.w	r2, r3, #16
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	6a1b      	ldr	r3, [r3, #32]
 8001e4a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	685b      	ldr	r3, [r3, #4]
 8001e50:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	699b      	ldr	r3, [r3, #24]
 8001e56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001e5e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001e66:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001e68:	683b      	ldr	r3, [r7, #0]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	021b      	lsls	r3, r3, #8
 8001e6e:	68fa      	ldr	r2, [r7, #12]
 8001e70:	4313      	orrs	r3, r2
 8001e72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8001e74:	697b      	ldr	r3, [r7, #20]
 8001e76:	f023 0320 	bic.w	r3, r3, #32
 8001e7a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8001e7c:	683b      	ldr	r3, [r7, #0]
 8001e7e:	689b      	ldr	r3, [r3, #8]
 8001e80:	011b      	lsls	r3, r3, #4
 8001e82:	697a      	ldr	r2, [r7, #20]
 8001e84:	4313      	orrs	r3, r2
 8001e86:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	4a22      	ldr	r2, [pc, #136]	; (8001f14 <TIM_OC2_SetConfig+0xe4>)
 8001e8c:	4293      	cmp	r3, r2
 8001e8e:	d003      	beq.n	8001e98 <TIM_OC2_SetConfig+0x68>
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	4a21      	ldr	r2, [pc, #132]	; (8001f18 <TIM_OC2_SetConfig+0xe8>)
 8001e94:	4293      	cmp	r3, r2
 8001e96:	d10d      	bne.n	8001eb4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8001e98:	697b      	ldr	r3, [r7, #20]
 8001e9a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001e9e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8001ea0:	683b      	ldr	r3, [r7, #0]
 8001ea2:	68db      	ldr	r3, [r3, #12]
 8001ea4:	011b      	lsls	r3, r3, #4
 8001ea6:	697a      	ldr	r2, [r7, #20]
 8001ea8:	4313      	orrs	r3, r2
 8001eaa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8001eac:	697b      	ldr	r3, [r7, #20]
 8001eae:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001eb2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	4a17      	ldr	r2, [pc, #92]	; (8001f14 <TIM_OC2_SetConfig+0xe4>)
 8001eb8:	4293      	cmp	r3, r2
 8001eba:	d003      	beq.n	8001ec4 <TIM_OC2_SetConfig+0x94>
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	4a16      	ldr	r2, [pc, #88]	; (8001f18 <TIM_OC2_SetConfig+0xe8>)
 8001ec0:	4293      	cmp	r3, r2
 8001ec2:	d113      	bne.n	8001eec <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8001ec4:	693b      	ldr	r3, [r7, #16]
 8001ec6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001eca:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8001ecc:	693b      	ldr	r3, [r7, #16]
 8001ece:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001ed2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8001ed4:	683b      	ldr	r3, [r7, #0]
 8001ed6:	695b      	ldr	r3, [r3, #20]
 8001ed8:	009b      	lsls	r3, r3, #2
 8001eda:	693a      	ldr	r2, [r7, #16]
 8001edc:	4313      	orrs	r3, r2
 8001ede:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8001ee0:	683b      	ldr	r3, [r7, #0]
 8001ee2:	699b      	ldr	r3, [r3, #24]
 8001ee4:	009b      	lsls	r3, r3, #2
 8001ee6:	693a      	ldr	r2, [r7, #16]
 8001ee8:	4313      	orrs	r3, r2
 8001eea:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	693a      	ldr	r2, [r7, #16]
 8001ef0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	68fa      	ldr	r2, [r7, #12]
 8001ef6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8001ef8:	683b      	ldr	r3, [r7, #0]
 8001efa:	685a      	ldr	r2, [r3, #4]
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	697a      	ldr	r2, [r7, #20]
 8001f04:	621a      	str	r2, [r3, #32]
}
 8001f06:	bf00      	nop
 8001f08:	371c      	adds	r7, #28
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f10:	4770      	bx	lr
 8001f12:	bf00      	nop
 8001f14:	40010000 	.word	0x40010000
 8001f18:	40010400 	.word	0x40010400

08001f1c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8001f1c:	b480      	push	{r7}
 8001f1e:	b087      	sub	sp, #28
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]
 8001f24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	6a1b      	ldr	r3, [r3, #32]
 8001f2a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	6a1b      	ldr	r3, [r3, #32]
 8001f36:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	685b      	ldr	r3, [r3, #4]
 8001f3c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	69db      	ldr	r3, [r3, #28]
 8001f42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001f4a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	f023 0303 	bic.w	r3, r3, #3
 8001f52:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001f54:	683b      	ldr	r3, [r7, #0]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	68fa      	ldr	r2, [r7, #12]
 8001f5a:	4313      	orrs	r3, r2
 8001f5c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8001f5e:	697b      	ldr	r3, [r7, #20]
 8001f60:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001f64:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8001f66:	683b      	ldr	r3, [r7, #0]
 8001f68:	689b      	ldr	r3, [r3, #8]
 8001f6a:	021b      	lsls	r3, r3, #8
 8001f6c:	697a      	ldr	r2, [r7, #20]
 8001f6e:	4313      	orrs	r3, r2
 8001f70:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	4a21      	ldr	r2, [pc, #132]	; (8001ffc <TIM_OC3_SetConfig+0xe0>)
 8001f76:	4293      	cmp	r3, r2
 8001f78:	d003      	beq.n	8001f82 <TIM_OC3_SetConfig+0x66>
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	4a20      	ldr	r2, [pc, #128]	; (8002000 <TIM_OC3_SetConfig+0xe4>)
 8001f7e:	4293      	cmp	r3, r2
 8001f80:	d10d      	bne.n	8001f9e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8001f82:	697b      	ldr	r3, [r7, #20]
 8001f84:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001f88:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8001f8a:	683b      	ldr	r3, [r7, #0]
 8001f8c:	68db      	ldr	r3, [r3, #12]
 8001f8e:	021b      	lsls	r3, r3, #8
 8001f90:	697a      	ldr	r2, [r7, #20]
 8001f92:	4313      	orrs	r3, r2
 8001f94:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8001f96:	697b      	ldr	r3, [r7, #20]
 8001f98:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001f9c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	4a16      	ldr	r2, [pc, #88]	; (8001ffc <TIM_OC3_SetConfig+0xe0>)
 8001fa2:	4293      	cmp	r3, r2
 8001fa4:	d003      	beq.n	8001fae <TIM_OC3_SetConfig+0x92>
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	4a15      	ldr	r2, [pc, #84]	; (8002000 <TIM_OC3_SetConfig+0xe4>)
 8001faa:	4293      	cmp	r3, r2
 8001fac:	d113      	bne.n	8001fd6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8001fae:	693b      	ldr	r3, [r7, #16]
 8001fb0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001fb4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8001fb6:	693b      	ldr	r3, [r7, #16]
 8001fb8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001fbc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8001fbe:	683b      	ldr	r3, [r7, #0]
 8001fc0:	695b      	ldr	r3, [r3, #20]
 8001fc2:	011b      	lsls	r3, r3, #4
 8001fc4:	693a      	ldr	r2, [r7, #16]
 8001fc6:	4313      	orrs	r3, r2
 8001fc8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8001fca:	683b      	ldr	r3, [r7, #0]
 8001fcc:	699b      	ldr	r3, [r3, #24]
 8001fce:	011b      	lsls	r3, r3, #4
 8001fd0:	693a      	ldr	r2, [r7, #16]
 8001fd2:	4313      	orrs	r3, r2
 8001fd4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	693a      	ldr	r2, [r7, #16]
 8001fda:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	68fa      	ldr	r2, [r7, #12]
 8001fe0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8001fe2:	683b      	ldr	r3, [r7, #0]
 8001fe4:	685a      	ldr	r2, [r3, #4]
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	697a      	ldr	r2, [r7, #20]
 8001fee:	621a      	str	r2, [r3, #32]
}
 8001ff0:	bf00      	nop
 8001ff2:	371c      	adds	r7, #28
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffa:	4770      	bx	lr
 8001ffc:	40010000 	.word	0x40010000
 8002000:	40010400 	.word	0x40010400

08002004 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002004:	b480      	push	{r7}
 8002006:	b087      	sub	sp, #28
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]
 800200c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	6a1b      	ldr	r3, [r3, #32]
 8002012:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	6a1b      	ldr	r3, [r3, #32]
 800201e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	685b      	ldr	r3, [r3, #4]
 8002024:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	69db      	ldr	r3, [r3, #28]
 800202a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002032:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800203a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800203c:	683b      	ldr	r3, [r7, #0]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	021b      	lsls	r3, r3, #8
 8002042:	68fa      	ldr	r2, [r7, #12]
 8002044:	4313      	orrs	r3, r2
 8002046:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002048:	693b      	ldr	r3, [r7, #16]
 800204a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800204e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002050:	683b      	ldr	r3, [r7, #0]
 8002052:	689b      	ldr	r3, [r3, #8]
 8002054:	031b      	lsls	r3, r3, #12
 8002056:	693a      	ldr	r2, [r7, #16]
 8002058:	4313      	orrs	r3, r2
 800205a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	4a12      	ldr	r2, [pc, #72]	; (80020a8 <TIM_OC4_SetConfig+0xa4>)
 8002060:	4293      	cmp	r3, r2
 8002062:	d003      	beq.n	800206c <TIM_OC4_SetConfig+0x68>
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	4a11      	ldr	r2, [pc, #68]	; (80020ac <TIM_OC4_SetConfig+0xa8>)
 8002068:	4293      	cmp	r3, r2
 800206a:	d109      	bne.n	8002080 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800206c:	697b      	ldr	r3, [r7, #20]
 800206e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002072:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002074:	683b      	ldr	r3, [r7, #0]
 8002076:	695b      	ldr	r3, [r3, #20]
 8002078:	019b      	lsls	r3, r3, #6
 800207a:	697a      	ldr	r2, [r7, #20]
 800207c:	4313      	orrs	r3, r2
 800207e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	697a      	ldr	r2, [r7, #20]
 8002084:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	68fa      	ldr	r2, [r7, #12]
 800208a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800208c:	683b      	ldr	r3, [r7, #0]
 800208e:	685a      	ldr	r2, [r3, #4]
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	693a      	ldr	r2, [r7, #16]
 8002098:	621a      	str	r2, [r3, #32]
}
 800209a:	bf00      	nop
 800209c:	371c      	adds	r7, #28
 800209e:	46bd      	mov	sp, r7
 80020a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a4:	4770      	bx	lr
 80020a6:	bf00      	nop
 80020a8:	40010000 	.word	0x40010000
 80020ac:	40010400 	.word	0x40010400

080020b0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80020b0:	b480      	push	{r7}
 80020b2:	b087      	sub	sp, #28
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	60f8      	str	r0, [r7, #12]
 80020b8:	60b9      	str	r1, [r7, #8]
 80020ba:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	6a1b      	ldr	r3, [r3, #32]
 80020c0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	6a1b      	ldr	r3, [r3, #32]
 80020c6:	f023 0201 	bic.w	r2, r3, #1
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	699b      	ldr	r3, [r3, #24]
 80020d2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80020d4:	693b      	ldr	r3, [r7, #16]
 80020d6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80020da:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	011b      	lsls	r3, r3, #4
 80020e0:	693a      	ldr	r2, [r7, #16]
 80020e2:	4313      	orrs	r3, r2
 80020e4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80020e6:	697b      	ldr	r3, [r7, #20]
 80020e8:	f023 030a 	bic.w	r3, r3, #10
 80020ec:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80020ee:	697a      	ldr	r2, [r7, #20]
 80020f0:	68bb      	ldr	r3, [r7, #8]
 80020f2:	4313      	orrs	r3, r2
 80020f4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	693a      	ldr	r2, [r7, #16]
 80020fa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	697a      	ldr	r2, [r7, #20]
 8002100:	621a      	str	r2, [r3, #32]
}
 8002102:	bf00      	nop
 8002104:	371c      	adds	r7, #28
 8002106:	46bd      	mov	sp, r7
 8002108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210c:	4770      	bx	lr

0800210e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800210e:	b480      	push	{r7}
 8002110:	b087      	sub	sp, #28
 8002112:	af00      	add	r7, sp, #0
 8002114:	60f8      	str	r0, [r7, #12]
 8002116:	60b9      	str	r1, [r7, #8]
 8002118:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	6a1b      	ldr	r3, [r3, #32]
 800211e:	f023 0210 	bic.w	r2, r3, #16
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	699b      	ldr	r3, [r3, #24]
 800212a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	6a1b      	ldr	r3, [r3, #32]
 8002130:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002132:	697b      	ldr	r3, [r7, #20]
 8002134:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002138:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	031b      	lsls	r3, r3, #12
 800213e:	697a      	ldr	r2, [r7, #20]
 8002140:	4313      	orrs	r3, r2
 8002142:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002144:	693b      	ldr	r3, [r7, #16]
 8002146:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800214a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800214c:	68bb      	ldr	r3, [r7, #8]
 800214e:	011b      	lsls	r3, r3, #4
 8002150:	693a      	ldr	r2, [r7, #16]
 8002152:	4313      	orrs	r3, r2
 8002154:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	697a      	ldr	r2, [r7, #20]
 800215a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	693a      	ldr	r2, [r7, #16]
 8002160:	621a      	str	r2, [r3, #32]
}
 8002162:	bf00      	nop
 8002164:	371c      	adds	r7, #28
 8002166:	46bd      	mov	sp, r7
 8002168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216c:	4770      	bx	lr

0800216e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800216e:	b480      	push	{r7}
 8002170:	b085      	sub	sp, #20
 8002172:	af00      	add	r7, sp, #0
 8002174:	6078      	str	r0, [r7, #4]
 8002176:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	689b      	ldr	r3, [r3, #8]
 800217c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002184:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002186:	683a      	ldr	r2, [r7, #0]
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	4313      	orrs	r3, r2
 800218c:	f043 0307 	orr.w	r3, r3, #7
 8002190:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	68fa      	ldr	r2, [r7, #12]
 8002196:	609a      	str	r2, [r3, #8]
}
 8002198:	bf00      	nop
 800219a:	3714      	adds	r7, #20
 800219c:	46bd      	mov	sp, r7
 800219e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a2:	4770      	bx	lr

080021a4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80021a4:	b480      	push	{r7}
 80021a6:	b087      	sub	sp, #28
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	60f8      	str	r0, [r7, #12]
 80021ac:	60b9      	str	r1, [r7, #8]
 80021ae:	607a      	str	r2, [r7, #4]
 80021b0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	689b      	ldr	r3, [r3, #8]
 80021b6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80021b8:	697b      	ldr	r3, [r7, #20]
 80021ba:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80021be:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80021c0:	683b      	ldr	r3, [r7, #0]
 80021c2:	021a      	lsls	r2, r3, #8
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	431a      	orrs	r2, r3
 80021c8:	68bb      	ldr	r3, [r7, #8]
 80021ca:	4313      	orrs	r3, r2
 80021cc:	697a      	ldr	r2, [r7, #20]
 80021ce:	4313      	orrs	r3, r2
 80021d0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	697a      	ldr	r2, [r7, #20]
 80021d6:	609a      	str	r2, [r3, #8]
}
 80021d8:	bf00      	nop
 80021da:	371c      	adds	r7, #28
 80021dc:	46bd      	mov	sp, r7
 80021de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e2:	4770      	bx	lr

080021e4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80021e4:	b480      	push	{r7}
 80021e6:	b087      	sub	sp, #28
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	60f8      	str	r0, [r7, #12]
 80021ec:	60b9      	str	r1, [r7, #8]
 80021ee:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80021f0:	68bb      	ldr	r3, [r7, #8]
 80021f2:	f003 031f 	and.w	r3, r3, #31
 80021f6:	2201      	movs	r2, #1
 80021f8:	fa02 f303 	lsl.w	r3, r2, r3
 80021fc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	6a1a      	ldr	r2, [r3, #32]
 8002202:	697b      	ldr	r3, [r7, #20]
 8002204:	43db      	mvns	r3, r3
 8002206:	401a      	ands	r2, r3
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	6a1a      	ldr	r2, [r3, #32]
 8002210:	68bb      	ldr	r3, [r7, #8]
 8002212:	f003 031f 	and.w	r3, r3, #31
 8002216:	6879      	ldr	r1, [r7, #4]
 8002218:	fa01 f303 	lsl.w	r3, r1, r3
 800221c:	431a      	orrs	r2, r3
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	621a      	str	r2, [r3, #32]
}
 8002222:	bf00      	nop
 8002224:	371c      	adds	r7, #28
 8002226:	46bd      	mov	sp, r7
 8002228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222c:	4770      	bx	lr
	...

08002230 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002230:	b480      	push	{r7}
 8002232:	b085      	sub	sp, #20
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
 8002238:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002240:	2b01      	cmp	r3, #1
 8002242:	d101      	bne.n	8002248 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002244:	2302      	movs	r3, #2
 8002246:	e05a      	b.n	80022fe <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	2201      	movs	r2, #1
 800224c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	2202      	movs	r2, #2
 8002254:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	685b      	ldr	r3, [r3, #4]
 800225e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	689b      	ldr	r3, [r3, #8]
 8002266:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800226e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002270:	683b      	ldr	r3, [r7, #0]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	68fa      	ldr	r2, [r7, #12]
 8002276:	4313      	orrs	r3, r2
 8002278:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	68fa      	ldr	r2, [r7, #12]
 8002280:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	4a21      	ldr	r2, [pc, #132]	; (800230c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8002288:	4293      	cmp	r3, r2
 800228a:	d022      	beq.n	80022d2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002294:	d01d      	beq.n	80022d2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	4a1d      	ldr	r2, [pc, #116]	; (8002310 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800229c:	4293      	cmp	r3, r2
 800229e:	d018      	beq.n	80022d2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	4a1b      	ldr	r2, [pc, #108]	; (8002314 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80022a6:	4293      	cmp	r3, r2
 80022a8:	d013      	beq.n	80022d2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	4a1a      	ldr	r2, [pc, #104]	; (8002318 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80022b0:	4293      	cmp	r3, r2
 80022b2:	d00e      	beq.n	80022d2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	4a18      	ldr	r2, [pc, #96]	; (800231c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80022ba:	4293      	cmp	r3, r2
 80022bc:	d009      	beq.n	80022d2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	4a17      	ldr	r2, [pc, #92]	; (8002320 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80022c4:	4293      	cmp	r3, r2
 80022c6:	d004      	beq.n	80022d2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	4a15      	ldr	r2, [pc, #84]	; (8002324 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80022ce:	4293      	cmp	r3, r2
 80022d0:	d10c      	bne.n	80022ec <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80022d2:	68bb      	ldr	r3, [r7, #8]
 80022d4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80022d8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80022da:	683b      	ldr	r3, [r7, #0]
 80022dc:	685b      	ldr	r3, [r3, #4]
 80022de:	68ba      	ldr	r2, [r7, #8]
 80022e0:	4313      	orrs	r3, r2
 80022e2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	68ba      	ldr	r2, [r7, #8]
 80022ea:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	2201      	movs	r2, #1
 80022f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	2200      	movs	r2, #0
 80022f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80022fc:	2300      	movs	r3, #0
}
 80022fe:	4618      	mov	r0, r3
 8002300:	3714      	adds	r7, #20
 8002302:	46bd      	mov	sp, r7
 8002304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002308:	4770      	bx	lr
 800230a:	bf00      	nop
 800230c:	40010000 	.word	0x40010000
 8002310:	40000400 	.word	0x40000400
 8002314:	40000800 	.word	0x40000800
 8002318:	40000c00 	.word	0x40000c00
 800231c:	40010400 	.word	0x40010400
 8002320:	40014000 	.word	0x40014000
 8002324:	40001800 	.word	0x40001800

08002328 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002328:	b580      	push	{r7, lr}
 800232a:	b082      	sub	sp, #8
 800232c:	af00      	add	r7, sp, #0
 800232e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	2b00      	cmp	r3, #0
 8002334:	d101      	bne.n	800233a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002336:	2301      	movs	r3, #1
 8002338:	e03f      	b.n	80023ba <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002340:	b2db      	uxtb	r3, r3
 8002342:	2b00      	cmp	r3, #0
 8002344:	d106      	bne.n	8002354 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	2200      	movs	r2, #0
 800234a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800234e:	6878      	ldr	r0, [r7, #4]
 8002350:	f001 f868 	bl	8003424 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	2224      	movs	r2, #36	; 0x24
 8002358:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	687a      	ldr	r2, [r7, #4]
 8002362:	6812      	ldr	r2, [r2, #0]
 8002364:	68d2      	ldr	r2, [r2, #12]
 8002366:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800236a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800236c:	6878      	ldr	r0, [r7, #4]
 800236e:	f000 f9c9 	bl	8002704 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	687a      	ldr	r2, [r7, #4]
 8002378:	6812      	ldr	r2, [r2, #0]
 800237a:	6912      	ldr	r2, [r2, #16]
 800237c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002380:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	687a      	ldr	r2, [r7, #4]
 8002388:	6812      	ldr	r2, [r2, #0]
 800238a:	6952      	ldr	r2, [r2, #20]
 800238c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002390:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	687a      	ldr	r2, [r7, #4]
 8002398:	6812      	ldr	r2, [r2, #0]
 800239a:	68d2      	ldr	r2, [r2, #12]
 800239c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80023a0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	2200      	movs	r2, #0
 80023a6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	2220      	movs	r2, #32
 80023ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	2220      	movs	r2, #32
 80023b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80023b8:	2300      	movs	r3, #0
}
 80023ba:	4618      	mov	r0, r3
 80023bc:	3708      	adds	r7, #8
 80023be:	46bd      	mov	sp, r7
 80023c0:	bd80      	pop	{r7, pc}

080023c2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80023c2:	b580      	push	{r7, lr}
 80023c4:	b08a      	sub	sp, #40	; 0x28
 80023c6:	af02      	add	r7, sp, #8
 80023c8:	60f8      	str	r0, [r7, #12]
 80023ca:	60b9      	str	r1, [r7, #8]
 80023cc:	603b      	str	r3, [r7, #0]
 80023ce:	4613      	mov	r3, r2
 80023d0:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80023d2:	2300      	movs	r3, #0
 80023d4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80023dc:	b2db      	uxtb	r3, r3
 80023de:	2b20      	cmp	r3, #32
 80023e0:	d17b      	bne.n	80024da <HAL_UART_Transmit+0x118>
  {
    if ((pData == NULL) || (Size == 0U))
 80023e2:	68bb      	ldr	r3, [r7, #8]
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d002      	beq.n	80023ee <HAL_UART_Transmit+0x2c>
 80023e8:	88fb      	ldrh	r3, [r7, #6]
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d101      	bne.n	80023f2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80023ee:	2301      	movs	r3, #1
 80023f0:	e074      	b.n	80024dc <HAL_UART_Transmit+0x11a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80023f8:	2b01      	cmp	r3, #1
 80023fa:	d101      	bne.n	8002400 <HAL_UART_Transmit+0x3e>
 80023fc:	2302      	movs	r3, #2
 80023fe:	e06d      	b.n	80024dc <HAL_UART_Transmit+0x11a>
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	2201      	movs	r2, #1
 8002404:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	2200      	movs	r2, #0
 800240c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	2221      	movs	r2, #33	; 0x21
 8002412:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002416:	f7fe f919 	bl	800064c <HAL_GetTick>
 800241a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	88fa      	ldrh	r2, [r7, #6]
 8002420:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	88fa      	ldrh	r2, [r7, #6]
 8002426:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	689b      	ldr	r3, [r3, #8]
 800242c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002430:	d108      	bne.n	8002444 <HAL_UART_Transmit+0x82>
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	691b      	ldr	r3, [r3, #16]
 8002436:	2b00      	cmp	r3, #0
 8002438:	d104      	bne.n	8002444 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800243a:	2300      	movs	r3, #0
 800243c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800243e:	68bb      	ldr	r3, [r7, #8]
 8002440:	61bb      	str	r3, [r7, #24]
 8002442:	e003      	b.n	800244c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002444:	68bb      	ldr	r3, [r7, #8]
 8002446:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002448:	2300      	movs	r3, #0
 800244a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	2200      	movs	r2, #0
 8002450:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002454:	e029      	b.n	80024aa <HAL_UART_Transmit+0xe8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002456:	683b      	ldr	r3, [r7, #0]
 8002458:	9300      	str	r3, [sp, #0]
 800245a:	697b      	ldr	r3, [r7, #20]
 800245c:	2200      	movs	r2, #0
 800245e:	2180      	movs	r1, #128	; 0x80
 8002460:	68f8      	ldr	r0, [r7, #12]
 8002462:	f000 f8e1 	bl	8002628 <UART_WaitOnFlagUntilTimeout>
 8002466:	4603      	mov	r3, r0
 8002468:	2b00      	cmp	r3, #0
 800246a:	d001      	beq.n	8002470 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800246c:	2303      	movs	r3, #3
 800246e:	e035      	b.n	80024dc <HAL_UART_Transmit+0x11a>
      }
      if (pdata8bits == NULL)
 8002470:	69fb      	ldr	r3, [r7, #28]
 8002472:	2b00      	cmp	r3, #0
 8002474:	d10a      	bne.n	800248c <HAL_UART_Transmit+0xca>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	69ba      	ldr	r2, [r7, #24]
 800247c:	8812      	ldrh	r2, [r2, #0]
 800247e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002482:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002484:	69bb      	ldr	r3, [r7, #24]
 8002486:	3302      	adds	r3, #2
 8002488:	61bb      	str	r3, [r7, #24]
 800248a:	e007      	b.n	800249c <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	69fa      	ldr	r2, [r7, #28]
 8002492:	7812      	ldrb	r2, [r2, #0]
 8002494:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002496:	69fb      	ldr	r3, [r7, #28]
 8002498:	3301      	adds	r3, #1
 800249a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80024a0:	b29b      	uxth	r3, r3
 80024a2:	3b01      	subs	r3, #1
 80024a4:	b29a      	uxth	r2, r3
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80024ae:	b29b      	uxth	r3, r3
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d1d0      	bne.n	8002456 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80024b4:	683b      	ldr	r3, [r7, #0]
 80024b6:	9300      	str	r3, [sp, #0]
 80024b8:	697b      	ldr	r3, [r7, #20]
 80024ba:	2200      	movs	r2, #0
 80024bc:	2140      	movs	r1, #64	; 0x40
 80024be:	68f8      	ldr	r0, [r7, #12]
 80024c0:	f000 f8b2 	bl	8002628 <UART_WaitOnFlagUntilTimeout>
 80024c4:	4603      	mov	r3, r0
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d001      	beq.n	80024ce <HAL_UART_Transmit+0x10c>
    {
      return HAL_TIMEOUT;
 80024ca:	2303      	movs	r3, #3
 80024cc:	e006      	b.n	80024dc <HAL_UART_Transmit+0x11a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	2220      	movs	r2, #32
 80024d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80024d6:	2300      	movs	r3, #0
 80024d8:	e000      	b.n	80024dc <HAL_UART_Transmit+0x11a>
  }
  else
  {
    return HAL_BUSY;
 80024da:	2302      	movs	r3, #2
  }
}
 80024dc:	4618      	mov	r0, r3
 80024de:	3720      	adds	r7, #32
 80024e0:	46bd      	mov	sp, r7
 80024e2:	bd80      	pop	{r7, pc}

080024e4 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	b08a      	sub	sp, #40	; 0x28
 80024e8:	af02      	add	r7, sp, #8
 80024ea:	60f8      	str	r0, [r7, #12]
 80024ec:	60b9      	str	r1, [r7, #8]
 80024ee:	603b      	str	r3, [r7, #0]
 80024f0:	4613      	mov	r3, r2
 80024f2:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80024f4:	2300      	movs	r3, #0
 80024f6:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80024fe:	b2db      	uxtb	r3, r3
 8002500:	2b20      	cmp	r3, #32
 8002502:	f040 808c 	bne.w	800261e <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002506:	68bb      	ldr	r3, [r7, #8]
 8002508:	2b00      	cmp	r3, #0
 800250a:	d002      	beq.n	8002512 <HAL_UART_Receive+0x2e>
 800250c:	88fb      	ldrh	r3, [r7, #6]
 800250e:	2b00      	cmp	r3, #0
 8002510:	d101      	bne.n	8002516 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8002512:	2301      	movs	r3, #1
 8002514:	e084      	b.n	8002620 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800251c:	2b01      	cmp	r3, #1
 800251e:	d101      	bne.n	8002524 <HAL_UART_Receive+0x40>
 8002520:	2302      	movs	r3, #2
 8002522:	e07d      	b.n	8002620 <HAL_UART_Receive+0x13c>
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	2201      	movs	r2, #1
 8002528:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	2200      	movs	r2, #0
 8002530:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	2222      	movs	r2, #34	; 0x22
 8002536:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	2200      	movs	r2, #0
 800253e:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002540:	f7fe f884 	bl	800064c <HAL_GetTick>
 8002544:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	88fa      	ldrh	r2, [r7, #6]
 800254a:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	88fa      	ldrh	r2, [r7, #6]
 8002550:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	689b      	ldr	r3, [r3, #8]
 8002556:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800255a:	d108      	bne.n	800256e <HAL_UART_Receive+0x8a>
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	691b      	ldr	r3, [r3, #16]
 8002560:	2b00      	cmp	r3, #0
 8002562:	d104      	bne.n	800256e <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8002564:	2300      	movs	r3, #0
 8002566:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002568:	68bb      	ldr	r3, [r7, #8]
 800256a:	61bb      	str	r3, [r7, #24]
 800256c:	e003      	b.n	8002576 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 800256e:	68bb      	ldr	r3, [r7, #8]
 8002570:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002572:	2300      	movs	r3, #0
 8002574:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	2200      	movs	r2, #0
 800257a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 800257e:	e043      	b.n	8002608 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002580:	683b      	ldr	r3, [r7, #0]
 8002582:	9300      	str	r3, [sp, #0]
 8002584:	697b      	ldr	r3, [r7, #20]
 8002586:	2200      	movs	r2, #0
 8002588:	2120      	movs	r1, #32
 800258a:	68f8      	ldr	r0, [r7, #12]
 800258c:	f000 f84c 	bl	8002628 <UART_WaitOnFlagUntilTimeout>
 8002590:	4603      	mov	r3, r0
 8002592:	2b00      	cmp	r3, #0
 8002594:	d001      	beq.n	800259a <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8002596:	2303      	movs	r3, #3
 8002598:	e042      	b.n	8002620 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 800259a:	69fb      	ldr	r3, [r7, #28]
 800259c:	2b00      	cmp	r3, #0
 800259e:	d10c      	bne.n	80025ba <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	685b      	ldr	r3, [r3, #4]
 80025a6:	b29b      	uxth	r3, r3
 80025a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80025ac:	b29a      	uxth	r2, r3
 80025ae:	69bb      	ldr	r3, [r7, #24]
 80025b0:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80025b2:	69bb      	ldr	r3, [r7, #24]
 80025b4:	3302      	adds	r3, #2
 80025b6:	61bb      	str	r3, [r7, #24]
 80025b8:	e01f      	b.n	80025fa <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	689b      	ldr	r3, [r3, #8]
 80025be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80025c2:	d007      	beq.n	80025d4 <HAL_UART_Receive+0xf0>
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	689b      	ldr	r3, [r3, #8]
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d10a      	bne.n	80025e2 <HAL_UART_Receive+0xfe>
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	691b      	ldr	r3, [r3, #16]
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d106      	bne.n	80025e2 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	685b      	ldr	r3, [r3, #4]
 80025da:	b2da      	uxtb	r2, r3
 80025dc:	69fb      	ldr	r3, [r7, #28]
 80025de:	701a      	strb	r2, [r3, #0]
 80025e0:	e008      	b.n	80025f4 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	685b      	ldr	r3, [r3, #4]
 80025e8:	b2db      	uxtb	r3, r3
 80025ea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80025ee:	b2da      	uxtb	r2, r3
 80025f0:	69fb      	ldr	r3, [r7, #28]
 80025f2:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 80025f4:	69fb      	ldr	r3, [r7, #28]
 80025f6:	3301      	adds	r3, #1
 80025f8:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80025fe:	b29b      	uxth	r3, r3
 8002600:	3b01      	subs	r3, #1
 8002602:	b29a      	uxth	r2, r3
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800260c:	b29b      	uxth	r3, r3
 800260e:	2b00      	cmp	r3, #0
 8002610:	d1b6      	bne.n	8002580 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	2220      	movs	r2, #32
 8002616:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 800261a:	2300      	movs	r3, #0
 800261c:	e000      	b.n	8002620 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 800261e:	2302      	movs	r3, #2
  }
}
 8002620:	4618      	mov	r0, r3
 8002622:	3720      	adds	r7, #32
 8002624:	46bd      	mov	sp, r7
 8002626:	bd80      	pop	{r7, pc}

08002628 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002628:	b580      	push	{r7, lr}
 800262a:	b090      	sub	sp, #64	; 0x40
 800262c:	af00      	add	r7, sp, #0
 800262e:	60f8      	str	r0, [r7, #12]
 8002630:	60b9      	str	r1, [r7, #8]
 8002632:	603b      	str	r3, [r7, #0]
 8002634:	4613      	mov	r3, r2
 8002636:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002638:	e050      	b.n	80026dc <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800263a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800263c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002640:	d04c      	beq.n	80026dc <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002642:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002644:	2b00      	cmp	r3, #0
 8002646:	d007      	beq.n	8002658 <UART_WaitOnFlagUntilTimeout+0x30>
 8002648:	f7fe f800 	bl	800064c <HAL_GetTick>
 800264c:	4602      	mov	r2, r0
 800264e:	683b      	ldr	r3, [r7, #0]
 8002650:	1ad2      	subs	r2, r2, r3
 8002652:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002654:	429a      	cmp	r2, r3
 8002656:	d941      	bls.n	80026dc <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	330c      	adds	r3, #12
 800265e:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002660:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002662:	e853 3f00 	ldrex	r3, [r3]
 8002666:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002668:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800266a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800266e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	330c      	adds	r3, #12
 8002676:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002678:	637a      	str	r2, [r7, #52]	; 0x34
 800267a:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800267c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800267e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002680:	e841 2300 	strex	r3, r2, [r1]
 8002684:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002686:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002688:	2b00      	cmp	r3, #0
 800268a:	d1e5      	bne.n	8002658 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	3314      	adds	r3, #20
 8002692:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002694:	697b      	ldr	r3, [r7, #20]
 8002696:	e853 3f00 	ldrex	r3, [r3]
 800269a:	613b      	str	r3, [r7, #16]
   return(result);
 800269c:	693b      	ldr	r3, [r7, #16]
 800269e:	f023 0301 	bic.w	r3, r3, #1
 80026a2:	63bb      	str	r3, [r7, #56]	; 0x38
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	3314      	adds	r3, #20
 80026aa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80026ac:	623a      	str	r2, [r7, #32]
 80026ae:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80026b0:	69f9      	ldr	r1, [r7, #28]
 80026b2:	6a3a      	ldr	r2, [r7, #32]
 80026b4:	e841 2300 	strex	r3, r2, [r1]
 80026b8:	61bb      	str	r3, [r7, #24]
   return(result);
 80026ba:	69bb      	ldr	r3, [r7, #24]
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d1e5      	bne.n	800268c <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	2220      	movs	r2, #32
 80026c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	2220      	movs	r2, #32
 80026cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	2200      	movs	r2, #0
 80026d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80026d8:	2303      	movs	r3, #3
 80026da:	e00f      	b.n	80026fc <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	681a      	ldr	r2, [r3, #0]
 80026e2:	68bb      	ldr	r3, [r7, #8]
 80026e4:	401a      	ands	r2, r3
 80026e6:	68bb      	ldr	r3, [r7, #8]
 80026e8:	429a      	cmp	r2, r3
 80026ea:	bf0c      	ite	eq
 80026ec:	2301      	moveq	r3, #1
 80026ee:	2300      	movne	r3, #0
 80026f0:	b2db      	uxtb	r3, r3
 80026f2:	461a      	mov	r2, r3
 80026f4:	79fb      	ldrb	r3, [r7, #7]
 80026f6:	429a      	cmp	r2, r3
 80026f8:	d09f      	beq.n	800263a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80026fa:	2300      	movs	r3, #0
}
 80026fc:	4618      	mov	r0, r3
 80026fe:	3740      	adds	r7, #64	; 0x40
 8002700:	46bd      	mov	sp, r7
 8002702:	bd80      	pop	{r7, pc}

08002704 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002704:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002708:	b091      	sub	sp, #68	; 0x44
 800270a:	af00      	add	r7, sp, #0
 800270c:	6378      	str	r0, [r7, #52]	; 0x34
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800270e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002710:	6819      	ldr	r1, [r3, #0]
 8002712:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	691b      	ldr	r3, [r3, #16]
 8002718:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800271c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800271e:	68db      	ldr	r3, [r3, #12]
 8002720:	4313      	orrs	r3, r2
 8002722:	610b      	str	r3, [r1, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002724:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002726:	689a      	ldr	r2, [r3, #8]
 8002728:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800272a:	691b      	ldr	r3, [r3, #16]
 800272c:	431a      	orrs	r2, r3
 800272e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002730:	695b      	ldr	r3, [r3, #20]
 8002732:	431a      	orrs	r2, r3
 8002734:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002736:	69db      	ldr	r3, [r3, #28]
 8002738:	4313      	orrs	r3, r2
 800273a:	63bb      	str	r3, [r7, #56]	; 0x38
  MODIFY_REG(huart->Instance->CR1,
 800273c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800273e:	6819      	ldr	r1, [r3, #0]
 8002740:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	68db      	ldr	r3, [r3, #12]
 8002746:	f423 4216 	bic.w	r2, r3, #38400	; 0x9600
 800274a:	f022 020c 	bic.w	r2, r2, #12
 800274e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002750:	4313      	orrs	r3, r2
 8002752:	60cb      	str	r3, [r1, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002754:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002756:	6819      	ldr	r1, [r3, #0]
 8002758:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	695b      	ldr	r3, [r3, #20]
 800275e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002762:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002764:	699b      	ldr	r3, [r3, #24]
 8002766:	4313      	orrs	r3, r2
 8002768:	614b      	str	r3, [r1, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800276a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800276c:	681a      	ldr	r2, [r3, #0]
 800276e:	4bba      	ldr	r3, [pc, #744]	; (8002a58 <UART_SetConfig+0x354>)
 8002770:	429a      	cmp	r2, r3
 8002772:	d004      	beq.n	800277e <UART_SetConfig+0x7a>
 8002774:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002776:	681a      	ldr	r2, [r3, #0]
 8002778:	4bb8      	ldr	r3, [pc, #736]	; (8002a5c <UART_SetConfig+0x358>)
 800277a:	429a      	cmp	r2, r3
 800277c:	d103      	bne.n	8002786 <UART_SetConfig+0x82>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800277e:	f7fe febd 	bl	80014fc <HAL_RCC_GetPCLK2Freq>
 8002782:	63f8      	str	r0, [r7, #60]	; 0x3c
 8002784:	e002      	b.n	800278c <UART_SetConfig+0x88>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002786:	f7fe fea5 	bl	80014d4 <HAL_RCC_GetPCLK1Freq>
 800278a:	63f8      	str	r0, [r7, #60]	; 0x3c
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800278c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800278e:	69db      	ldr	r3, [r3, #28]
 8002790:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002794:	f040 80a7 	bne.w	80028e6 <UART_SetConfig+0x1e2>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002798:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800279a:	681a      	ldr	r2, [r3, #0]
 800279c:	62ba      	str	r2, [r7, #40]	; 0x28
 800279e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80027a0:	4619      	mov	r1, r3
 80027a2:	f04f 0200 	mov.w	r2, #0
 80027a6:	460b      	mov	r3, r1
 80027a8:	4614      	mov	r4, r2
 80027aa:	18db      	adds	r3, r3, r3
 80027ac:	eb44 0404 	adc.w	r4, r4, r4
 80027b0:	185b      	adds	r3, r3, r1
 80027b2:	eb44 0402 	adc.w	r4, r4, r2
 80027b6:	00e0      	lsls	r0, r4, #3
 80027b8:	6178      	str	r0, [r7, #20]
 80027ba:	6978      	ldr	r0, [r7, #20]
 80027bc:	ea40 7053 	orr.w	r0, r0, r3, lsr #29
 80027c0:	6178      	str	r0, [r7, #20]
 80027c2:	00db      	lsls	r3, r3, #3
 80027c4:	613b      	str	r3, [r7, #16]
 80027c6:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 80027ca:	185d      	adds	r5, r3, r1
 80027cc:	eb44 0602 	adc.w	r6, r4, r2
 80027d0:	4628      	mov	r0, r5
 80027d2:	4631      	mov	r1, r6
 80027d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80027d6:	685b      	ldr	r3, [r3, #4]
 80027d8:	f04f 0400 	mov.w	r4, #0
 80027dc:	18db      	adds	r3, r3, r3
 80027de:	eb44 0404 	adc.w	r4, r4, r4
 80027e2:	461a      	mov	r2, r3
 80027e4:	4623      	mov	r3, r4
 80027e6:	f7fd fd43 	bl	8000270 <__aeabi_uldivmod>
 80027ea:	4603      	mov	r3, r0
 80027ec:	460c      	mov	r4, r1
 80027ee:	461a      	mov	r2, r3
 80027f0:	4b9b      	ldr	r3, [pc, #620]	; (8002a60 <UART_SetConfig+0x35c>)
 80027f2:	fba3 2302 	umull	r2, r3, r3, r2
 80027f6:	095b      	lsrs	r3, r3, #5
 80027f8:	011e      	lsls	r6, r3, #4
 80027fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80027fc:	4619      	mov	r1, r3
 80027fe:	f04f 0200 	mov.w	r2, #0
 8002802:	460b      	mov	r3, r1
 8002804:	4614      	mov	r4, r2
 8002806:	18db      	adds	r3, r3, r3
 8002808:	eb44 0404 	adc.w	r4, r4, r4
 800280c:	185b      	adds	r3, r3, r1
 800280e:	eb44 0402 	adc.w	r4, r4, r2
 8002812:	ea4f 0bc4 	mov.w	fp, r4, lsl #3
 8002816:	ea4b 7b53 	orr.w	fp, fp, r3, lsr #29
 800281a:	ea4f 0ac3 	mov.w	sl, r3, lsl #3
 800281e:	4653      	mov	r3, sl
 8002820:	465c      	mov	r4, fp
 8002822:	eb13 0a01 	adds.w	sl, r3, r1
 8002826:	eb44 0b02 	adc.w	fp, r4, r2
 800282a:	4650      	mov	r0, sl
 800282c:	4659      	mov	r1, fp
 800282e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002830:	685b      	ldr	r3, [r3, #4]
 8002832:	f04f 0400 	mov.w	r4, #0
 8002836:	18db      	adds	r3, r3, r3
 8002838:	eb44 0404 	adc.w	r4, r4, r4
 800283c:	461a      	mov	r2, r3
 800283e:	4623      	mov	r3, r4
 8002840:	f7fd fd16 	bl	8000270 <__aeabi_uldivmod>
 8002844:	4603      	mov	r3, r0
 8002846:	460c      	mov	r4, r1
 8002848:	461a      	mov	r2, r3
 800284a:	4b85      	ldr	r3, [pc, #532]	; (8002a60 <UART_SetConfig+0x35c>)
 800284c:	fba3 1302 	umull	r1, r3, r3, r2
 8002850:	095b      	lsrs	r3, r3, #5
 8002852:	2164      	movs	r1, #100	; 0x64
 8002854:	fb01 f303 	mul.w	r3, r1, r3
 8002858:	1ad3      	subs	r3, r2, r3
 800285a:	00db      	lsls	r3, r3, #3
 800285c:	3332      	adds	r3, #50	; 0x32
 800285e:	4a80      	ldr	r2, [pc, #512]	; (8002a60 <UART_SetConfig+0x35c>)
 8002860:	fba2 2303 	umull	r2, r3, r2, r3
 8002864:	095b      	lsrs	r3, r3, #5
 8002866:	005b      	lsls	r3, r3, #1
 8002868:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800286c:	441e      	add	r6, r3
 800286e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002870:	4619      	mov	r1, r3
 8002872:	f04f 0200 	mov.w	r2, #0
 8002876:	460b      	mov	r3, r1
 8002878:	4614      	mov	r4, r2
 800287a:	18db      	adds	r3, r3, r3
 800287c:	eb44 0404 	adc.w	r4, r4, r4
 8002880:	185b      	adds	r3, r3, r1
 8002882:	eb44 0402 	adc.w	r4, r4, r2
 8002886:	ea4f 09c4 	mov.w	r9, r4, lsl #3
 800288a:	ea49 7953 	orr.w	r9, r9, r3, lsr #29
 800288e:	ea4f 08c3 	mov.w	r8, r3, lsl #3
 8002892:	4643      	mov	r3, r8
 8002894:	464c      	mov	r4, r9
 8002896:	eb13 0801 	adds.w	r8, r3, r1
 800289a:	eb44 0902 	adc.w	r9, r4, r2
 800289e:	4640      	mov	r0, r8
 80028a0:	4649      	mov	r1, r9
 80028a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80028a4:	685b      	ldr	r3, [r3, #4]
 80028a6:	f04f 0400 	mov.w	r4, #0
 80028aa:	18db      	adds	r3, r3, r3
 80028ac:	eb44 0404 	adc.w	r4, r4, r4
 80028b0:	461a      	mov	r2, r3
 80028b2:	4623      	mov	r3, r4
 80028b4:	f7fd fcdc 	bl	8000270 <__aeabi_uldivmod>
 80028b8:	4603      	mov	r3, r0
 80028ba:	460c      	mov	r4, r1
 80028bc:	461a      	mov	r2, r3
 80028be:	4b68      	ldr	r3, [pc, #416]	; (8002a60 <UART_SetConfig+0x35c>)
 80028c0:	fba3 1302 	umull	r1, r3, r3, r2
 80028c4:	095b      	lsrs	r3, r3, #5
 80028c6:	2164      	movs	r1, #100	; 0x64
 80028c8:	fb01 f303 	mul.w	r3, r1, r3
 80028cc:	1ad3      	subs	r3, r2, r3
 80028ce:	00db      	lsls	r3, r3, #3
 80028d0:	3332      	adds	r3, #50	; 0x32
 80028d2:	4a63      	ldr	r2, [pc, #396]	; (8002a60 <UART_SetConfig+0x35c>)
 80028d4:	fba2 2303 	umull	r2, r3, r2, r3
 80028d8:	095b      	lsrs	r3, r3, #5
 80028da:	f003 0307 	and.w	r3, r3, #7
 80028de:	4433      	add	r3, r6
 80028e0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80028e2:	6093      	str	r3, [r2, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80028e4:	e0b3      	b.n	8002a4e <UART_SetConfig+0x34a>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80028e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	613b      	str	r3, [r7, #16]
 80028ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80028ee:	4619      	mov	r1, r3
 80028f0:	f04f 0200 	mov.w	r2, #0
 80028f4:	460b      	mov	r3, r1
 80028f6:	4614      	mov	r4, r2
 80028f8:	18db      	adds	r3, r3, r3
 80028fa:	eb44 0404 	adc.w	r4, r4, r4
 80028fe:	185b      	adds	r3, r3, r1
 8002900:	eb44 0402 	adc.w	r4, r4, r2
 8002904:	00e6      	lsls	r6, r4, #3
 8002906:	ea46 7653 	orr.w	r6, r6, r3, lsr #29
 800290a:	00dd      	lsls	r5, r3, #3
 800290c:	462b      	mov	r3, r5
 800290e:	4634      	mov	r4, r6
 8002910:	185d      	adds	r5, r3, r1
 8002912:	eb44 0602 	adc.w	r6, r4, r2
 8002916:	4628      	mov	r0, r5
 8002918:	4631      	mov	r1, r6
 800291a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800291c:	685b      	ldr	r3, [r3, #4]
 800291e:	f04f 0400 	mov.w	r4, #0
 8002922:	00a5      	lsls	r5, r4, #2
 8002924:	62fd      	str	r5, [r7, #44]	; 0x2c
 8002926:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 8002928:	ea45 7593 	orr.w	r5, r5, r3, lsr #30
 800292c:	62fd      	str	r5, [r7, #44]	; 0x2c
 800292e:	009c      	lsls	r4, r3, #2
 8002930:	62bc      	str	r4, [r7, #40]	; 0x28
 8002932:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002936:	f7fd fc9b 	bl	8000270 <__aeabi_uldivmod>
 800293a:	4603      	mov	r3, r0
 800293c:	460c      	mov	r4, r1
 800293e:	461a      	mov	r2, r3
 8002940:	4b47      	ldr	r3, [pc, #284]	; (8002a60 <UART_SetConfig+0x35c>)
 8002942:	fba3 1302 	umull	r1, r3, r3, r2
 8002946:	095b      	lsrs	r3, r3, #5
 8002948:	011d      	lsls	r5, r3, #4
 800294a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800294c:	4619      	mov	r1, r3
 800294e:	f04f 0200 	mov.w	r2, #0
 8002952:	460b      	mov	r3, r1
 8002954:	4614      	mov	r4, r2
 8002956:	18db      	adds	r3, r3, r3
 8002958:	eb44 0404 	adc.w	r4, r4, r4
 800295c:	185b      	adds	r3, r3, r1
 800295e:	eb44 0402 	adc.w	r4, r4, r2
 8002962:	00e0      	lsls	r0, r4, #3
 8002964:	60f8      	str	r0, [r7, #12]
 8002966:	68f8      	ldr	r0, [r7, #12]
 8002968:	ea40 7053 	orr.w	r0, r0, r3, lsr #29
 800296c:	60f8      	str	r0, [r7, #12]
 800296e:	00d8      	lsls	r0, r3, #3
 8002970:	60b8      	str	r0, [r7, #8]
 8002972:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8002976:	eb13 0801 	adds.w	r8, r3, r1
 800297a:	eb44 0902 	adc.w	r9, r4, r2
 800297e:	4640      	mov	r0, r8
 8002980:	4649      	mov	r1, r9
 8002982:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002984:	685b      	ldr	r3, [r3, #4]
 8002986:	f04f 0400 	mov.w	r4, #0
 800298a:	00a6      	lsls	r6, r4, #2
 800298c:	627e      	str	r6, [r7, #36]	; 0x24
 800298e:	6a7e      	ldr	r6, [r7, #36]	; 0x24
 8002990:	ea46 7693 	orr.w	r6, r6, r3, lsr #30
 8002994:	627e      	str	r6, [r7, #36]	; 0x24
 8002996:	009c      	lsls	r4, r3, #2
 8002998:	623c      	str	r4, [r7, #32]
 800299a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800299e:	f7fd fc67 	bl	8000270 <__aeabi_uldivmod>
 80029a2:	4603      	mov	r3, r0
 80029a4:	460c      	mov	r4, r1
 80029a6:	461a      	mov	r2, r3
 80029a8:	4b2d      	ldr	r3, [pc, #180]	; (8002a60 <UART_SetConfig+0x35c>)
 80029aa:	fba3 1302 	umull	r1, r3, r3, r2
 80029ae:	095b      	lsrs	r3, r3, #5
 80029b0:	2164      	movs	r1, #100	; 0x64
 80029b2:	fb01 f303 	mul.w	r3, r1, r3
 80029b6:	1ad3      	subs	r3, r2, r3
 80029b8:	011b      	lsls	r3, r3, #4
 80029ba:	3332      	adds	r3, #50	; 0x32
 80029bc:	4a28      	ldr	r2, [pc, #160]	; (8002a60 <UART_SetConfig+0x35c>)
 80029be:	fba2 1303 	umull	r1, r3, r2, r3
 80029c2:	095b      	lsrs	r3, r3, #5
 80029c4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80029c8:	441d      	add	r5, r3
 80029ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80029cc:	4619      	mov	r1, r3
 80029ce:	f04f 0200 	mov.w	r2, #0
 80029d2:	460b      	mov	r3, r1
 80029d4:	4614      	mov	r4, r2
 80029d6:	18db      	adds	r3, r3, r3
 80029d8:	eb44 0404 	adc.w	r4, r4, r4
 80029dc:	185b      	adds	r3, r3, r1
 80029de:	eb44 0402 	adc.w	r4, r4, r2
 80029e2:	00e0      	lsls	r0, r4, #3
 80029e4:	6078      	str	r0, [r7, #4]
 80029e6:	6878      	ldr	r0, [r7, #4]
 80029e8:	ea40 7053 	orr.w	r0, r0, r3, lsr #29
 80029ec:	6078      	str	r0, [r7, #4]
 80029ee:	00d8      	lsls	r0, r3, #3
 80029f0:	6038      	str	r0, [r7, #0]
 80029f2:	e897 0018 	ldmia.w	r7, {r3, r4}
 80029f6:	eb13 0801 	adds.w	r8, r3, r1
 80029fa:	eb44 0902 	adc.w	r9, r4, r2
 80029fe:	4640      	mov	r0, r8
 8002a00:	4649      	mov	r1, r9
 8002a02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a04:	685b      	ldr	r3, [r3, #4]
 8002a06:	f04f 0400 	mov.w	r4, #0
 8002a0a:	00a6      	lsls	r6, r4, #2
 8002a0c:	61fe      	str	r6, [r7, #28]
 8002a0e:	69fe      	ldr	r6, [r7, #28]
 8002a10:	ea46 7693 	orr.w	r6, r6, r3, lsr #30
 8002a14:	61fe      	str	r6, [r7, #28]
 8002a16:	009c      	lsls	r4, r3, #2
 8002a18:	61bc      	str	r4, [r7, #24]
 8002a1a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002a1e:	f7fd fc27 	bl	8000270 <__aeabi_uldivmod>
 8002a22:	4603      	mov	r3, r0
 8002a24:	460c      	mov	r4, r1
 8002a26:	461a      	mov	r2, r3
 8002a28:	4b0d      	ldr	r3, [pc, #52]	; (8002a60 <UART_SetConfig+0x35c>)
 8002a2a:	fba3 1302 	umull	r1, r3, r3, r2
 8002a2e:	095b      	lsrs	r3, r3, #5
 8002a30:	2164      	movs	r1, #100	; 0x64
 8002a32:	fb01 f303 	mul.w	r3, r1, r3
 8002a36:	1ad3      	subs	r3, r2, r3
 8002a38:	011b      	lsls	r3, r3, #4
 8002a3a:	3332      	adds	r3, #50	; 0x32
 8002a3c:	4a08      	ldr	r2, [pc, #32]	; (8002a60 <UART_SetConfig+0x35c>)
 8002a3e:	fba2 1303 	umull	r1, r3, r2, r3
 8002a42:	095b      	lsrs	r3, r3, #5
 8002a44:	f003 030f 	and.w	r3, r3, #15
 8002a48:	442b      	add	r3, r5
 8002a4a:	693a      	ldr	r2, [r7, #16]
 8002a4c:	6093      	str	r3, [r2, #8]
}
 8002a4e:	bf00      	nop
 8002a50:	3744      	adds	r7, #68	; 0x44
 8002a52:	46bd      	mov	sp, r7
 8002a54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002a58:	40011000 	.word	0x40011000
 8002a5c:	40011400 	.word	0x40011400
 8002a60:	51eb851f 	.word	0x51eb851f

08002a64 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002a64:	b580      	push	{r7, lr}
 8002a66:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002a68:	f7fd fd8a 	bl	8000580 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002a6c:	f000 f866 	bl	8002b3c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002a70:	f000 f9da 	bl	8002e28 <MX_GPIO_Init>
  MX_SPI1_Init();
 8002a74:	f000 f8cc 	bl	8002c10 <MX_SPI1_Init>
  MX_TIM2_Init();
 8002a78:	f000 f936 	bl	8002ce8 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 8002a7c:	f000 f9aa 	bl	8002dd4 <MX_USART2_UART_Init>
  MX_SPI2_Init();
 8002a80:	f000 f8fc 	bl	8002c7c <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */
  RetargetInit(&huart2);
 8002a84:	4821      	ldr	r0, [pc, #132]	; (8002b0c <main+0xa8>)
 8002a86:	f000 fae9 	bl	800305c <RetargetInit>
  printf("Starting at 0%% duty cycle by default\r\n");
 8002a8a:	4821      	ldr	r0, [pc, #132]	; (8002b10 <main+0xac>)
 8002a8c:	f000 fdc6 	bl	800361c <iprintf>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8002a90:	2100      	movs	r1, #0
 8002a92:	4820      	ldr	r0, [pc, #128]	; (8002b14 <main+0xb0>)
 8002a94:	f7fe fe76 	bl	8001784 <HAL_TIM_PWM_Start>
  TIM2->CCR1 = DutyCycle;
 8002a98:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002a9c:	4a1e      	ldr	r2, [pc, #120]	; (8002b18 <main+0xb4>)
 8002a9e:	6812      	ldr	r2, [r2, #0]
 8002aa0:	635a      	str	r2, [r3, #52]	; 0x34
		  }
	  }

	/** TRIAC Control code STARTS **/
#else
	if(f_ChangePWM){
 8002aa2:	4b1e      	ldr	r3, [pc, #120]	; (8002b1c <main+0xb8>)
 8002aa4:	781b      	ldrb	r3, [r3, #0]
 8002aa6:	b2db      	uxtb	r3, r3
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d021      	beq.n	8002af0 <main+0x8c>
		//Handling PWM change on USR button press
		f_ChangePWM = false;
 8002aac:	4b1b      	ldr	r3, [pc, #108]	; (8002b1c <main+0xb8>)
 8002aae:	2200      	movs	r2, #0
 8002ab0:	701a      	strb	r2, [r3, #0]
		printf("Enter New Duty Cycle\r\n");
 8002ab2:	481b      	ldr	r0, [pc, #108]	; (8002b20 <main+0xbc>)
 8002ab4:	f000 fe26 	bl	8003704 <puts>
		while(1){
			scanf("%d", &DutyCycle);
 8002ab8:	4917      	ldr	r1, [pc, #92]	; (8002b18 <main+0xb4>)
 8002aba:	481a      	ldr	r0, [pc, #104]	; (8002b24 <main+0xc0>)
 8002abc:	f000 fe2a 	bl	8003714 <iscanf>
			if((DutyCycle >= 0) && (DutyCycle <= 100)){
 8002ac0:	4b15      	ldr	r3, [pc, #84]	; (8002b18 <main+0xb4>)
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	db0f      	blt.n	8002ae8 <main+0x84>
 8002ac8:	4b13      	ldr	r3, [pc, #76]	; (8002b18 <main+0xb4>)
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	2b64      	cmp	r3, #100	; 0x64
 8002ace:	dc0b      	bgt.n	8002ae8 <main+0x84>
				set_dutycycle = DutyCycle;
 8002ad0:	4b11      	ldr	r3, [pc, #68]	; (8002b18 <main+0xb4>)
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	b2da      	uxtb	r2, r3
 8002ad6:	4b14      	ldr	r3, [pc, #80]	; (8002b28 <main+0xc4>)
 8002ad8:	701a      	strb	r2, [r3, #0]
				printf("%d\r\n", DutyCycle);
 8002ada:	4b0f      	ldr	r3, [pc, #60]	; (8002b18 <main+0xb4>)
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	4619      	mov	r1, r3
 8002ae0:	4812      	ldr	r0, [pc, #72]	; (8002b2c <main+0xc8>)
 8002ae2:	f000 fd9b 	bl	800361c <iprintf>
				break;
 8002ae6:	e003      	b.n	8002af0 <main+0x8c>
			}
			else{
				printf("Enter Duty Cycle value between 0 to 100. \r\n Try Again\r\n");
 8002ae8:	4811      	ldr	r0, [pc, #68]	; (8002b30 <main+0xcc>)
 8002aea:	f000 fe0b 	bl	8003704 <puts>
			scanf("%d", &DutyCycle);
 8002aee:	e7e3      	b.n	8002ab8 <main+0x54>
			}
		}
	}
#endif
	if(f_StartPWM){										//ZCD interrupt handling
 8002af0:	4b10      	ldr	r3, [pc, #64]	; (8002b34 <main+0xd0>)
 8002af2:	781b      	ldrb	r3, [r3, #0]
 8002af4:	b2db      	uxtb	r3, r3
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d0d3      	beq.n	8002aa2 <main+0x3e>
		f_StartPWM = false;
 8002afa:	4b0e      	ldr	r3, [pc, #56]	; (8002b34 <main+0xd0>)
 8002afc:	2200      	movs	r2, #0
 8002afe:	701a      	strb	r2, [r3, #0]
		//Code to start PWM based on Received input value
//    	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
//    	TIM2->CCR1 = DutyCycle;
		HAL_GPIO_TogglePin(GPIOD, LD3_Pin);
 8002b00:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002b04:	480c      	ldr	r0, [pc, #48]	; (8002b38 <main+0xd4>)
 8002b06:	f7fe f870 	bl	8000bea <HAL_GPIO_TogglePin>
	if(f_ChangePWM){
 8002b0a:	e7ca      	b.n	8002aa2 <main+0x3e>
 8002b0c:	20000314 	.word	0x20000314
 8002b10:	08005290 	.word	0x08005290
 8002b14:	200002cc 	.word	0x200002cc
 8002b18:	200001fc 	.word	0x200001fc
 8002b1c:	200001f9 	.word	0x200001f9
 8002b20:	080052b8 	.word	0x080052b8
 8002b24:	080052d0 	.word	0x080052d0
 8002b28:	20000200 	.word	0x20000200
 8002b2c:	080052d4 	.word	0x080052d4
 8002b30:	080052dc 	.word	0x080052dc
 8002b34:	200001f8 	.word	0x200001f8
 8002b38:	40020c00 	.word	0x40020c00

08002b3c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	b094      	sub	sp, #80	; 0x50
 8002b40:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002b42:	f107 0320 	add.w	r3, r7, #32
 8002b46:	2230      	movs	r2, #48	; 0x30
 8002b48:	2100      	movs	r1, #0
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	f000 fd5d 	bl	800360a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002b50:	f107 030c 	add.w	r3, r7, #12
 8002b54:	2200      	movs	r2, #0
 8002b56:	601a      	str	r2, [r3, #0]
 8002b58:	605a      	str	r2, [r3, #4]
 8002b5a:	609a      	str	r2, [r3, #8]
 8002b5c:	60da      	str	r2, [r3, #12]
 8002b5e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002b60:	2300      	movs	r3, #0
 8002b62:	60bb      	str	r3, [r7, #8]
 8002b64:	4a28      	ldr	r2, [pc, #160]	; (8002c08 <SystemClock_Config+0xcc>)
 8002b66:	4b28      	ldr	r3, [pc, #160]	; (8002c08 <SystemClock_Config+0xcc>)
 8002b68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b6a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b6e:	6413      	str	r3, [r2, #64]	; 0x40
 8002b70:	4b25      	ldr	r3, [pc, #148]	; (8002c08 <SystemClock_Config+0xcc>)
 8002b72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b74:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b78:	60bb      	str	r3, [r7, #8]
 8002b7a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002b7c:	2300      	movs	r3, #0
 8002b7e:	607b      	str	r3, [r7, #4]
 8002b80:	4a22      	ldr	r2, [pc, #136]	; (8002c0c <SystemClock_Config+0xd0>)
 8002b82:	4b22      	ldr	r3, [pc, #136]	; (8002c0c <SystemClock_Config+0xd0>)
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002b8a:	6013      	str	r3, [r2, #0]
 8002b8c:	4b1f      	ldr	r3, [pc, #124]	; (8002c0c <SystemClock_Config+0xd0>)
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b94:	607b      	str	r3, [r7, #4]
 8002b96:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002b98:	2301      	movs	r3, #1
 8002b9a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002b9c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002ba0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002ba2:	2302      	movs	r3, #2
 8002ba4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002ba6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002baa:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002bac:	2308      	movs	r3, #8
 8002bae:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8002bb0:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8002bb4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002bb6:	2302      	movs	r3, #2
 8002bb8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8002bba:	2307      	movs	r3, #7
 8002bbc:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002bbe:	f107 0320 	add.w	r3, r7, #32
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	f7fe f844 	bl	8000c50 <HAL_RCC_OscConfig>
 8002bc8:	4603      	mov	r3, r0
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d001      	beq.n	8002bd2 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8002bce:	f000 fa41 	bl	8003054 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002bd2:	230f      	movs	r3, #15
 8002bd4:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002bd6:	2302      	movs	r3, #2
 8002bd8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002bda:	2300      	movs	r3, #0
 8002bdc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002bde:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002be2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002be4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002be8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002bea:	f107 030c 	add.w	r3, r7, #12
 8002bee:	2105      	movs	r1, #5
 8002bf0:	4618      	mov	r0, r3
 8002bf2:	f7fe faa5 	bl	8001140 <HAL_RCC_ClockConfig>
 8002bf6:	4603      	mov	r3, r0
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d001      	beq.n	8002c00 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8002bfc:	f000 fa2a 	bl	8003054 <Error_Handler>
  }
}
 8002c00:	bf00      	nop
 8002c02:	3750      	adds	r7, #80	; 0x50
 8002c04:	46bd      	mov	sp, r7
 8002c06:	bd80      	pop	{r7, pc}
 8002c08:	40023800 	.word	0x40023800
 8002c0c:	40007000 	.word	0x40007000

08002c10 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002c10:	b580      	push	{r7, lr}
 8002c12:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002c14:	4b17      	ldr	r3, [pc, #92]	; (8002c74 <MX_SPI1_Init+0x64>)
 8002c16:	4a18      	ldr	r2, [pc, #96]	; (8002c78 <MX_SPI1_Init+0x68>)
 8002c18:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002c1a:	4b16      	ldr	r3, [pc, #88]	; (8002c74 <MX_SPI1_Init+0x64>)
 8002c1c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002c20:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002c22:	4b14      	ldr	r3, [pc, #80]	; (8002c74 <MX_SPI1_Init+0x64>)
 8002c24:	2200      	movs	r2, #0
 8002c26:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002c28:	4b12      	ldr	r3, [pc, #72]	; (8002c74 <MX_SPI1_Init+0x64>)
 8002c2a:	2200      	movs	r2, #0
 8002c2c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002c2e:	4b11      	ldr	r3, [pc, #68]	; (8002c74 <MX_SPI1_Init+0x64>)
 8002c30:	2200      	movs	r2, #0
 8002c32:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002c34:	4b0f      	ldr	r3, [pc, #60]	; (8002c74 <MX_SPI1_Init+0x64>)
 8002c36:	2200      	movs	r2, #0
 8002c38:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002c3a:	4b0e      	ldr	r3, [pc, #56]	; (8002c74 <MX_SPI1_Init+0x64>)
 8002c3c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002c40:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8002c42:	4b0c      	ldr	r3, [pc, #48]	; (8002c74 <MX_SPI1_Init+0x64>)
 8002c44:	2208      	movs	r2, #8
 8002c46:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002c48:	4b0a      	ldr	r3, [pc, #40]	; (8002c74 <MX_SPI1_Init+0x64>)
 8002c4a:	2200      	movs	r2, #0
 8002c4c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002c4e:	4b09      	ldr	r3, [pc, #36]	; (8002c74 <MX_SPI1_Init+0x64>)
 8002c50:	2200      	movs	r2, #0
 8002c52:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002c54:	4b07      	ldr	r3, [pc, #28]	; (8002c74 <MX_SPI1_Init+0x64>)
 8002c56:	2200      	movs	r2, #0
 8002c58:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002c5a:	4b06      	ldr	r3, [pc, #24]	; (8002c74 <MX_SPI1_Init+0x64>)
 8002c5c:	220a      	movs	r2, #10
 8002c5e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002c60:	4804      	ldr	r0, [pc, #16]	; (8002c74 <MX_SPI1_Init+0x64>)
 8002c62:	f7fe fc5f 	bl	8001524 <HAL_SPI_Init>
 8002c66:	4603      	mov	r3, r0
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d001      	beq.n	8002c70 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8002c6c:	f000 f9f2 	bl	8003054 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002c70:	bf00      	nop
 8002c72:	bd80      	pop	{r7, pc}
 8002c74:	20000274 	.word	0x20000274
 8002c78:	40013000 	.word	0x40013000

08002c7c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8002c7c:	b580      	push	{r7, lr}
 8002c7e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8002c80:	4b17      	ldr	r3, [pc, #92]	; (8002ce0 <MX_SPI2_Init+0x64>)
 8002c82:	4a18      	ldr	r2, [pc, #96]	; (8002ce4 <MX_SPI2_Init+0x68>)
 8002c84:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8002c86:	4b16      	ldr	r3, [pc, #88]	; (8002ce0 <MX_SPI2_Init+0x64>)
 8002c88:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002c8c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8002c8e:	4b14      	ldr	r3, [pc, #80]	; (8002ce0 <MX_SPI2_Init+0x64>)
 8002c90:	2200      	movs	r2, #0
 8002c92:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8002c94:	4b12      	ldr	r3, [pc, #72]	; (8002ce0 <MX_SPI2_Init+0x64>)
 8002c96:	2200      	movs	r2, #0
 8002c98:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002c9a:	4b11      	ldr	r3, [pc, #68]	; (8002ce0 <MX_SPI2_Init+0x64>)
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002ca0:	4b0f      	ldr	r3, [pc, #60]	; (8002ce0 <MX_SPI2_Init+0x64>)
 8002ca2:	2200      	movs	r2, #0
 8002ca4:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8002ca6:	4b0e      	ldr	r3, [pc, #56]	; (8002ce0 <MX_SPI2_Init+0x64>)
 8002ca8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002cac:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8002cae:	4b0c      	ldr	r3, [pc, #48]	; (8002ce0 <MX_SPI2_Init+0x64>)
 8002cb0:	2238      	movs	r2, #56	; 0x38
 8002cb2:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002cb4:	4b0a      	ldr	r3, [pc, #40]	; (8002ce0 <MX_SPI2_Init+0x64>)
 8002cb6:	2200      	movs	r2, #0
 8002cb8:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8002cba:	4b09      	ldr	r3, [pc, #36]	; (8002ce0 <MX_SPI2_Init+0x64>)
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002cc0:	4b07      	ldr	r3, [pc, #28]	; (8002ce0 <MX_SPI2_Init+0x64>)
 8002cc2:	2200      	movs	r2, #0
 8002cc4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8002cc6:	4b06      	ldr	r3, [pc, #24]	; (8002ce0 <MX_SPI2_Init+0x64>)
 8002cc8:	220a      	movs	r2, #10
 8002cca:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002ccc:	4804      	ldr	r0, [pc, #16]	; (8002ce0 <MX_SPI2_Init+0x64>)
 8002cce:	f7fe fc29 	bl	8001524 <HAL_SPI_Init>
 8002cd2:	4603      	mov	r3, r0
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d001      	beq.n	8002cdc <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8002cd8:	f000 f9bc 	bl	8003054 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8002cdc:	bf00      	nop
 8002cde:	bd80      	pop	{r7, pc}
 8002ce0:	20000214 	.word	0x20000214
 8002ce4:	40003800 	.word	0x40003800

08002ce8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002ce8:	b580      	push	{r7, lr}
 8002cea:	b08e      	sub	sp, #56	; 0x38
 8002cec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002cee:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002cf2:	2200      	movs	r2, #0
 8002cf4:	601a      	str	r2, [r3, #0]
 8002cf6:	605a      	str	r2, [r3, #4]
 8002cf8:	609a      	str	r2, [r3, #8]
 8002cfa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002cfc:	f107 0320 	add.w	r3, r7, #32
 8002d00:	2200      	movs	r2, #0
 8002d02:	601a      	str	r2, [r3, #0]
 8002d04:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002d06:	1d3b      	adds	r3, r7, #4
 8002d08:	2200      	movs	r2, #0
 8002d0a:	601a      	str	r2, [r3, #0]
 8002d0c:	605a      	str	r2, [r3, #4]
 8002d0e:	609a      	str	r2, [r3, #8]
 8002d10:	60da      	str	r2, [r3, #12]
 8002d12:	611a      	str	r2, [r3, #16]
 8002d14:	615a      	str	r2, [r3, #20]
 8002d16:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002d18:	4b2d      	ldr	r3, [pc, #180]	; (8002dd0 <MX_TIM2_Init+0xe8>)
 8002d1a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002d1e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 14000;
 8002d20:	4b2b      	ldr	r3, [pc, #172]	; (8002dd0 <MX_TIM2_Init+0xe8>)
 8002d22:	f243 62b0 	movw	r2, #14000	; 0x36b0
 8002d26:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002d28:	4b29      	ldr	r3, [pc, #164]	; (8002dd0 <MX_TIM2_Init+0xe8>)
 8002d2a:	2200      	movs	r2, #0
 8002d2c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100;
 8002d2e:	4b28      	ldr	r3, [pc, #160]	; (8002dd0 <MX_TIM2_Init+0xe8>)
 8002d30:	2264      	movs	r2, #100	; 0x64
 8002d32:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002d34:	4b26      	ldr	r3, [pc, #152]	; (8002dd0 <MX_TIM2_Init+0xe8>)
 8002d36:	2200      	movs	r2, #0
 8002d38:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002d3a:	4b25      	ldr	r3, [pc, #148]	; (8002dd0 <MX_TIM2_Init+0xe8>)
 8002d3c:	2200      	movs	r2, #0
 8002d3e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002d40:	4823      	ldr	r0, [pc, #140]	; (8002dd0 <MX_TIM2_Init+0xe8>)
 8002d42:	f7fe fc77 	bl	8001634 <HAL_TIM_Base_Init>
 8002d46:	4603      	mov	r3, r0
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d001      	beq.n	8002d50 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8002d4c:	f000 f982 	bl	8003054 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002d50:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002d54:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002d56:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002d5a:	4619      	mov	r1, r3
 8002d5c:	481c      	ldr	r0, [pc, #112]	; (8002dd0 <MX_TIM2_Init+0xe8>)
 8002d5e:	f7fe fe9b 	bl	8001a98 <HAL_TIM_ConfigClockSource>
 8002d62:	4603      	mov	r3, r0
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d001      	beq.n	8002d6c <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8002d68:	f000 f974 	bl	8003054 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8002d6c:	4818      	ldr	r0, [pc, #96]	; (8002dd0 <MX_TIM2_Init+0xe8>)
 8002d6e:	f7fe fcb0 	bl	80016d2 <HAL_TIM_PWM_Init>
 8002d72:	4603      	mov	r3, r0
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d001      	beq.n	8002d7c <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8002d78:	f000 f96c 	bl	8003054 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002d7c:	2300      	movs	r3, #0
 8002d7e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002d80:	2300      	movs	r3, #0
 8002d82:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002d84:	f107 0320 	add.w	r3, r7, #32
 8002d88:	4619      	mov	r1, r3
 8002d8a:	4811      	ldr	r0, [pc, #68]	; (8002dd0 <MX_TIM2_Init+0xe8>)
 8002d8c:	f7ff fa50 	bl	8002230 <HAL_TIMEx_MasterConfigSynchronization>
 8002d90:	4603      	mov	r3, r0
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d001      	beq.n	8002d9a <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8002d96:	f000 f95d 	bl	8003054 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002d9a:	2360      	movs	r3, #96	; 0x60
 8002d9c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002d9e:	2300      	movs	r3, #0
 8002da0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002da2:	2300      	movs	r3, #0
 8002da4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002da6:	2300      	movs	r3, #0
 8002da8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002daa:	1d3b      	adds	r3, r7, #4
 8002dac:	2200      	movs	r2, #0
 8002dae:	4619      	mov	r1, r3
 8002db0:	4807      	ldr	r0, [pc, #28]	; (8002dd0 <MX_TIM2_Init+0xe8>)
 8002db2:	f7fe fdaf 	bl	8001914 <HAL_TIM_PWM_ConfigChannel>
 8002db6:	4603      	mov	r3, r0
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d001      	beq.n	8002dc0 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8002dbc:	f000 f94a 	bl	8003054 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8002dc0:	4803      	ldr	r0, [pc, #12]	; (8002dd0 <MX_TIM2_Init+0xe8>)
 8002dc2:	f000 faf7 	bl	80033b4 <HAL_TIM_MspPostInit>

}
 8002dc6:	bf00      	nop
 8002dc8:	3738      	adds	r7, #56	; 0x38
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	bd80      	pop	{r7, pc}
 8002dce:	bf00      	nop
 8002dd0:	200002cc 	.word	0x200002cc

08002dd4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002dd4:	b580      	push	{r7, lr}
 8002dd6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002dd8:	4b11      	ldr	r3, [pc, #68]	; (8002e20 <MX_USART2_UART_Init+0x4c>)
 8002dda:	4a12      	ldr	r2, [pc, #72]	; (8002e24 <MX_USART2_UART_Init+0x50>)
 8002ddc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002dde:	4b10      	ldr	r3, [pc, #64]	; (8002e20 <MX_USART2_UART_Init+0x4c>)
 8002de0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002de4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002de6:	4b0e      	ldr	r3, [pc, #56]	; (8002e20 <MX_USART2_UART_Init+0x4c>)
 8002de8:	2200      	movs	r2, #0
 8002dea:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002dec:	4b0c      	ldr	r3, [pc, #48]	; (8002e20 <MX_USART2_UART_Init+0x4c>)
 8002dee:	2200      	movs	r2, #0
 8002df0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002df2:	4b0b      	ldr	r3, [pc, #44]	; (8002e20 <MX_USART2_UART_Init+0x4c>)
 8002df4:	2200      	movs	r2, #0
 8002df6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002df8:	4b09      	ldr	r3, [pc, #36]	; (8002e20 <MX_USART2_UART_Init+0x4c>)
 8002dfa:	220c      	movs	r2, #12
 8002dfc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002dfe:	4b08      	ldr	r3, [pc, #32]	; (8002e20 <MX_USART2_UART_Init+0x4c>)
 8002e00:	2200      	movs	r2, #0
 8002e02:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002e04:	4b06      	ldr	r3, [pc, #24]	; (8002e20 <MX_USART2_UART_Init+0x4c>)
 8002e06:	2200      	movs	r2, #0
 8002e08:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002e0a:	4805      	ldr	r0, [pc, #20]	; (8002e20 <MX_USART2_UART_Init+0x4c>)
 8002e0c:	f7ff fa8c 	bl	8002328 <HAL_UART_Init>
 8002e10:	4603      	mov	r3, r0
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d001      	beq.n	8002e1a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002e16:	f000 f91d 	bl	8003054 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002e1a:	bf00      	nop
 8002e1c:	bd80      	pop	{r7, pc}
 8002e1e:	bf00      	nop
 8002e20:	20000314 	.word	0x20000314
 8002e24:	40004400 	.word	0x40004400

08002e28 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002e28:	b580      	push	{r7, lr}
 8002e2a:	b08c      	sub	sp, #48	; 0x30
 8002e2c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e2e:	f107 031c 	add.w	r3, r7, #28
 8002e32:	2200      	movs	r2, #0
 8002e34:	601a      	str	r2, [r3, #0]
 8002e36:	605a      	str	r2, [r3, #4]
 8002e38:	609a      	str	r2, [r3, #8]
 8002e3a:	60da      	str	r2, [r3, #12]
 8002e3c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002e3e:	2300      	movs	r3, #0
 8002e40:	61bb      	str	r3, [r7, #24]
 8002e42:	4a67      	ldr	r2, [pc, #412]	; (8002fe0 <MX_GPIO_Init+0x1b8>)
 8002e44:	4b66      	ldr	r3, [pc, #408]	; (8002fe0 <MX_GPIO_Init+0x1b8>)
 8002e46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e48:	f043 0310 	orr.w	r3, r3, #16
 8002e4c:	6313      	str	r3, [r2, #48]	; 0x30
 8002e4e:	4b64      	ldr	r3, [pc, #400]	; (8002fe0 <MX_GPIO_Init+0x1b8>)
 8002e50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e52:	f003 0310 	and.w	r3, r3, #16
 8002e56:	61bb      	str	r3, [r7, #24]
 8002e58:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002e5a:	2300      	movs	r3, #0
 8002e5c:	617b      	str	r3, [r7, #20]
 8002e5e:	4a60      	ldr	r2, [pc, #384]	; (8002fe0 <MX_GPIO_Init+0x1b8>)
 8002e60:	4b5f      	ldr	r3, [pc, #380]	; (8002fe0 <MX_GPIO_Init+0x1b8>)
 8002e62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e64:	f043 0304 	orr.w	r3, r3, #4
 8002e68:	6313      	str	r3, [r2, #48]	; 0x30
 8002e6a:	4b5d      	ldr	r3, [pc, #372]	; (8002fe0 <MX_GPIO_Init+0x1b8>)
 8002e6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e6e:	f003 0304 	and.w	r3, r3, #4
 8002e72:	617b      	str	r3, [r7, #20]
 8002e74:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002e76:	2300      	movs	r3, #0
 8002e78:	613b      	str	r3, [r7, #16]
 8002e7a:	4a59      	ldr	r2, [pc, #356]	; (8002fe0 <MX_GPIO_Init+0x1b8>)
 8002e7c:	4b58      	ldr	r3, [pc, #352]	; (8002fe0 <MX_GPIO_Init+0x1b8>)
 8002e7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e80:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002e84:	6313      	str	r3, [r2, #48]	; 0x30
 8002e86:	4b56      	ldr	r3, [pc, #344]	; (8002fe0 <MX_GPIO_Init+0x1b8>)
 8002e88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e8e:	613b      	str	r3, [r7, #16]
 8002e90:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e92:	2300      	movs	r3, #0
 8002e94:	60fb      	str	r3, [r7, #12]
 8002e96:	4a52      	ldr	r2, [pc, #328]	; (8002fe0 <MX_GPIO_Init+0x1b8>)
 8002e98:	4b51      	ldr	r3, [pc, #324]	; (8002fe0 <MX_GPIO_Init+0x1b8>)
 8002e9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e9c:	f043 0301 	orr.w	r3, r3, #1
 8002ea0:	6313      	str	r3, [r2, #48]	; 0x30
 8002ea2:	4b4f      	ldr	r3, [pc, #316]	; (8002fe0 <MX_GPIO_Init+0x1b8>)
 8002ea4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ea6:	f003 0301 	and.w	r3, r3, #1
 8002eaa:	60fb      	str	r3, [r7, #12]
 8002eac:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002eae:	2300      	movs	r3, #0
 8002eb0:	60bb      	str	r3, [r7, #8]
 8002eb2:	4a4b      	ldr	r2, [pc, #300]	; (8002fe0 <MX_GPIO_Init+0x1b8>)
 8002eb4:	4b4a      	ldr	r3, [pc, #296]	; (8002fe0 <MX_GPIO_Init+0x1b8>)
 8002eb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eb8:	f043 0302 	orr.w	r3, r3, #2
 8002ebc:	6313      	str	r3, [r2, #48]	; 0x30
 8002ebe:	4b48      	ldr	r3, [pc, #288]	; (8002fe0 <MX_GPIO_Init+0x1b8>)
 8002ec0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ec2:	f003 0302 	and.w	r3, r3, #2
 8002ec6:	60bb      	str	r3, [r7, #8]
 8002ec8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002eca:	2300      	movs	r3, #0
 8002ecc:	607b      	str	r3, [r7, #4]
 8002ece:	4a44      	ldr	r2, [pc, #272]	; (8002fe0 <MX_GPIO_Init+0x1b8>)
 8002ed0:	4b43      	ldr	r3, [pc, #268]	; (8002fe0 <MX_GPIO_Init+0x1b8>)
 8002ed2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ed4:	f043 0308 	orr.w	r3, r3, #8
 8002ed8:	6313      	str	r3, [r2, #48]	; 0x30
 8002eda:	4b41      	ldr	r3, [pc, #260]	; (8002fe0 <MX_GPIO_Init+0x1b8>)
 8002edc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ede:	f003 0308 	and.w	r3, r3, #8
 8002ee2:	607b      	str	r3, [r7, #4]
 8002ee4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8002ee6:	2200      	movs	r2, #0
 8002ee8:	2108      	movs	r1, #8
 8002eea:	483e      	ldr	r0, [pc, #248]	; (8002fe4 <MX_GPIO_Init+0x1bc>)
 8002eec:	f7fd fe64 	bl	8000bb8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TS_CS_GPIO_Port, TS_CS_Pin, GPIO_PIN_RESET);
 8002ef0:	2200      	movs	r2, #0
 8002ef2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002ef6:	483c      	ldr	r0, [pc, #240]	; (8002fe8 <MX_GPIO_Init+0x1c0>)
 8002ef8:	f7fd fe5e 	bl	8000bb8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LCD_CS_Pin|LCD_RESET_Pin|LCD_DC_Pin|LD4_Pin
 8002efc:	2200      	movs	r2, #0
 8002efe:	f44f 4177 	mov.w	r1, #63232	; 0xf700
 8002f02:	483a      	ldr	r0, [pc, #232]	; (8002fec <MX_GPIO_Init+0x1c4>)
 8002f04:	f7fd fe58 	bl	8000bb8 <HAL_GPIO_WritePin>
                          |LD3_Pin|LD5_Pin|LD6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8002f08:	2308      	movs	r3, #8
 8002f0a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002f0c:	2301      	movs	r3, #1
 8002f0e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f10:	2300      	movs	r3, #0
 8002f12:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f14:	2300      	movs	r3, #0
 8002f16:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8002f18:	f107 031c 	add.w	r3, r7, #28
 8002f1c:	4619      	mov	r1, r3
 8002f1e:	4831      	ldr	r0, [pc, #196]	; (8002fe4 <MX_GPIO_Init+0x1bc>)
 8002f20:	f7fd fcb0 	bl	8000884 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002f24:	2301      	movs	r3, #1
 8002f26:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002f28:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002f2c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002f2e:	2302      	movs	r3, #2
 8002f30:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002f32:	f107 031c 	add.w	r3, r7, #28
 8002f36:	4619      	mov	r1, r3
 8002f38:	482d      	ldr	r0, [pc, #180]	; (8002ff0 <MX_GPIO_Init+0x1c8>)
 8002f3a:	f7fd fca3 	bl	8000884 <HAL_GPIO_Init>

  /*Configure GPIO pin : TS_CS_Pin */
  GPIO_InitStruct.Pin = TS_CS_Pin;
 8002f3e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002f42:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002f44:	2301      	movs	r3, #1
 8002f46:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f48:	2300      	movs	r3, #0
 8002f4a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f4c:	2300      	movs	r3, #0
 8002f4e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(TS_CS_GPIO_Port, &GPIO_InitStruct);
 8002f50:	f107 031c 	add.w	r3, r7, #28
 8002f54:	4619      	mov	r1, r3
 8002f56:	4824      	ldr	r0, [pc, #144]	; (8002fe8 <MX_GPIO_Init+0x1c0>)
 8002f58:	f7fd fc94 	bl	8000884 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_CS_Pin LCD_RESET_Pin LCD_DC_Pin LD4_Pin
                           LD3_Pin LD5_Pin LD6_Pin */
  GPIO_InitStruct.Pin = LCD_CS_Pin|LCD_RESET_Pin|LCD_DC_Pin|LD4_Pin
 8002f5c:	f44f 4377 	mov.w	r3, #63232	; 0xf700
 8002f60:	61fb      	str	r3, [r7, #28]
                          |LD3_Pin|LD5_Pin|LD6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002f62:	2301      	movs	r3, #1
 8002f64:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f66:	2300      	movs	r3, #0
 8002f68:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f6a:	2300      	movs	r3, #0
 8002f6c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002f6e:	f107 031c 	add.w	r3, r7, #28
 8002f72:	4619      	mov	r1, r3
 8002f74:	481d      	ldr	r0, [pc, #116]	; (8002fec <MX_GPIO_Init+0x1c4>)
 8002f76:	f7fd fc85 	bl	8000884 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_MCK_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin;
 8002f7a:	2380      	movs	r3, #128	; 0x80
 8002f7c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f7e:	2302      	movs	r3, #2
 8002f80:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f82:	2300      	movs	r3, #0
 8002f84:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f86:	2300      	movs	r3, #0
 8002f88:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002f8a:	2306      	movs	r3, #6
 8002f8c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(I2S3_MCK_GPIO_Port, &GPIO_InitStruct);
 8002f8e:	f107 031c 	add.w	r3, r7, #28
 8002f92:	4619      	mov	r1, r3
 8002f94:	4817      	ldr	r0, [pc, #92]	; (8002ff4 <MX_GPIO_Init+0x1cc>)
 8002f96:	f7fd fc75 	bl	8000884 <HAL_GPIO_Init>

  /*Configure GPIO pin : ZCR_INT_Pin */
  GPIO_InitStruct.Pin = ZCR_INT_Pin;
 8002f9a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002f9e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002fa0:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002fa4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002fa6:	2302      	movs	r3, #2
 8002fa8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(ZCR_INT_GPIO_Port, &GPIO_InitStruct);
 8002faa:	f107 031c 	add.w	r3, r7, #28
 8002fae:	4619      	mov	r1, r3
 8002fb0:	4810      	ldr	r0, [pc, #64]	; (8002ff4 <MX_GPIO_Init+0x1cc>)
 8002fb2:	f7fd fc67 	bl	8000884 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8002fb6:	2200      	movs	r2, #0
 8002fb8:	2100      	movs	r1, #0
 8002fba:	2006      	movs	r0, #6
 8002fbc:	f7fd fc2b 	bl	8000816 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8002fc0:	2006      	movs	r0, #6
 8002fc2:	f7fd fc44 	bl	800084e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8002fc6:	2200      	movs	r2, #0
 8002fc8:	2100      	movs	r1, #0
 8002fca:	2028      	movs	r0, #40	; 0x28
 8002fcc:	f7fd fc23 	bl	8000816 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002fd0:	2028      	movs	r0, #40	; 0x28
 8002fd2:	f7fd fc3c 	bl	800084e <HAL_NVIC_EnableIRQ>

}
 8002fd6:	bf00      	nop
 8002fd8:	3730      	adds	r7, #48	; 0x30
 8002fda:	46bd      	mov	sp, r7
 8002fdc:	bd80      	pop	{r7, pc}
 8002fde:	bf00      	nop
 8002fe0:	40023800 	.word	0x40023800
 8002fe4:	40021000 	.word	0x40021000
 8002fe8:	40020400 	.word	0x40020400
 8002fec:	40020c00 	.word	0x40020c00
 8002ff0:	40020000 	.word	0x40020000
 8002ff4:	40020800 	.word	0x40020800

08002ff8 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	b082      	sub	sp, #8
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	4603      	mov	r3, r0
 8003000:	80fb      	strh	r3, [r7, #6]
#if TOUCH_CTRL == 0
	if(GPIO_Pin == B1_Pin){
 8003002:	88fb      	ldrh	r3, [r7, #6]
 8003004:	2b01      	cmp	r3, #1
 8003006:	d102      	bne.n	800300e <HAL_GPIO_EXTI_Callback+0x16>
		f_ChangePWM = true;
 8003008:	4b0d      	ldr	r3, [pc, #52]	; (8003040 <HAL_GPIO_EXTI_Callback+0x48>)
 800300a:	2201      	movs	r2, #1
 800300c:	701a      	strb	r2, [r3, #0]
	}
#endif
	if(GPIO_Pin == ZCR_INT_Pin){
 800300e:	88fb      	ldrh	r3, [r7, #6]
 8003010:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003014:	d110      	bne.n	8003038 <HAL_GPIO_EXTI_Callback+0x40>
		f_StartPWM = true;
 8003016:	4b0b      	ldr	r3, [pc, #44]	; (8003044 <HAL_GPIO_EXTI_Callback+0x4c>)
 8003018:	2201      	movs	r2, #1
 800301a:	701a      	strb	r2, [r3, #0]
		TIM2->CCR1 = set_dutycycle;
 800301c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003020:	4a09      	ldr	r2, [pc, #36]	; (8003048 <HAL_GPIO_EXTI_Callback+0x50>)
 8003022:	7812      	ldrb	r2, [r2, #0]
 8003024:	635a      	str	r2, [r3, #52]	; 0x34
		HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8003026:	2100      	movs	r1, #0
 8003028:	4808      	ldr	r0, [pc, #32]	; (800304c <HAL_GPIO_EXTI_Callback+0x54>)
 800302a:	f7fe fbab 	bl	8001784 <HAL_TIM_PWM_Start>
		HAL_GPIO_TogglePin(GPIOD, LD6_Pin);
 800302e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003032:	4807      	ldr	r0, [pc, #28]	; (8003050 <HAL_GPIO_EXTI_Callback+0x58>)
 8003034:	f7fd fdd9 	bl	8000bea <HAL_GPIO_TogglePin>
	}
}
 8003038:	bf00      	nop
 800303a:	3708      	adds	r7, #8
 800303c:	46bd      	mov	sp, r7
 800303e:	bd80      	pop	{r7, pc}
 8003040:	200001f9 	.word	0x200001f9
 8003044:	200001f8 	.word	0x200001f8
 8003048:	20000200 	.word	0x20000200
 800304c:	200002cc 	.word	0x200002cc
 8003050:	40020c00 	.word	0x40020c00

08003054 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003054:	b480      	push	{r7}
 8003056:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8003058:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800305a:	e7fe      	b.n	800305a <Error_Handler+0x6>

0800305c <RetargetInit>:
#define STDOUT_FILENO 1
#define STDERR_FILENO 2

UART_HandleTypeDef *gHuart;

void RetargetInit(UART_HandleTypeDef *huart) {
 800305c:	b580      	push	{r7, lr}
 800305e:	b082      	sub	sp, #8
 8003060:	af00      	add	r7, sp, #0
 8003062:	6078      	str	r0, [r7, #4]
  gHuart = huart;
 8003064:	4a07      	ldr	r2, [pc, #28]	; (8003084 <RetargetInit+0x28>)
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	6013      	str	r3, [r2, #0]

  /* Disable I/O buffering for STDOUT stream, so that
   * chars are sent out as soon as they are printed. */
  setvbuf(stdout, NULL, _IONBF, 0);
 800306a:	4b07      	ldr	r3, [pc, #28]	; (8003088 <RetargetInit+0x2c>)
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	6898      	ldr	r0, [r3, #8]
 8003070:	2300      	movs	r3, #0
 8003072:	2202      	movs	r2, #2
 8003074:	2100      	movs	r1, #0
 8003076:	f000 fb65 	bl	8003744 <setvbuf>
}
 800307a:	bf00      	nop
 800307c:	3708      	adds	r7, #8
 800307e:	46bd      	mov	sp, r7
 8003080:	bd80      	pop	{r7, pc}
 8003082:	bf00      	nop
 8003084:	20000358 	.word	0x20000358
 8003088:	2000000c 	.word	0x2000000c

0800308c <_isatty>:

int _isatty(int fd) {
 800308c:	b580      	push	{r7, lr}
 800308e:	b082      	sub	sp, #8
 8003090:	af00      	add	r7, sp, #0
 8003092:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	2b00      	cmp	r3, #0
 8003098:	db04      	blt.n	80030a4 <_isatty+0x18>
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	2b02      	cmp	r3, #2
 800309e:	dc01      	bgt.n	80030a4 <_isatty+0x18>
    return 1;
 80030a0:	2301      	movs	r3, #1
 80030a2:	e005      	b.n	80030b0 <_isatty+0x24>

  errno = EBADF;
 80030a4:	f000 fa7c 	bl	80035a0 <__errno>
 80030a8:	4602      	mov	r2, r0
 80030aa:	2309      	movs	r3, #9
 80030ac:	6013      	str	r3, [r2, #0]
  return 0;
 80030ae:	2300      	movs	r3, #0
}
 80030b0:	4618      	mov	r0, r3
 80030b2:	3708      	adds	r7, #8
 80030b4:	46bd      	mov	sp, r7
 80030b6:	bd80      	pop	{r7, pc}

080030b8 <_write>:

int _write(int fd, char* ptr, int len) {
 80030b8:	b580      	push	{r7, lr}
 80030ba:	b086      	sub	sp, #24
 80030bc:	af00      	add	r7, sp, #0
 80030be:	60f8      	str	r0, [r7, #12]
 80030c0:	60b9      	str	r1, [r7, #8]
 80030c2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDOUT_FILENO || fd == STDERR_FILENO) {
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	2b01      	cmp	r3, #1
 80030c8:	d002      	beq.n	80030d0 <_write+0x18>
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	2b02      	cmp	r3, #2
 80030ce:	d111      	bne.n	80030f4 <_write+0x3c>
    hstatus = HAL_UART_Transmit(gHuart, (uint8_t *) ptr, len, HAL_MAX_DELAY);
 80030d0:	4b0e      	ldr	r3, [pc, #56]	; (800310c <_write+0x54>)
 80030d2:	6818      	ldr	r0, [r3, #0]
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	b29a      	uxth	r2, r3
 80030d8:	f04f 33ff 	mov.w	r3, #4294967295
 80030dc:	68b9      	ldr	r1, [r7, #8]
 80030de:	f7ff f970 	bl	80023c2 <HAL_UART_Transmit>
 80030e2:	4603      	mov	r3, r0
 80030e4:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 80030e6:	7dfb      	ldrb	r3, [r7, #23]
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d101      	bne.n	80030f0 <_write+0x38>
      return len;
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	e008      	b.n	8003102 <_write+0x4a>
    else
      return EIO;
 80030f0:	2305      	movs	r3, #5
 80030f2:	e006      	b.n	8003102 <_write+0x4a>
  }
  errno = EBADF;
 80030f4:	f000 fa54 	bl	80035a0 <__errno>
 80030f8:	4602      	mov	r2, r0
 80030fa:	2309      	movs	r3, #9
 80030fc:	6013      	str	r3, [r2, #0]
  return -1;
 80030fe:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003102:	4618      	mov	r0, r3
 8003104:	3718      	adds	r7, #24
 8003106:	46bd      	mov	sp, r7
 8003108:	bd80      	pop	{r7, pc}
 800310a:	bf00      	nop
 800310c:	20000358 	.word	0x20000358

08003110 <_close>:

int _close(int fd) {
 8003110:	b580      	push	{r7, lr}
 8003112:	b082      	sub	sp, #8
 8003114:	af00      	add	r7, sp, #0
 8003116:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	2b00      	cmp	r3, #0
 800311c:	db04      	blt.n	8003128 <_close+0x18>
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	2b02      	cmp	r3, #2
 8003122:	dc01      	bgt.n	8003128 <_close+0x18>
    return 0;
 8003124:	2300      	movs	r3, #0
 8003126:	e006      	b.n	8003136 <_close+0x26>

  errno = EBADF;
 8003128:	f000 fa3a 	bl	80035a0 <__errno>
 800312c:	4602      	mov	r2, r0
 800312e:	2309      	movs	r3, #9
 8003130:	6013      	str	r3, [r2, #0]
  return -1;
 8003132:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003136:	4618      	mov	r0, r3
 8003138:	3708      	adds	r7, #8
 800313a:	46bd      	mov	sp, r7
 800313c:	bd80      	pop	{r7, pc}

0800313e <_lseek>:

int _lseek(int fd, int ptr, int dir) {
 800313e:	b580      	push	{r7, lr}
 8003140:	b084      	sub	sp, #16
 8003142:	af00      	add	r7, sp, #0
 8003144:	60f8      	str	r0, [r7, #12]
 8003146:	60b9      	str	r1, [r7, #8]
 8003148:	607a      	str	r2, [r7, #4]
  (void) fd;
  (void) ptr;
  (void) dir;

  errno = EBADF;
 800314a:	f000 fa29 	bl	80035a0 <__errno>
 800314e:	4602      	mov	r2, r0
 8003150:	2309      	movs	r3, #9
 8003152:	6013      	str	r3, [r2, #0]
  return -1;
 8003154:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003158:	4618      	mov	r0, r3
 800315a:	3710      	adds	r7, #16
 800315c:	46bd      	mov	sp, r7
 800315e:	bd80      	pop	{r7, pc}

08003160 <_read>:

int _read(int fd, char* ptr, int len) {
 8003160:	b580      	push	{r7, lr}
 8003162:	b086      	sub	sp, #24
 8003164:	af00      	add	r7, sp, #0
 8003166:	60f8      	str	r0, [r7, #12]
 8003168:	60b9      	str	r1, [r7, #8]
 800316a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDIN_FILENO) {
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	2b00      	cmp	r3, #0
 8003170:	d110      	bne.n	8003194 <_read+0x34>
    hstatus = HAL_UART_Receive(gHuart, (uint8_t *) ptr, 1, HAL_MAX_DELAY);
 8003172:	4b0e      	ldr	r3, [pc, #56]	; (80031ac <_read+0x4c>)
 8003174:	6818      	ldr	r0, [r3, #0]
 8003176:	f04f 33ff 	mov.w	r3, #4294967295
 800317a:	2201      	movs	r2, #1
 800317c:	68b9      	ldr	r1, [r7, #8]
 800317e:	f7ff f9b1 	bl	80024e4 <HAL_UART_Receive>
 8003182:	4603      	mov	r3, r0
 8003184:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK){
 8003186:	7dfb      	ldrb	r3, [r7, #23]
 8003188:	2b00      	cmp	r3, #0
 800318a:	d101      	bne.n	8003190 <_read+0x30>
    	return 1;
 800318c:	2301      	movs	r3, #1
 800318e:	e008      	b.n	80031a2 <_read+0x42>
    }
    else
      return EIO;
 8003190:	2305      	movs	r3, #5
 8003192:	e006      	b.n	80031a2 <_read+0x42>
  }
  errno = EBADF;
 8003194:	f000 fa04 	bl	80035a0 <__errno>
 8003198:	4602      	mov	r2, r0
 800319a:	2309      	movs	r3, #9
 800319c:	6013      	str	r3, [r2, #0]
  return -1;
 800319e:	f04f 33ff 	mov.w	r3, #4294967295
}
 80031a2:	4618      	mov	r0, r3
 80031a4:	3718      	adds	r7, #24
 80031a6:	46bd      	mov	sp, r7
 80031a8:	bd80      	pop	{r7, pc}
 80031aa:	bf00      	nop
 80031ac:	20000358 	.word	0x20000358

080031b0 <_fstat>:

int _fstat(int fd, struct stat* st) {
 80031b0:	b580      	push	{r7, lr}
 80031b2:	b082      	sub	sp, #8
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	6078      	str	r0, [r7, #4]
 80031b8:	6039      	str	r1, [r7, #0]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO) {
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	2b00      	cmp	r3, #0
 80031be:	db08      	blt.n	80031d2 <_fstat+0x22>
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	2b02      	cmp	r3, #2
 80031c4:	dc05      	bgt.n	80031d2 <_fstat+0x22>
    st->st_mode = S_IFCHR;
 80031c6:	683b      	ldr	r3, [r7, #0]
 80031c8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80031cc:	605a      	str	r2, [r3, #4]
    return 0;
 80031ce:	2300      	movs	r3, #0
 80031d0:	e005      	b.n	80031de <_fstat+0x2e>
  }

  errno = EBADF;
 80031d2:	f000 f9e5 	bl	80035a0 <__errno>
 80031d6:	4602      	mov	r2, r0
 80031d8:	2309      	movs	r3, #9
 80031da:	6013      	str	r3, [r2, #0]
  return 0;
 80031dc:	2300      	movs	r3, #0
}
 80031de:	4618      	mov	r0, r3
 80031e0:	3708      	adds	r7, #8
 80031e2:	46bd      	mov	sp, r7
 80031e4:	bd80      	pop	{r7, pc}
	...

080031e8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80031e8:	b580      	push	{r7, lr}
 80031ea:	b082      	sub	sp, #8
 80031ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80031ee:	2300      	movs	r3, #0
 80031f0:	607b      	str	r3, [r7, #4]
 80031f2:	4a10      	ldr	r2, [pc, #64]	; (8003234 <HAL_MspInit+0x4c>)
 80031f4:	4b0f      	ldr	r3, [pc, #60]	; (8003234 <HAL_MspInit+0x4c>)
 80031f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031f8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80031fc:	6453      	str	r3, [r2, #68]	; 0x44
 80031fe:	4b0d      	ldr	r3, [pc, #52]	; (8003234 <HAL_MspInit+0x4c>)
 8003200:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003202:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003206:	607b      	str	r3, [r7, #4]
 8003208:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800320a:	2300      	movs	r3, #0
 800320c:	603b      	str	r3, [r7, #0]
 800320e:	4a09      	ldr	r2, [pc, #36]	; (8003234 <HAL_MspInit+0x4c>)
 8003210:	4b08      	ldr	r3, [pc, #32]	; (8003234 <HAL_MspInit+0x4c>)
 8003212:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003214:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003218:	6413      	str	r3, [r2, #64]	; 0x40
 800321a:	4b06      	ldr	r3, [pc, #24]	; (8003234 <HAL_MspInit+0x4c>)
 800321c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800321e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003222:	603b      	str	r3, [r7, #0]
 8003224:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8003226:	2007      	movs	r0, #7
 8003228:	f7fd faea 	bl	8000800 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800322c:	bf00      	nop
 800322e:	3708      	adds	r7, #8
 8003230:	46bd      	mov	sp, r7
 8003232:	bd80      	pop	{r7, pc}
 8003234:	40023800 	.word	0x40023800

08003238 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003238:	b580      	push	{r7, lr}
 800323a:	b08c      	sub	sp, #48	; 0x30
 800323c:	af00      	add	r7, sp, #0
 800323e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003240:	f107 031c 	add.w	r3, r7, #28
 8003244:	2200      	movs	r2, #0
 8003246:	601a      	str	r2, [r3, #0]
 8003248:	605a      	str	r2, [r3, #4]
 800324a:	609a      	str	r2, [r3, #8]
 800324c:	60da      	str	r2, [r3, #12]
 800324e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	4a41      	ldr	r2, [pc, #260]	; (800335c <HAL_SPI_MspInit+0x124>)
 8003256:	4293      	cmp	r3, r2
 8003258:	d12c      	bne.n	80032b4 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800325a:	2300      	movs	r3, #0
 800325c:	61bb      	str	r3, [r7, #24]
 800325e:	4a40      	ldr	r2, [pc, #256]	; (8003360 <HAL_SPI_MspInit+0x128>)
 8003260:	4b3f      	ldr	r3, [pc, #252]	; (8003360 <HAL_SPI_MspInit+0x128>)
 8003262:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003264:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003268:	6453      	str	r3, [r2, #68]	; 0x44
 800326a:	4b3d      	ldr	r3, [pc, #244]	; (8003360 <HAL_SPI_MspInit+0x128>)
 800326c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800326e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003272:	61bb      	str	r3, [r7, #24]
 8003274:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003276:	2300      	movs	r3, #0
 8003278:	617b      	str	r3, [r7, #20]
 800327a:	4a39      	ldr	r2, [pc, #228]	; (8003360 <HAL_SPI_MspInit+0x128>)
 800327c:	4b38      	ldr	r3, [pc, #224]	; (8003360 <HAL_SPI_MspInit+0x128>)
 800327e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003280:	f043 0301 	orr.w	r3, r3, #1
 8003284:	6313      	str	r3, [r2, #48]	; 0x30
 8003286:	4b36      	ldr	r3, [pc, #216]	; (8003360 <HAL_SPI_MspInit+0x128>)
 8003288:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800328a:	f003 0301 	and.w	r3, r3, #1
 800328e:	617b      	str	r3, [r7, #20]
 8003290:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8003292:	23e0      	movs	r3, #224	; 0xe0
 8003294:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003296:	2302      	movs	r3, #2
 8003298:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800329a:	2300      	movs	r3, #0
 800329c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800329e:	2303      	movs	r3, #3
 80032a0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80032a2:	2305      	movs	r3, #5
 80032a4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80032a6:	f107 031c 	add.w	r3, r7, #28
 80032aa:	4619      	mov	r1, r3
 80032ac:	482d      	ldr	r0, [pc, #180]	; (8003364 <HAL_SPI_MspInit+0x12c>)
 80032ae:	f7fd fae9 	bl	8000884 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80032b2:	e04f      	b.n	8003354 <HAL_SPI_MspInit+0x11c>
  else if(hspi->Instance==SPI2)
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	4a2b      	ldr	r2, [pc, #172]	; (8003368 <HAL_SPI_MspInit+0x130>)
 80032ba:	4293      	cmp	r3, r2
 80032bc:	d14a      	bne.n	8003354 <HAL_SPI_MspInit+0x11c>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80032be:	2300      	movs	r3, #0
 80032c0:	613b      	str	r3, [r7, #16]
 80032c2:	4a27      	ldr	r2, [pc, #156]	; (8003360 <HAL_SPI_MspInit+0x128>)
 80032c4:	4b26      	ldr	r3, [pc, #152]	; (8003360 <HAL_SPI_MspInit+0x128>)
 80032c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032c8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80032cc:	6413      	str	r3, [r2, #64]	; 0x40
 80032ce:	4b24      	ldr	r3, [pc, #144]	; (8003360 <HAL_SPI_MspInit+0x128>)
 80032d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80032d6:	613b      	str	r3, [r7, #16]
 80032d8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80032da:	2300      	movs	r3, #0
 80032dc:	60fb      	str	r3, [r7, #12]
 80032de:	4a20      	ldr	r2, [pc, #128]	; (8003360 <HAL_SPI_MspInit+0x128>)
 80032e0:	4b1f      	ldr	r3, [pc, #124]	; (8003360 <HAL_SPI_MspInit+0x128>)
 80032e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032e4:	f043 0304 	orr.w	r3, r3, #4
 80032e8:	6313      	str	r3, [r2, #48]	; 0x30
 80032ea:	4b1d      	ldr	r3, [pc, #116]	; (8003360 <HAL_SPI_MspInit+0x128>)
 80032ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032ee:	f003 0304 	and.w	r3, r3, #4
 80032f2:	60fb      	str	r3, [r7, #12]
 80032f4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80032f6:	2300      	movs	r3, #0
 80032f8:	60bb      	str	r3, [r7, #8]
 80032fa:	4a19      	ldr	r2, [pc, #100]	; (8003360 <HAL_SPI_MspInit+0x128>)
 80032fc:	4b18      	ldr	r3, [pc, #96]	; (8003360 <HAL_SPI_MspInit+0x128>)
 80032fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003300:	f043 0302 	orr.w	r3, r3, #2
 8003304:	6313      	str	r3, [r2, #48]	; 0x30
 8003306:	4b16      	ldr	r3, [pc, #88]	; (8003360 <HAL_SPI_MspInit+0x128>)
 8003308:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800330a:	f003 0302 	and.w	r3, r3, #2
 800330e:	60bb      	str	r3, [r7, #8]
 8003310:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8003312:	230c      	movs	r3, #12
 8003314:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003316:	2302      	movs	r3, #2
 8003318:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800331a:	2300      	movs	r3, #0
 800331c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800331e:	2303      	movs	r3, #3
 8003320:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003322:	2305      	movs	r3, #5
 8003324:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003326:	f107 031c 	add.w	r3, r7, #28
 800332a:	4619      	mov	r1, r3
 800332c:	480f      	ldr	r0, [pc, #60]	; (800336c <HAL_SPI_MspInit+0x134>)
 800332e:	f7fd faa9 	bl	8000884 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003332:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003336:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003338:	2302      	movs	r3, #2
 800333a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800333c:	2300      	movs	r3, #0
 800333e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003340:	2303      	movs	r3, #3
 8003342:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003344:	2305      	movs	r3, #5
 8003346:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003348:	f107 031c 	add.w	r3, r7, #28
 800334c:	4619      	mov	r1, r3
 800334e:	4808      	ldr	r0, [pc, #32]	; (8003370 <HAL_SPI_MspInit+0x138>)
 8003350:	f7fd fa98 	bl	8000884 <HAL_GPIO_Init>
}
 8003354:	bf00      	nop
 8003356:	3730      	adds	r7, #48	; 0x30
 8003358:	46bd      	mov	sp, r7
 800335a:	bd80      	pop	{r7, pc}
 800335c:	40013000 	.word	0x40013000
 8003360:	40023800 	.word	0x40023800
 8003364:	40020000 	.word	0x40020000
 8003368:	40003800 	.word	0x40003800
 800336c:	40020800 	.word	0x40020800
 8003370:	40020400 	.word	0x40020400

08003374 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003374:	b480      	push	{r7}
 8003376:	b085      	sub	sp, #20
 8003378:	af00      	add	r7, sp, #0
 800337a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003384:	d10d      	bne.n	80033a2 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003386:	2300      	movs	r3, #0
 8003388:	60fb      	str	r3, [r7, #12]
 800338a:	4a09      	ldr	r2, [pc, #36]	; (80033b0 <HAL_TIM_Base_MspInit+0x3c>)
 800338c:	4b08      	ldr	r3, [pc, #32]	; (80033b0 <HAL_TIM_Base_MspInit+0x3c>)
 800338e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003390:	f043 0301 	orr.w	r3, r3, #1
 8003394:	6413      	str	r3, [r2, #64]	; 0x40
 8003396:	4b06      	ldr	r3, [pc, #24]	; (80033b0 <HAL_TIM_Base_MspInit+0x3c>)
 8003398:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800339a:	f003 0301 	and.w	r3, r3, #1
 800339e:	60fb      	str	r3, [r7, #12]
 80033a0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80033a2:	bf00      	nop
 80033a4:	3714      	adds	r7, #20
 80033a6:	46bd      	mov	sp, r7
 80033a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ac:	4770      	bx	lr
 80033ae:	bf00      	nop
 80033b0:	40023800 	.word	0x40023800

080033b4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80033b4:	b580      	push	{r7, lr}
 80033b6:	b088      	sub	sp, #32
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80033bc:	f107 030c 	add.w	r3, r7, #12
 80033c0:	2200      	movs	r2, #0
 80033c2:	601a      	str	r2, [r3, #0]
 80033c4:	605a      	str	r2, [r3, #4]
 80033c6:	609a      	str	r2, [r3, #8]
 80033c8:	60da      	str	r2, [r3, #12]
 80033ca:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80033d4:	d11e      	bne.n	8003414 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80033d6:	2300      	movs	r3, #0
 80033d8:	60bb      	str	r3, [r7, #8]
 80033da:	4a10      	ldr	r2, [pc, #64]	; (800341c <HAL_TIM_MspPostInit+0x68>)
 80033dc:	4b0f      	ldr	r3, [pc, #60]	; (800341c <HAL_TIM_MspPostInit+0x68>)
 80033de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033e0:	f043 0301 	orr.w	r3, r3, #1
 80033e4:	6313      	str	r3, [r2, #48]	; 0x30
 80033e6:	4b0d      	ldr	r3, [pc, #52]	; (800341c <HAL_TIM_MspPostInit+0x68>)
 80033e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033ea:	f003 0301 	and.w	r3, r3, #1
 80033ee:	60bb      	str	r3, [r7, #8]
 80033f0:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = OPTO_PWM_Pin;
 80033f2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80033f6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033f8:	2302      	movs	r3, #2
 80033fa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033fc:	2300      	movs	r3, #0
 80033fe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003400:	2300      	movs	r3, #0
 8003402:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003404:	2301      	movs	r3, #1
 8003406:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(OPTO_PWM_GPIO_Port, &GPIO_InitStruct);
 8003408:	f107 030c 	add.w	r3, r7, #12
 800340c:	4619      	mov	r1, r3
 800340e:	4804      	ldr	r0, [pc, #16]	; (8003420 <HAL_TIM_MspPostInit+0x6c>)
 8003410:	f7fd fa38 	bl	8000884 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8003414:	bf00      	nop
 8003416:	3720      	adds	r7, #32
 8003418:	46bd      	mov	sp, r7
 800341a:	bd80      	pop	{r7, pc}
 800341c:	40023800 	.word	0x40023800
 8003420:	40020000 	.word	0x40020000

08003424 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003424:	b580      	push	{r7, lr}
 8003426:	b08a      	sub	sp, #40	; 0x28
 8003428:	af00      	add	r7, sp, #0
 800342a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800342c:	f107 0314 	add.w	r3, r7, #20
 8003430:	2200      	movs	r2, #0
 8003432:	601a      	str	r2, [r3, #0]
 8003434:	605a      	str	r2, [r3, #4]
 8003436:	609a      	str	r2, [r3, #8]
 8003438:	60da      	str	r2, [r3, #12]
 800343a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	4a19      	ldr	r2, [pc, #100]	; (80034a8 <HAL_UART_MspInit+0x84>)
 8003442:	4293      	cmp	r3, r2
 8003444:	d12b      	bne.n	800349e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003446:	2300      	movs	r3, #0
 8003448:	613b      	str	r3, [r7, #16]
 800344a:	4a18      	ldr	r2, [pc, #96]	; (80034ac <HAL_UART_MspInit+0x88>)
 800344c:	4b17      	ldr	r3, [pc, #92]	; (80034ac <HAL_UART_MspInit+0x88>)
 800344e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003450:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003454:	6413      	str	r3, [r2, #64]	; 0x40
 8003456:	4b15      	ldr	r3, [pc, #84]	; (80034ac <HAL_UART_MspInit+0x88>)
 8003458:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800345a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800345e:	613b      	str	r3, [r7, #16]
 8003460:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003462:	2300      	movs	r3, #0
 8003464:	60fb      	str	r3, [r7, #12]
 8003466:	4a11      	ldr	r2, [pc, #68]	; (80034ac <HAL_UART_MspInit+0x88>)
 8003468:	4b10      	ldr	r3, [pc, #64]	; (80034ac <HAL_UART_MspInit+0x88>)
 800346a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800346c:	f043 0301 	orr.w	r3, r3, #1
 8003470:	6313      	str	r3, [r2, #48]	; 0x30
 8003472:	4b0e      	ldr	r3, [pc, #56]	; (80034ac <HAL_UART_MspInit+0x88>)
 8003474:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003476:	f003 0301 	and.w	r3, r3, #1
 800347a:	60fb      	str	r3, [r7, #12]
 800347c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800347e:	230c      	movs	r3, #12
 8003480:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003482:	2302      	movs	r3, #2
 8003484:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003486:	2300      	movs	r3, #0
 8003488:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800348a:	2303      	movs	r3, #3
 800348c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800348e:	2307      	movs	r3, #7
 8003490:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003492:	f107 0314 	add.w	r3, r7, #20
 8003496:	4619      	mov	r1, r3
 8003498:	4805      	ldr	r0, [pc, #20]	; (80034b0 <HAL_UART_MspInit+0x8c>)
 800349a:	f7fd f9f3 	bl	8000884 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800349e:	bf00      	nop
 80034a0:	3728      	adds	r7, #40	; 0x28
 80034a2:	46bd      	mov	sp, r7
 80034a4:	bd80      	pop	{r7, pc}
 80034a6:	bf00      	nop
 80034a8:	40004400 	.word	0x40004400
 80034ac:	40023800 	.word	0x40023800
 80034b0:	40020000 	.word	0x40020000

080034b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80034b4:	b480      	push	{r7}
 80034b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80034b8:	e7fe      	b.n	80034b8 <NMI_Handler+0x4>

080034ba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80034ba:	b480      	push	{r7}
 80034bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80034be:	e7fe      	b.n	80034be <HardFault_Handler+0x4>

080034c0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80034c0:	b480      	push	{r7}
 80034c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80034c4:	e7fe      	b.n	80034c4 <MemManage_Handler+0x4>

080034c6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80034c6:	b480      	push	{r7}
 80034c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80034ca:	e7fe      	b.n	80034ca <BusFault_Handler+0x4>

080034cc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80034cc:	b480      	push	{r7}
 80034ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80034d0:	e7fe      	b.n	80034d0 <UsageFault_Handler+0x4>

080034d2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80034d2:	b480      	push	{r7}
 80034d4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80034d6:	bf00      	nop
 80034d8:	46bd      	mov	sp, r7
 80034da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034de:	4770      	bx	lr

080034e0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80034e0:	b480      	push	{r7}
 80034e2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80034e4:	bf00      	nop
 80034e6:	46bd      	mov	sp, r7
 80034e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ec:	4770      	bx	lr

080034ee <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80034ee:	b480      	push	{r7}
 80034f0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80034f2:	bf00      	nop
 80034f4:	46bd      	mov	sp, r7
 80034f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034fa:	4770      	bx	lr

080034fc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80034fc:	b580      	push	{r7, lr}
 80034fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003500:	f7fd f890 	bl	8000624 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003504:	bf00      	nop
 8003506:	bd80      	pop	{r7, pc}

08003508 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8003508:	b580      	push	{r7, lr}
 800350a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 800350c:	2001      	movs	r0, #1
 800350e:	f7fd fb87 	bl	8000c20 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8003512:	bf00      	nop
 8003514:	bd80      	pop	{r7, pc}

08003516 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8003516:	b580      	push	{r7, lr}
 8003518:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ZCR_INT_Pin);
 800351a:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800351e:	f7fd fb7f 	bl	8000c20 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8003522:	bf00      	nop
 8003524:	bd80      	pop	{r7, pc}
	...

08003528 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003528:	b480      	push	{r7}
 800352a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800352c:	4a06      	ldr	r2, [pc, #24]	; (8003548 <SystemInit+0x20>)
 800352e:	4b06      	ldr	r3, [pc, #24]	; (8003548 <SystemInit+0x20>)
 8003530:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003534:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003538:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800353c:	bf00      	nop
 800353e:	46bd      	mov	sp, r7
 8003540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003544:	4770      	bx	lr
 8003546:	bf00      	nop
 8003548:	e000ed00 	.word	0xe000ed00

0800354c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800354c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003584 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003550:	480d      	ldr	r0, [pc, #52]	; (8003588 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8003552:	490e      	ldr	r1, [pc, #56]	; (800358c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003554:	4a0e      	ldr	r2, [pc, #56]	; (8003590 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003556:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003558:	e002      	b.n	8003560 <LoopCopyDataInit>

0800355a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800355a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800355c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800355e:	3304      	adds	r3, #4

08003560 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003560:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003562:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003564:	d3f9      	bcc.n	800355a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003566:	4a0b      	ldr	r2, [pc, #44]	; (8003594 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003568:	4c0b      	ldr	r4, [pc, #44]	; (8003598 <LoopFillZerobss+0x26>)
  movs r3, #0
 800356a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800356c:	e001      	b.n	8003572 <LoopFillZerobss>

0800356e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800356e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003570:	3204      	adds	r2, #4

08003572 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003572:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003574:	d3fb      	bcc.n	800356e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003576:	f7ff ffd7 	bl	8003528 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800357a:	f000 f817 	bl	80035ac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800357e:	f7ff fa71 	bl	8002a64 <main>
  bx  lr    
 8003582:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8003584:	2001c000 	.word	0x2001c000
  ldr r0, =_sdata
 8003588:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800358c:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8003590:	08005508 	.word	0x08005508
  ldr r2, =_sbss
 8003594:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8003598:	20000360 	.word	0x20000360

0800359c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800359c:	e7fe      	b.n	800359c <ADC_IRQHandler>
	...

080035a0 <__errno>:
 80035a0:	4b01      	ldr	r3, [pc, #4]	; (80035a8 <__errno+0x8>)
 80035a2:	6818      	ldr	r0, [r3, #0]
 80035a4:	4770      	bx	lr
 80035a6:	bf00      	nop
 80035a8:	2000000c 	.word	0x2000000c

080035ac <__libc_init_array>:
 80035ac:	b570      	push	{r4, r5, r6, lr}
 80035ae:	4e0d      	ldr	r6, [pc, #52]	; (80035e4 <__libc_init_array+0x38>)
 80035b0:	4c0d      	ldr	r4, [pc, #52]	; (80035e8 <__libc_init_array+0x3c>)
 80035b2:	1ba4      	subs	r4, r4, r6
 80035b4:	10a4      	asrs	r4, r4, #2
 80035b6:	2500      	movs	r5, #0
 80035b8:	42a5      	cmp	r5, r4
 80035ba:	d109      	bne.n	80035d0 <__libc_init_array+0x24>
 80035bc:	4e0b      	ldr	r6, [pc, #44]	; (80035ec <__libc_init_array+0x40>)
 80035be:	4c0c      	ldr	r4, [pc, #48]	; (80035f0 <__libc_init_array+0x44>)
 80035c0:	f001 fe5a 	bl	8005278 <_init>
 80035c4:	1ba4      	subs	r4, r4, r6
 80035c6:	10a4      	asrs	r4, r4, #2
 80035c8:	2500      	movs	r5, #0
 80035ca:	42a5      	cmp	r5, r4
 80035cc:	d105      	bne.n	80035da <__libc_init_array+0x2e>
 80035ce:	bd70      	pop	{r4, r5, r6, pc}
 80035d0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80035d4:	4798      	blx	r3
 80035d6:	3501      	adds	r5, #1
 80035d8:	e7ee      	b.n	80035b8 <__libc_init_array+0xc>
 80035da:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80035de:	4798      	blx	r3
 80035e0:	3501      	adds	r5, #1
 80035e2:	e7f2      	b.n	80035ca <__libc_init_array+0x1e>
 80035e4:	08005500 	.word	0x08005500
 80035e8:	08005500 	.word	0x08005500
 80035ec:	08005500 	.word	0x08005500
 80035f0:	08005504 	.word	0x08005504

080035f4 <memcpy>:
 80035f4:	b510      	push	{r4, lr}
 80035f6:	1e43      	subs	r3, r0, #1
 80035f8:	440a      	add	r2, r1
 80035fa:	4291      	cmp	r1, r2
 80035fc:	d100      	bne.n	8003600 <memcpy+0xc>
 80035fe:	bd10      	pop	{r4, pc}
 8003600:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003604:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003608:	e7f7      	b.n	80035fa <memcpy+0x6>

0800360a <memset>:
 800360a:	4402      	add	r2, r0
 800360c:	4603      	mov	r3, r0
 800360e:	4293      	cmp	r3, r2
 8003610:	d100      	bne.n	8003614 <memset+0xa>
 8003612:	4770      	bx	lr
 8003614:	f803 1b01 	strb.w	r1, [r3], #1
 8003618:	e7f9      	b.n	800360e <memset+0x4>
	...

0800361c <iprintf>:
 800361c:	b40f      	push	{r0, r1, r2, r3}
 800361e:	4b0a      	ldr	r3, [pc, #40]	; (8003648 <iprintf+0x2c>)
 8003620:	b513      	push	{r0, r1, r4, lr}
 8003622:	681c      	ldr	r4, [r3, #0]
 8003624:	b124      	cbz	r4, 8003630 <iprintf+0x14>
 8003626:	69a3      	ldr	r3, [r4, #24]
 8003628:	b913      	cbnz	r3, 8003630 <iprintf+0x14>
 800362a:	4620      	mov	r0, r4
 800362c:	f000 fafc 	bl	8003c28 <__sinit>
 8003630:	ab05      	add	r3, sp, #20
 8003632:	9a04      	ldr	r2, [sp, #16]
 8003634:	68a1      	ldr	r1, [r4, #8]
 8003636:	9301      	str	r3, [sp, #4]
 8003638:	4620      	mov	r0, r4
 800363a:	f000 fcdd 	bl	8003ff8 <_vfiprintf_r>
 800363e:	b002      	add	sp, #8
 8003640:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003644:	b004      	add	sp, #16
 8003646:	4770      	bx	lr
 8003648:	2000000c 	.word	0x2000000c

0800364c <_puts_r>:
 800364c:	b570      	push	{r4, r5, r6, lr}
 800364e:	460e      	mov	r6, r1
 8003650:	4605      	mov	r5, r0
 8003652:	b118      	cbz	r0, 800365c <_puts_r+0x10>
 8003654:	6983      	ldr	r3, [r0, #24]
 8003656:	b90b      	cbnz	r3, 800365c <_puts_r+0x10>
 8003658:	f000 fae6 	bl	8003c28 <__sinit>
 800365c:	69ab      	ldr	r3, [r5, #24]
 800365e:	68ac      	ldr	r4, [r5, #8]
 8003660:	b913      	cbnz	r3, 8003668 <_puts_r+0x1c>
 8003662:	4628      	mov	r0, r5
 8003664:	f000 fae0 	bl	8003c28 <__sinit>
 8003668:	4b23      	ldr	r3, [pc, #140]	; (80036f8 <_puts_r+0xac>)
 800366a:	429c      	cmp	r4, r3
 800366c:	d117      	bne.n	800369e <_puts_r+0x52>
 800366e:	686c      	ldr	r4, [r5, #4]
 8003670:	89a3      	ldrh	r3, [r4, #12]
 8003672:	071b      	lsls	r3, r3, #28
 8003674:	d51d      	bpl.n	80036b2 <_puts_r+0x66>
 8003676:	6923      	ldr	r3, [r4, #16]
 8003678:	b1db      	cbz	r3, 80036b2 <_puts_r+0x66>
 800367a:	3e01      	subs	r6, #1
 800367c:	68a3      	ldr	r3, [r4, #8]
 800367e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8003682:	3b01      	subs	r3, #1
 8003684:	60a3      	str	r3, [r4, #8]
 8003686:	b9e9      	cbnz	r1, 80036c4 <_puts_r+0x78>
 8003688:	2b00      	cmp	r3, #0
 800368a:	da2e      	bge.n	80036ea <_puts_r+0x9e>
 800368c:	4622      	mov	r2, r4
 800368e:	210a      	movs	r1, #10
 8003690:	4628      	mov	r0, r5
 8003692:	f000 f905 	bl	80038a0 <__swbuf_r>
 8003696:	3001      	adds	r0, #1
 8003698:	d011      	beq.n	80036be <_puts_r+0x72>
 800369a:	200a      	movs	r0, #10
 800369c:	bd70      	pop	{r4, r5, r6, pc}
 800369e:	4b17      	ldr	r3, [pc, #92]	; (80036fc <_puts_r+0xb0>)
 80036a0:	429c      	cmp	r4, r3
 80036a2:	d101      	bne.n	80036a8 <_puts_r+0x5c>
 80036a4:	68ac      	ldr	r4, [r5, #8]
 80036a6:	e7e3      	b.n	8003670 <_puts_r+0x24>
 80036a8:	4b15      	ldr	r3, [pc, #84]	; (8003700 <_puts_r+0xb4>)
 80036aa:	429c      	cmp	r4, r3
 80036ac:	bf08      	it	eq
 80036ae:	68ec      	ldreq	r4, [r5, #12]
 80036b0:	e7de      	b.n	8003670 <_puts_r+0x24>
 80036b2:	4621      	mov	r1, r4
 80036b4:	4628      	mov	r0, r5
 80036b6:	f000 f945 	bl	8003944 <__swsetup_r>
 80036ba:	2800      	cmp	r0, #0
 80036bc:	d0dd      	beq.n	800367a <_puts_r+0x2e>
 80036be:	f04f 30ff 	mov.w	r0, #4294967295
 80036c2:	bd70      	pop	{r4, r5, r6, pc}
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	da04      	bge.n	80036d2 <_puts_r+0x86>
 80036c8:	69a2      	ldr	r2, [r4, #24]
 80036ca:	4293      	cmp	r3, r2
 80036cc:	db06      	blt.n	80036dc <_puts_r+0x90>
 80036ce:	290a      	cmp	r1, #10
 80036d0:	d004      	beq.n	80036dc <_puts_r+0x90>
 80036d2:	6823      	ldr	r3, [r4, #0]
 80036d4:	1c5a      	adds	r2, r3, #1
 80036d6:	6022      	str	r2, [r4, #0]
 80036d8:	7019      	strb	r1, [r3, #0]
 80036da:	e7cf      	b.n	800367c <_puts_r+0x30>
 80036dc:	4622      	mov	r2, r4
 80036de:	4628      	mov	r0, r5
 80036e0:	f000 f8de 	bl	80038a0 <__swbuf_r>
 80036e4:	3001      	adds	r0, #1
 80036e6:	d1c9      	bne.n	800367c <_puts_r+0x30>
 80036e8:	e7e9      	b.n	80036be <_puts_r+0x72>
 80036ea:	6823      	ldr	r3, [r4, #0]
 80036ec:	200a      	movs	r0, #10
 80036ee:	1c5a      	adds	r2, r3, #1
 80036f0:	6022      	str	r2, [r4, #0]
 80036f2:	7018      	strb	r0, [r3, #0]
 80036f4:	bd70      	pop	{r4, r5, r6, pc}
 80036f6:	bf00      	nop
 80036f8:	0800535c 	.word	0x0800535c
 80036fc:	0800537c 	.word	0x0800537c
 8003700:	0800533c 	.word	0x0800533c

08003704 <puts>:
 8003704:	4b02      	ldr	r3, [pc, #8]	; (8003710 <puts+0xc>)
 8003706:	4601      	mov	r1, r0
 8003708:	6818      	ldr	r0, [r3, #0]
 800370a:	f7ff bf9f 	b.w	800364c <_puts_r>
 800370e:	bf00      	nop
 8003710:	2000000c 	.word	0x2000000c

08003714 <iscanf>:
 8003714:	b40f      	push	{r0, r1, r2, r3}
 8003716:	4b0a      	ldr	r3, [pc, #40]	; (8003740 <iscanf+0x2c>)
 8003718:	b513      	push	{r0, r1, r4, lr}
 800371a:	681c      	ldr	r4, [r3, #0]
 800371c:	b124      	cbz	r4, 8003728 <iscanf+0x14>
 800371e:	69a3      	ldr	r3, [r4, #24]
 8003720:	b913      	cbnz	r3, 8003728 <iscanf+0x14>
 8003722:	4620      	mov	r0, r4
 8003724:	f000 fa80 	bl	8003c28 <__sinit>
 8003728:	ab05      	add	r3, sp, #20
 800372a:	9a04      	ldr	r2, [sp, #16]
 800372c:	6861      	ldr	r1, [r4, #4]
 800372e:	9301      	str	r3, [sp, #4]
 8003730:	4620      	mov	r0, r4
 8003732:	f001 f861 	bl	80047f8 <_vfiscanf_r>
 8003736:	b002      	add	sp, #8
 8003738:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800373c:	b004      	add	sp, #16
 800373e:	4770      	bx	lr
 8003740:	2000000c 	.word	0x2000000c

08003744 <setvbuf>:
 8003744:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8003748:	461d      	mov	r5, r3
 800374a:	4b51      	ldr	r3, [pc, #324]	; (8003890 <setvbuf+0x14c>)
 800374c:	681e      	ldr	r6, [r3, #0]
 800374e:	4604      	mov	r4, r0
 8003750:	460f      	mov	r7, r1
 8003752:	4690      	mov	r8, r2
 8003754:	b126      	cbz	r6, 8003760 <setvbuf+0x1c>
 8003756:	69b3      	ldr	r3, [r6, #24]
 8003758:	b913      	cbnz	r3, 8003760 <setvbuf+0x1c>
 800375a:	4630      	mov	r0, r6
 800375c:	f000 fa64 	bl	8003c28 <__sinit>
 8003760:	4b4c      	ldr	r3, [pc, #304]	; (8003894 <setvbuf+0x150>)
 8003762:	429c      	cmp	r4, r3
 8003764:	d152      	bne.n	800380c <setvbuf+0xc8>
 8003766:	6874      	ldr	r4, [r6, #4]
 8003768:	f1b8 0f02 	cmp.w	r8, #2
 800376c:	d006      	beq.n	800377c <setvbuf+0x38>
 800376e:	f1b8 0f01 	cmp.w	r8, #1
 8003772:	f200 8089 	bhi.w	8003888 <setvbuf+0x144>
 8003776:	2d00      	cmp	r5, #0
 8003778:	f2c0 8086 	blt.w	8003888 <setvbuf+0x144>
 800377c:	4621      	mov	r1, r4
 800377e:	4630      	mov	r0, r6
 8003780:	f000 f9d6 	bl	8003b30 <_fflush_r>
 8003784:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003786:	b141      	cbz	r1, 800379a <setvbuf+0x56>
 8003788:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800378c:	4299      	cmp	r1, r3
 800378e:	d002      	beq.n	8003796 <setvbuf+0x52>
 8003790:	4630      	mov	r0, r6
 8003792:	f000 fb5b 	bl	8003e4c <_free_r>
 8003796:	2300      	movs	r3, #0
 8003798:	6363      	str	r3, [r4, #52]	; 0x34
 800379a:	2300      	movs	r3, #0
 800379c:	61a3      	str	r3, [r4, #24]
 800379e:	6063      	str	r3, [r4, #4]
 80037a0:	89a3      	ldrh	r3, [r4, #12]
 80037a2:	061b      	lsls	r3, r3, #24
 80037a4:	d503      	bpl.n	80037ae <setvbuf+0x6a>
 80037a6:	6921      	ldr	r1, [r4, #16]
 80037a8:	4630      	mov	r0, r6
 80037aa:	f000 fb4f 	bl	8003e4c <_free_r>
 80037ae:	89a3      	ldrh	r3, [r4, #12]
 80037b0:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 80037b4:	f023 0303 	bic.w	r3, r3, #3
 80037b8:	f1b8 0f02 	cmp.w	r8, #2
 80037bc:	81a3      	strh	r3, [r4, #12]
 80037be:	d05d      	beq.n	800387c <setvbuf+0x138>
 80037c0:	ab01      	add	r3, sp, #4
 80037c2:	466a      	mov	r2, sp
 80037c4:	4621      	mov	r1, r4
 80037c6:	4630      	mov	r0, r6
 80037c8:	f000 fad4 	bl	8003d74 <__swhatbuf_r>
 80037cc:	89a3      	ldrh	r3, [r4, #12]
 80037ce:	4318      	orrs	r0, r3
 80037d0:	81a0      	strh	r0, [r4, #12]
 80037d2:	bb2d      	cbnz	r5, 8003820 <setvbuf+0xdc>
 80037d4:	9d00      	ldr	r5, [sp, #0]
 80037d6:	4628      	mov	r0, r5
 80037d8:	f000 fb30 	bl	8003e3c <malloc>
 80037dc:	4607      	mov	r7, r0
 80037de:	2800      	cmp	r0, #0
 80037e0:	d14e      	bne.n	8003880 <setvbuf+0x13c>
 80037e2:	f8dd 9000 	ldr.w	r9, [sp]
 80037e6:	45a9      	cmp	r9, r5
 80037e8:	d13c      	bne.n	8003864 <setvbuf+0x120>
 80037ea:	f04f 30ff 	mov.w	r0, #4294967295
 80037ee:	89a3      	ldrh	r3, [r4, #12]
 80037f0:	f043 0302 	orr.w	r3, r3, #2
 80037f4:	81a3      	strh	r3, [r4, #12]
 80037f6:	2300      	movs	r3, #0
 80037f8:	60a3      	str	r3, [r4, #8]
 80037fa:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80037fe:	6023      	str	r3, [r4, #0]
 8003800:	6123      	str	r3, [r4, #16]
 8003802:	2301      	movs	r3, #1
 8003804:	6163      	str	r3, [r4, #20]
 8003806:	b003      	add	sp, #12
 8003808:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800380c:	4b22      	ldr	r3, [pc, #136]	; (8003898 <setvbuf+0x154>)
 800380e:	429c      	cmp	r4, r3
 8003810:	d101      	bne.n	8003816 <setvbuf+0xd2>
 8003812:	68b4      	ldr	r4, [r6, #8]
 8003814:	e7a8      	b.n	8003768 <setvbuf+0x24>
 8003816:	4b21      	ldr	r3, [pc, #132]	; (800389c <setvbuf+0x158>)
 8003818:	429c      	cmp	r4, r3
 800381a:	bf08      	it	eq
 800381c:	68f4      	ldreq	r4, [r6, #12]
 800381e:	e7a3      	b.n	8003768 <setvbuf+0x24>
 8003820:	2f00      	cmp	r7, #0
 8003822:	d0d8      	beq.n	80037d6 <setvbuf+0x92>
 8003824:	69b3      	ldr	r3, [r6, #24]
 8003826:	b913      	cbnz	r3, 800382e <setvbuf+0xea>
 8003828:	4630      	mov	r0, r6
 800382a:	f000 f9fd 	bl	8003c28 <__sinit>
 800382e:	f1b8 0f01 	cmp.w	r8, #1
 8003832:	bf08      	it	eq
 8003834:	89a3      	ldrheq	r3, [r4, #12]
 8003836:	6027      	str	r7, [r4, #0]
 8003838:	bf04      	itt	eq
 800383a:	f043 0301 	orreq.w	r3, r3, #1
 800383e:	81a3      	strheq	r3, [r4, #12]
 8003840:	89a3      	ldrh	r3, [r4, #12]
 8003842:	6127      	str	r7, [r4, #16]
 8003844:	f013 0008 	ands.w	r0, r3, #8
 8003848:	6165      	str	r5, [r4, #20]
 800384a:	d01b      	beq.n	8003884 <setvbuf+0x140>
 800384c:	f013 0001 	ands.w	r0, r3, #1
 8003850:	bf18      	it	ne
 8003852:	426d      	negne	r5, r5
 8003854:	f04f 0300 	mov.w	r3, #0
 8003858:	bf1d      	ittte	ne
 800385a:	60a3      	strne	r3, [r4, #8]
 800385c:	61a5      	strne	r5, [r4, #24]
 800385e:	4618      	movne	r0, r3
 8003860:	60a5      	streq	r5, [r4, #8]
 8003862:	e7d0      	b.n	8003806 <setvbuf+0xc2>
 8003864:	4648      	mov	r0, r9
 8003866:	f000 fae9 	bl	8003e3c <malloc>
 800386a:	4607      	mov	r7, r0
 800386c:	2800      	cmp	r0, #0
 800386e:	d0bc      	beq.n	80037ea <setvbuf+0xa6>
 8003870:	89a3      	ldrh	r3, [r4, #12]
 8003872:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003876:	81a3      	strh	r3, [r4, #12]
 8003878:	464d      	mov	r5, r9
 800387a:	e7d3      	b.n	8003824 <setvbuf+0xe0>
 800387c:	2000      	movs	r0, #0
 800387e:	e7b6      	b.n	80037ee <setvbuf+0xaa>
 8003880:	46a9      	mov	r9, r5
 8003882:	e7f5      	b.n	8003870 <setvbuf+0x12c>
 8003884:	60a0      	str	r0, [r4, #8]
 8003886:	e7be      	b.n	8003806 <setvbuf+0xc2>
 8003888:	f04f 30ff 	mov.w	r0, #4294967295
 800388c:	e7bb      	b.n	8003806 <setvbuf+0xc2>
 800388e:	bf00      	nop
 8003890:	2000000c 	.word	0x2000000c
 8003894:	0800535c 	.word	0x0800535c
 8003898:	0800537c 	.word	0x0800537c
 800389c:	0800533c 	.word	0x0800533c

080038a0 <__swbuf_r>:
 80038a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80038a2:	460e      	mov	r6, r1
 80038a4:	4614      	mov	r4, r2
 80038a6:	4605      	mov	r5, r0
 80038a8:	b118      	cbz	r0, 80038b2 <__swbuf_r+0x12>
 80038aa:	6983      	ldr	r3, [r0, #24]
 80038ac:	b90b      	cbnz	r3, 80038b2 <__swbuf_r+0x12>
 80038ae:	f000 f9bb 	bl	8003c28 <__sinit>
 80038b2:	4b21      	ldr	r3, [pc, #132]	; (8003938 <__swbuf_r+0x98>)
 80038b4:	429c      	cmp	r4, r3
 80038b6:	d12a      	bne.n	800390e <__swbuf_r+0x6e>
 80038b8:	686c      	ldr	r4, [r5, #4]
 80038ba:	69a3      	ldr	r3, [r4, #24]
 80038bc:	60a3      	str	r3, [r4, #8]
 80038be:	89a3      	ldrh	r3, [r4, #12]
 80038c0:	071a      	lsls	r2, r3, #28
 80038c2:	d52e      	bpl.n	8003922 <__swbuf_r+0x82>
 80038c4:	6923      	ldr	r3, [r4, #16]
 80038c6:	b363      	cbz	r3, 8003922 <__swbuf_r+0x82>
 80038c8:	6923      	ldr	r3, [r4, #16]
 80038ca:	6820      	ldr	r0, [r4, #0]
 80038cc:	1ac0      	subs	r0, r0, r3
 80038ce:	6963      	ldr	r3, [r4, #20]
 80038d0:	b2f6      	uxtb	r6, r6
 80038d2:	4298      	cmp	r0, r3
 80038d4:	4637      	mov	r7, r6
 80038d6:	db04      	blt.n	80038e2 <__swbuf_r+0x42>
 80038d8:	4621      	mov	r1, r4
 80038da:	4628      	mov	r0, r5
 80038dc:	f000 f928 	bl	8003b30 <_fflush_r>
 80038e0:	bb28      	cbnz	r0, 800392e <__swbuf_r+0x8e>
 80038e2:	68a3      	ldr	r3, [r4, #8]
 80038e4:	3b01      	subs	r3, #1
 80038e6:	60a3      	str	r3, [r4, #8]
 80038e8:	6823      	ldr	r3, [r4, #0]
 80038ea:	1c5a      	adds	r2, r3, #1
 80038ec:	6022      	str	r2, [r4, #0]
 80038ee:	701e      	strb	r6, [r3, #0]
 80038f0:	6963      	ldr	r3, [r4, #20]
 80038f2:	3001      	adds	r0, #1
 80038f4:	4298      	cmp	r0, r3
 80038f6:	d004      	beq.n	8003902 <__swbuf_r+0x62>
 80038f8:	89a3      	ldrh	r3, [r4, #12]
 80038fa:	07db      	lsls	r3, r3, #31
 80038fc:	d519      	bpl.n	8003932 <__swbuf_r+0x92>
 80038fe:	2e0a      	cmp	r6, #10
 8003900:	d117      	bne.n	8003932 <__swbuf_r+0x92>
 8003902:	4621      	mov	r1, r4
 8003904:	4628      	mov	r0, r5
 8003906:	f000 f913 	bl	8003b30 <_fflush_r>
 800390a:	b190      	cbz	r0, 8003932 <__swbuf_r+0x92>
 800390c:	e00f      	b.n	800392e <__swbuf_r+0x8e>
 800390e:	4b0b      	ldr	r3, [pc, #44]	; (800393c <__swbuf_r+0x9c>)
 8003910:	429c      	cmp	r4, r3
 8003912:	d101      	bne.n	8003918 <__swbuf_r+0x78>
 8003914:	68ac      	ldr	r4, [r5, #8]
 8003916:	e7d0      	b.n	80038ba <__swbuf_r+0x1a>
 8003918:	4b09      	ldr	r3, [pc, #36]	; (8003940 <__swbuf_r+0xa0>)
 800391a:	429c      	cmp	r4, r3
 800391c:	bf08      	it	eq
 800391e:	68ec      	ldreq	r4, [r5, #12]
 8003920:	e7cb      	b.n	80038ba <__swbuf_r+0x1a>
 8003922:	4621      	mov	r1, r4
 8003924:	4628      	mov	r0, r5
 8003926:	f000 f80d 	bl	8003944 <__swsetup_r>
 800392a:	2800      	cmp	r0, #0
 800392c:	d0cc      	beq.n	80038c8 <__swbuf_r+0x28>
 800392e:	f04f 37ff 	mov.w	r7, #4294967295
 8003932:	4638      	mov	r0, r7
 8003934:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003936:	bf00      	nop
 8003938:	0800535c 	.word	0x0800535c
 800393c:	0800537c 	.word	0x0800537c
 8003940:	0800533c 	.word	0x0800533c

08003944 <__swsetup_r>:
 8003944:	4b32      	ldr	r3, [pc, #200]	; (8003a10 <__swsetup_r+0xcc>)
 8003946:	b570      	push	{r4, r5, r6, lr}
 8003948:	681d      	ldr	r5, [r3, #0]
 800394a:	4606      	mov	r6, r0
 800394c:	460c      	mov	r4, r1
 800394e:	b125      	cbz	r5, 800395a <__swsetup_r+0x16>
 8003950:	69ab      	ldr	r3, [r5, #24]
 8003952:	b913      	cbnz	r3, 800395a <__swsetup_r+0x16>
 8003954:	4628      	mov	r0, r5
 8003956:	f000 f967 	bl	8003c28 <__sinit>
 800395a:	4b2e      	ldr	r3, [pc, #184]	; (8003a14 <__swsetup_r+0xd0>)
 800395c:	429c      	cmp	r4, r3
 800395e:	d10f      	bne.n	8003980 <__swsetup_r+0x3c>
 8003960:	686c      	ldr	r4, [r5, #4]
 8003962:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003966:	b29a      	uxth	r2, r3
 8003968:	0715      	lsls	r5, r2, #28
 800396a:	d42c      	bmi.n	80039c6 <__swsetup_r+0x82>
 800396c:	06d0      	lsls	r0, r2, #27
 800396e:	d411      	bmi.n	8003994 <__swsetup_r+0x50>
 8003970:	2209      	movs	r2, #9
 8003972:	6032      	str	r2, [r6, #0]
 8003974:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003978:	81a3      	strh	r3, [r4, #12]
 800397a:	f04f 30ff 	mov.w	r0, #4294967295
 800397e:	bd70      	pop	{r4, r5, r6, pc}
 8003980:	4b25      	ldr	r3, [pc, #148]	; (8003a18 <__swsetup_r+0xd4>)
 8003982:	429c      	cmp	r4, r3
 8003984:	d101      	bne.n	800398a <__swsetup_r+0x46>
 8003986:	68ac      	ldr	r4, [r5, #8]
 8003988:	e7eb      	b.n	8003962 <__swsetup_r+0x1e>
 800398a:	4b24      	ldr	r3, [pc, #144]	; (8003a1c <__swsetup_r+0xd8>)
 800398c:	429c      	cmp	r4, r3
 800398e:	bf08      	it	eq
 8003990:	68ec      	ldreq	r4, [r5, #12]
 8003992:	e7e6      	b.n	8003962 <__swsetup_r+0x1e>
 8003994:	0751      	lsls	r1, r2, #29
 8003996:	d512      	bpl.n	80039be <__swsetup_r+0x7a>
 8003998:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800399a:	b141      	cbz	r1, 80039ae <__swsetup_r+0x6a>
 800399c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80039a0:	4299      	cmp	r1, r3
 80039a2:	d002      	beq.n	80039aa <__swsetup_r+0x66>
 80039a4:	4630      	mov	r0, r6
 80039a6:	f000 fa51 	bl	8003e4c <_free_r>
 80039aa:	2300      	movs	r3, #0
 80039ac:	6363      	str	r3, [r4, #52]	; 0x34
 80039ae:	89a3      	ldrh	r3, [r4, #12]
 80039b0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80039b4:	81a3      	strh	r3, [r4, #12]
 80039b6:	2300      	movs	r3, #0
 80039b8:	6063      	str	r3, [r4, #4]
 80039ba:	6923      	ldr	r3, [r4, #16]
 80039bc:	6023      	str	r3, [r4, #0]
 80039be:	89a3      	ldrh	r3, [r4, #12]
 80039c0:	f043 0308 	orr.w	r3, r3, #8
 80039c4:	81a3      	strh	r3, [r4, #12]
 80039c6:	6923      	ldr	r3, [r4, #16]
 80039c8:	b94b      	cbnz	r3, 80039de <__swsetup_r+0x9a>
 80039ca:	89a3      	ldrh	r3, [r4, #12]
 80039cc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80039d0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80039d4:	d003      	beq.n	80039de <__swsetup_r+0x9a>
 80039d6:	4621      	mov	r1, r4
 80039d8:	4630      	mov	r0, r6
 80039da:	f000 f9ef 	bl	8003dbc <__smakebuf_r>
 80039de:	89a2      	ldrh	r2, [r4, #12]
 80039e0:	f012 0301 	ands.w	r3, r2, #1
 80039e4:	d00c      	beq.n	8003a00 <__swsetup_r+0xbc>
 80039e6:	2300      	movs	r3, #0
 80039e8:	60a3      	str	r3, [r4, #8]
 80039ea:	6963      	ldr	r3, [r4, #20]
 80039ec:	425b      	negs	r3, r3
 80039ee:	61a3      	str	r3, [r4, #24]
 80039f0:	6923      	ldr	r3, [r4, #16]
 80039f2:	b953      	cbnz	r3, 8003a0a <__swsetup_r+0xc6>
 80039f4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80039f8:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 80039fc:	d1ba      	bne.n	8003974 <__swsetup_r+0x30>
 80039fe:	bd70      	pop	{r4, r5, r6, pc}
 8003a00:	0792      	lsls	r2, r2, #30
 8003a02:	bf58      	it	pl
 8003a04:	6963      	ldrpl	r3, [r4, #20]
 8003a06:	60a3      	str	r3, [r4, #8]
 8003a08:	e7f2      	b.n	80039f0 <__swsetup_r+0xac>
 8003a0a:	2000      	movs	r0, #0
 8003a0c:	e7f7      	b.n	80039fe <__swsetup_r+0xba>
 8003a0e:	bf00      	nop
 8003a10:	2000000c 	.word	0x2000000c
 8003a14:	0800535c 	.word	0x0800535c
 8003a18:	0800537c 	.word	0x0800537c
 8003a1c:	0800533c 	.word	0x0800533c

08003a20 <__sflush_r>:
 8003a20:	898a      	ldrh	r2, [r1, #12]
 8003a22:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003a26:	4605      	mov	r5, r0
 8003a28:	0710      	lsls	r0, r2, #28
 8003a2a:	460c      	mov	r4, r1
 8003a2c:	d45a      	bmi.n	8003ae4 <__sflush_r+0xc4>
 8003a2e:	684b      	ldr	r3, [r1, #4]
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	dc05      	bgt.n	8003a40 <__sflush_r+0x20>
 8003a34:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	dc02      	bgt.n	8003a40 <__sflush_r+0x20>
 8003a3a:	2000      	movs	r0, #0
 8003a3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003a40:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003a42:	2e00      	cmp	r6, #0
 8003a44:	d0f9      	beq.n	8003a3a <__sflush_r+0x1a>
 8003a46:	2300      	movs	r3, #0
 8003a48:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003a4c:	682f      	ldr	r7, [r5, #0]
 8003a4e:	602b      	str	r3, [r5, #0]
 8003a50:	d033      	beq.n	8003aba <__sflush_r+0x9a>
 8003a52:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003a54:	89a3      	ldrh	r3, [r4, #12]
 8003a56:	075a      	lsls	r2, r3, #29
 8003a58:	d505      	bpl.n	8003a66 <__sflush_r+0x46>
 8003a5a:	6863      	ldr	r3, [r4, #4]
 8003a5c:	1ac0      	subs	r0, r0, r3
 8003a5e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003a60:	b10b      	cbz	r3, 8003a66 <__sflush_r+0x46>
 8003a62:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003a64:	1ac0      	subs	r0, r0, r3
 8003a66:	2300      	movs	r3, #0
 8003a68:	4602      	mov	r2, r0
 8003a6a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003a6c:	6a21      	ldr	r1, [r4, #32]
 8003a6e:	4628      	mov	r0, r5
 8003a70:	47b0      	blx	r6
 8003a72:	1c43      	adds	r3, r0, #1
 8003a74:	89a3      	ldrh	r3, [r4, #12]
 8003a76:	d106      	bne.n	8003a86 <__sflush_r+0x66>
 8003a78:	6829      	ldr	r1, [r5, #0]
 8003a7a:	291d      	cmp	r1, #29
 8003a7c:	d84b      	bhi.n	8003b16 <__sflush_r+0xf6>
 8003a7e:	4a2b      	ldr	r2, [pc, #172]	; (8003b2c <__sflush_r+0x10c>)
 8003a80:	40ca      	lsrs	r2, r1
 8003a82:	07d6      	lsls	r6, r2, #31
 8003a84:	d547      	bpl.n	8003b16 <__sflush_r+0xf6>
 8003a86:	2200      	movs	r2, #0
 8003a88:	6062      	str	r2, [r4, #4]
 8003a8a:	04d9      	lsls	r1, r3, #19
 8003a8c:	6922      	ldr	r2, [r4, #16]
 8003a8e:	6022      	str	r2, [r4, #0]
 8003a90:	d504      	bpl.n	8003a9c <__sflush_r+0x7c>
 8003a92:	1c42      	adds	r2, r0, #1
 8003a94:	d101      	bne.n	8003a9a <__sflush_r+0x7a>
 8003a96:	682b      	ldr	r3, [r5, #0]
 8003a98:	b903      	cbnz	r3, 8003a9c <__sflush_r+0x7c>
 8003a9a:	6560      	str	r0, [r4, #84]	; 0x54
 8003a9c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003a9e:	602f      	str	r7, [r5, #0]
 8003aa0:	2900      	cmp	r1, #0
 8003aa2:	d0ca      	beq.n	8003a3a <__sflush_r+0x1a>
 8003aa4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003aa8:	4299      	cmp	r1, r3
 8003aaa:	d002      	beq.n	8003ab2 <__sflush_r+0x92>
 8003aac:	4628      	mov	r0, r5
 8003aae:	f000 f9cd 	bl	8003e4c <_free_r>
 8003ab2:	2000      	movs	r0, #0
 8003ab4:	6360      	str	r0, [r4, #52]	; 0x34
 8003ab6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003aba:	6a21      	ldr	r1, [r4, #32]
 8003abc:	2301      	movs	r3, #1
 8003abe:	4628      	mov	r0, r5
 8003ac0:	47b0      	blx	r6
 8003ac2:	1c41      	adds	r1, r0, #1
 8003ac4:	d1c6      	bne.n	8003a54 <__sflush_r+0x34>
 8003ac6:	682b      	ldr	r3, [r5, #0]
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d0c3      	beq.n	8003a54 <__sflush_r+0x34>
 8003acc:	2b1d      	cmp	r3, #29
 8003ace:	d001      	beq.n	8003ad4 <__sflush_r+0xb4>
 8003ad0:	2b16      	cmp	r3, #22
 8003ad2:	d101      	bne.n	8003ad8 <__sflush_r+0xb8>
 8003ad4:	602f      	str	r7, [r5, #0]
 8003ad6:	e7b0      	b.n	8003a3a <__sflush_r+0x1a>
 8003ad8:	89a3      	ldrh	r3, [r4, #12]
 8003ada:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003ade:	81a3      	strh	r3, [r4, #12]
 8003ae0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003ae4:	690f      	ldr	r7, [r1, #16]
 8003ae6:	2f00      	cmp	r7, #0
 8003ae8:	d0a7      	beq.n	8003a3a <__sflush_r+0x1a>
 8003aea:	0793      	lsls	r3, r2, #30
 8003aec:	680e      	ldr	r6, [r1, #0]
 8003aee:	bf08      	it	eq
 8003af0:	694b      	ldreq	r3, [r1, #20]
 8003af2:	600f      	str	r7, [r1, #0]
 8003af4:	bf18      	it	ne
 8003af6:	2300      	movne	r3, #0
 8003af8:	eba6 0807 	sub.w	r8, r6, r7
 8003afc:	608b      	str	r3, [r1, #8]
 8003afe:	f1b8 0f00 	cmp.w	r8, #0
 8003b02:	dd9a      	ble.n	8003a3a <__sflush_r+0x1a>
 8003b04:	4643      	mov	r3, r8
 8003b06:	463a      	mov	r2, r7
 8003b08:	6a21      	ldr	r1, [r4, #32]
 8003b0a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8003b0c:	4628      	mov	r0, r5
 8003b0e:	47b0      	blx	r6
 8003b10:	2800      	cmp	r0, #0
 8003b12:	dc07      	bgt.n	8003b24 <__sflush_r+0x104>
 8003b14:	89a3      	ldrh	r3, [r4, #12]
 8003b16:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003b1a:	81a3      	strh	r3, [r4, #12]
 8003b1c:	f04f 30ff 	mov.w	r0, #4294967295
 8003b20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003b24:	4407      	add	r7, r0
 8003b26:	eba8 0800 	sub.w	r8, r8, r0
 8003b2a:	e7e8      	b.n	8003afe <__sflush_r+0xde>
 8003b2c:	20400001 	.word	0x20400001

08003b30 <_fflush_r>:
 8003b30:	b538      	push	{r3, r4, r5, lr}
 8003b32:	690b      	ldr	r3, [r1, #16]
 8003b34:	4605      	mov	r5, r0
 8003b36:	460c      	mov	r4, r1
 8003b38:	b1db      	cbz	r3, 8003b72 <_fflush_r+0x42>
 8003b3a:	b118      	cbz	r0, 8003b44 <_fflush_r+0x14>
 8003b3c:	6983      	ldr	r3, [r0, #24]
 8003b3e:	b90b      	cbnz	r3, 8003b44 <_fflush_r+0x14>
 8003b40:	f000 f872 	bl	8003c28 <__sinit>
 8003b44:	4b0c      	ldr	r3, [pc, #48]	; (8003b78 <_fflush_r+0x48>)
 8003b46:	429c      	cmp	r4, r3
 8003b48:	d109      	bne.n	8003b5e <_fflush_r+0x2e>
 8003b4a:	686c      	ldr	r4, [r5, #4]
 8003b4c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003b50:	b17b      	cbz	r3, 8003b72 <_fflush_r+0x42>
 8003b52:	4621      	mov	r1, r4
 8003b54:	4628      	mov	r0, r5
 8003b56:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003b5a:	f7ff bf61 	b.w	8003a20 <__sflush_r>
 8003b5e:	4b07      	ldr	r3, [pc, #28]	; (8003b7c <_fflush_r+0x4c>)
 8003b60:	429c      	cmp	r4, r3
 8003b62:	d101      	bne.n	8003b68 <_fflush_r+0x38>
 8003b64:	68ac      	ldr	r4, [r5, #8]
 8003b66:	e7f1      	b.n	8003b4c <_fflush_r+0x1c>
 8003b68:	4b05      	ldr	r3, [pc, #20]	; (8003b80 <_fflush_r+0x50>)
 8003b6a:	429c      	cmp	r4, r3
 8003b6c:	bf08      	it	eq
 8003b6e:	68ec      	ldreq	r4, [r5, #12]
 8003b70:	e7ec      	b.n	8003b4c <_fflush_r+0x1c>
 8003b72:	2000      	movs	r0, #0
 8003b74:	bd38      	pop	{r3, r4, r5, pc}
 8003b76:	bf00      	nop
 8003b78:	0800535c 	.word	0x0800535c
 8003b7c:	0800537c 	.word	0x0800537c
 8003b80:	0800533c 	.word	0x0800533c

08003b84 <fflush>:
 8003b84:	4601      	mov	r1, r0
 8003b86:	b920      	cbnz	r0, 8003b92 <fflush+0xe>
 8003b88:	4b04      	ldr	r3, [pc, #16]	; (8003b9c <fflush+0x18>)
 8003b8a:	4905      	ldr	r1, [pc, #20]	; (8003ba0 <fflush+0x1c>)
 8003b8c:	6818      	ldr	r0, [r3, #0]
 8003b8e:	f000 b8d3 	b.w	8003d38 <_fwalk_reent>
 8003b92:	4b04      	ldr	r3, [pc, #16]	; (8003ba4 <fflush+0x20>)
 8003b94:	6818      	ldr	r0, [r3, #0]
 8003b96:	f7ff bfcb 	b.w	8003b30 <_fflush_r>
 8003b9a:	bf00      	nop
 8003b9c:	08005338 	.word	0x08005338
 8003ba0:	08003b31 	.word	0x08003b31
 8003ba4:	2000000c 	.word	0x2000000c

08003ba8 <_cleanup_r>:
 8003ba8:	4901      	ldr	r1, [pc, #4]	; (8003bb0 <_cleanup_r+0x8>)
 8003baa:	f000 b8c5 	b.w	8003d38 <_fwalk_reent>
 8003bae:	bf00      	nop
 8003bb0:	08003b31 	.word	0x08003b31

08003bb4 <std.isra.0>:
 8003bb4:	2300      	movs	r3, #0
 8003bb6:	b510      	push	{r4, lr}
 8003bb8:	4604      	mov	r4, r0
 8003bba:	6003      	str	r3, [r0, #0]
 8003bbc:	6043      	str	r3, [r0, #4]
 8003bbe:	6083      	str	r3, [r0, #8]
 8003bc0:	8181      	strh	r1, [r0, #12]
 8003bc2:	6643      	str	r3, [r0, #100]	; 0x64
 8003bc4:	81c2      	strh	r2, [r0, #14]
 8003bc6:	6103      	str	r3, [r0, #16]
 8003bc8:	6143      	str	r3, [r0, #20]
 8003bca:	6183      	str	r3, [r0, #24]
 8003bcc:	4619      	mov	r1, r3
 8003bce:	2208      	movs	r2, #8
 8003bd0:	305c      	adds	r0, #92	; 0x5c
 8003bd2:	f7ff fd1a 	bl	800360a <memset>
 8003bd6:	4b05      	ldr	r3, [pc, #20]	; (8003bec <std.isra.0+0x38>)
 8003bd8:	6263      	str	r3, [r4, #36]	; 0x24
 8003bda:	4b05      	ldr	r3, [pc, #20]	; (8003bf0 <std.isra.0+0x3c>)
 8003bdc:	62a3      	str	r3, [r4, #40]	; 0x28
 8003bde:	4b05      	ldr	r3, [pc, #20]	; (8003bf4 <std.isra.0+0x40>)
 8003be0:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003be2:	4b05      	ldr	r3, [pc, #20]	; (8003bf8 <std.isra.0+0x44>)
 8003be4:	6224      	str	r4, [r4, #32]
 8003be6:	6323      	str	r3, [r4, #48]	; 0x30
 8003be8:	bd10      	pop	{r4, pc}
 8003bea:	bf00      	nop
 8003bec:	08004ca1 	.word	0x08004ca1
 8003bf0:	08004cc3 	.word	0x08004cc3
 8003bf4:	08004cfb 	.word	0x08004cfb
 8003bf8:	08004d1f 	.word	0x08004d1f

08003bfc <__sfmoreglue>:
 8003bfc:	b570      	push	{r4, r5, r6, lr}
 8003bfe:	1e4a      	subs	r2, r1, #1
 8003c00:	2568      	movs	r5, #104	; 0x68
 8003c02:	4355      	muls	r5, r2
 8003c04:	460e      	mov	r6, r1
 8003c06:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8003c0a:	f000 f96d 	bl	8003ee8 <_malloc_r>
 8003c0e:	4604      	mov	r4, r0
 8003c10:	b140      	cbz	r0, 8003c24 <__sfmoreglue+0x28>
 8003c12:	2100      	movs	r1, #0
 8003c14:	e880 0042 	stmia.w	r0, {r1, r6}
 8003c18:	300c      	adds	r0, #12
 8003c1a:	60a0      	str	r0, [r4, #8]
 8003c1c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8003c20:	f7ff fcf3 	bl	800360a <memset>
 8003c24:	4620      	mov	r0, r4
 8003c26:	bd70      	pop	{r4, r5, r6, pc}

08003c28 <__sinit>:
 8003c28:	6983      	ldr	r3, [r0, #24]
 8003c2a:	b510      	push	{r4, lr}
 8003c2c:	4604      	mov	r4, r0
 8003c2e:	bb33      	cbnz	r3, 8003c7e <__sinit+0x56>
 8003c30:	6483      	str	r3, [r0, #72]	; 0x48
 8003c32:	64c3      	str	r3, [r0, #76]	; 0x4c
 8003c34:	6503      	str	r3, [r0, #80]	; 0x50
 8003c36:	4b12      	ldr	r3, [pc, #72]	; (8003c80 <__sinit+0x58>)
 8003c38:	4a12      	ldr	r2, [pc, #72]	; (8003c84 <__sinit+0x5c>)
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	6282      	str	r2, [r0, #40]	; 0x28
 8003c3e:	4298      	cmp	r0, r3
 8003c40:	bf04      	itt	eq
 8003c42:	2301      	moveq	r3, #1
 8003c44:	6183      	streq	r3, [r0, #24]
 8003c46:	f000 f81f 	bl	8003c88 <__sfp>
 8003c4a:	6060      	str	r0, [r4, #4]
 8003c4c:	4620      	mov	r0, r4
 8003c4e:	f000 f81b 	bl	8003c88 <__sfp>
 8003c52:	60a0      	str	r0, [r4, #8]
 8003c54:	4620      	mov	r0, r4
 8003c56:	f000 f817 	bl	8003c88 <__sfp>
 8003c5a:	2200      	movs	r2, #0
 8003c5c:	60e0      	str	r0, [r4, #12]
 8003c5e:	2104      	movs	r1, #4
 8003c60:	6860      	ldr	r0, [r4, #4]
 8003c62:	f7ff ffa7 	bl	8003bb4 <std.isra.0>
 8003c66:	2201      	movs	r2, #1
 8003c68:	2109      	movs	r1, #9
 8003c6a:	68a0      	ldr	r0, [r4, #8]
 8003c6c:	f7ff ffa2 	bl	8003bb4 <std.isra.0>
 8003c70:	2202      	movs	r2, #2
 8003c72:	2112      	movs	r1, #18
 8003c74:	68e0      	ldr	r0, [r4, #12]
 8003c76:	f7ff ff9d 	bl	8003bb4 <std.isra.0>
 8003c7a:	2301      	movs	r3, #1
 8003c7c:	61a3      	str	r3, [r4, #24]
 8003c7e:	bd10      	pop	{r4, pc}
 8003c80:	08005338 	.word	0x08005338
 8003c84:	08003ba9 	.word	0x08003ba9

08003c88 <__sfp>:
 8003c88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c8a:	4b1c      	ldr	r3, [pc, #112]	; (8003cfc <__sfp+0x74>)
 8003c8c:	681e      	ldr	r6, [r3, #0]
 8003c8e:	69b3      	ldr	r3, [r6, #24]
 8003c90:	4607      	mov	r7, r0
 8003c92:	b913      	cbnz	r3, 8003c9a <__sfp+0x12>
 8003c94:	4630      	mov	r0, r6
 8003c96:	f7ff ffc7 	bl	8003c28 <__sinit>
 8003c9a:	3648      	adds	r6, #72	; 0x48
 8003c9c:	68b4      	ldr	r4, [r6, #8]
 8003c9e:	6873      	ldr	r3, [r6, #4]
 8003ca0:	3b01      	subs	r3, #1
 8003ca2:	d503      	bpl.n	8003cac <__sfp+0x24>
 8003ca4:	6833      	ldr	r3, [r6, #0]
 8003ca6:	b133      	cbz	r3, 8003cb6 <__sfp+0x2e>
 8003ca8:	6836      	ldr	r6, [r6, #0]
 8003caa:	e7f7      	b.n	8003c9c <__sfp+0x14>
 8003cac:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8003cb0:	b16d      	cbz	r5, 8003cce <__sfp+0x46>
 8003cb2:	3468      	adds	r4, #104	; 0x68
 8003cb4:	e7f4      	b.n	8003ca0 <__sfp+0x18>
 8003cb6:	2104      	movs	r1, #4
 8003cb8:	4638      	mov	r0, r7
 8003cba:	f7ff ff9f 	bl	8003bfc <__sfmoreglue>
 8003cbe:	6030      	str	r0, [r6, #0]
 8003cc0:	2800      	cmp	r0, #0
 8003cc2:	d1f1      	bne.n	8003ca8 <__sfp+0x20>
 8003cc4:	230c      	movs	r3, #12
 8003cc6:	603b      	str	r3, [r7, #0]
 8003cc8:	4604      	mov	r4, r0
 8003cca:	4620      	mov	r0, r4
 8003ccc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003cce:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003cd2:	81e3      	strh	r3, [r4, #14]
 8003cd4:	2301      	movs	r3, #1
 8003cd6:	81a3      	strh	r3, [r4, #12]
 8003cd8:	6665      	str	r5, [r4, #100]	; 0x64
 8003cda:	6025      	str	r5, [r4, #0]
 8003cdc:	60a5      	str	r5, [r4, #8]
 8003cde:	6065      	str	r5, [r4, #4]
 8003ce0:	6125      	str	r5, [r4, #16]
 8003ce2:	6165      	str	r5, [r4, #20]
 8003ce4:	61a5      	str	r5, [r4, #24]
 8003ce6:	2208      	movs	r2, #8
 8003ce8:	4629      	mov	r1, r5
 8003cea:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8003cee:	f7ff fc8c 	bl	800360a <memset>
 8003cf2:	6365      	str	r5, [r4, #52]	; 0x34
 8003cf4:	63a5      	str	r5, [r4, #56]	; 0x38
 8003cf6:	64a5      	str	r5, [r4, #72]	; 0x48
 8003cf8:	64e5      	str	r5, [r4, #76]	; 0x4c
 8003cfa:	e7e6      	b.n	8003cca <__sfp+0x42>
 8003cfc:	08005338 	.word	0x08005338

08003d00 <_fwalk>:
 8003d00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003d04:	4688      	mov	r8, r1
 8003d06:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8003d0a:	2600      	movs	r6, #0
 8003d0c:	b914      	cbnz	r4, 8003d14 <_fwalk+0x14>
 8003d0e:	4630      	mov	r0, r6
 8003d10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003d14:	68a5      	ldr	r5, [r4, #8]
 8003d16:	6867      	ldr	r7, [r4, #4]
 8003d18:	3f01      	subs	r7, #1
 8003d1a:	d501      	bpl.n	8003d20 <_fwalk+0x20>
 8003d1c:	6824      	ldr	r4, [r4, #0]
 8003d1e:	e7f5      	b.n	8003d0c <_fwalk+0xc>
 8003d20:	89ab      	ldrh	r3, [r5, #12]
 8003d22:	2b01      	cmp	r3, #1
 8003d24:	d906      	bls.n	8003d34 <_fwalk+0x34>
 8003d26:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003d2a:	3301      	adds	r3, #1
 8003d2c:	d002      	beq.n	8003d34 <_fwalk+0x34>
 8003d2e:	4628      	mov	r0, r5
 8003d30:	47c0      	blx	r8
 8003d32:	4306      	orrs	r6, r0
 8003d34:	3568      	adds	r5, #104	; 0x68
 8003d36:	e7ef      	b.n	8003d18 <_fwalk+0x18>

08003d38 <_fwalk_reent>:
 8003d38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003d3c:	4680      	mov	r8, r0
 8003d3e:	4689      	mov	r9, r1
 8003d40:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8003d44:	2600      	movs	r6, #0
 8003d46:	b914      	cbnz	r4, 8003d4e <_fwalk_reent+0x16>
 8003d48:	4630      	mov	r0, r6
 8003d4a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003d4e:	68a5      	ldr	r5, [r4, #8]
 8003d50:	6867      	ldr	r7, [r4, #4]
 8003d52:	3f01      	subs	r7, #1
 8003d54:	d501      	bpl.n	8003d5a <_fwalk_reent+0x22>
 8003d56:	6824      	ldr	r4, [r4, #0]
 8003d58:	e7f5      	b.n	8003d46 <_fwalk_reent+0xe>
 8003d5a:	89ab      	ldrh	r3, [r5, #12]
 8003d5c:	2b01      	cmp	r3, #1
 8003d5e:	d907      	bls.n	8003d70 <_fwalk_reent+0x38>
 8003d60:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003d64:	3301      	adds	r3, #1
 8003d66:	d003      	beq.n	8003d70 <_fwalk_reent+0x38>
 8003d68:	4629      	mov	r1, r5
 8003d6a:	4640      	mov	r0, r8
 8003d6c:	47c8      	blx	r9
 8003d6e:	4306      	orrs	r6, r0
 8003d70:	3568      	adds	r5, #104	; 0x68
 8003d72:	e7ee      	b.n	8003d52 <_fwalk_reent+0x1a>

08003d74 <__swhatbuf_r>:
 8003d74:	b570      	push	{r4, r5, r6, lr}
 8003d76:	460e      	mov	r6, r1
 8003d78:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003d7c:	2900      	cmp	r1, #0
 8003d7e:	b090      	sub	sp, #64	; 0x40
 8003d80:	4614      	mov	r4, r2
 8003d82:	461d      	mov	r5, r3
 8003d84:	da07      	bge.n	8003d96 <__swhatbuf_r+0x22>
 8003d86:	2300      	movs	r3, #0
 8003d88:	602b      	str	r3, [r5, #0]
 8003d8a:	89b3      	ldrh	r3, [r6, #12]
 8003d8c:	061a      	lsls	r2, r3, #24
 8003d8e:	d410      	bmi.n	8003db2 <__swhatbuf_r+0x3e>
 8003d90:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003d94:	e00e      	b.n	8003db4 <__swhatbuf_r+0x40>
 8003d96:	aa01      	add	r2, sp, #4
 8003d98:	f001 f9b8 	bl	800510c <_fstat_r>
 8003d9c:	2800      	cmp	r0, #0
 8003d9e:	dbf2      	blt.n	8003d86 <__swhatbuf_r+0x12>
 8003da0:	9a02      	ldr	r2, [sp, #8]
 8003da2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8003da6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8003daa:	425a      	negs	r2, r3
 8003dac:	415a      	adcs	r2, r3
 8003dae:	602a      	str	r2, [r5, #0]
 8003db0:	e7ee      	b.n	8003d90 <__swhatbuf_r+0x1c>
 8003db2:	2340      	movs	r3, #64	; 0x40
 8003db4:	2000      	movs	r0, #0
 8003db6:	6023      	str	r3, [r4, #0]
 8003db8:	b010      	add	sp, #64	; 0x40
 8003dba:	bd70      	pop	{r4, r5, r6, pc}

08003dbc <__smakebuf_r>:
 8003dbc:	898b      	ldrh	r3, [r1, #12]
 8003dbe:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003dc0:	079d      	lsls	r5, r3, #30
 8003dc2:	4606      	mov	r6, r0
 8003dc4:	460c      	mov	r4, r1
 8003dc6:	d507      	bpl.n	8003dd8 <__smakebuf_r+0x1c>
 8003dc8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8003dcc:	6023      	str	r3, [r4, #0]
 8003dce:	6123      	str	r3, [r4, #16]
 8003dd0:	2301      	movs	r3, #1
 8003dd2:	6163      	str	r3, [r4, #20]
 8003dd4:	b002      	add	sp, #8
 8003dd6:	bd70      	pop	{r4, r5, r6, pc}
 8003dd8:	ab01      	add	r3, sp, #4
 8003dda:	466a      	mov	r2, sp
 8003ddc:	f7ff ffca 	bl	8003d74 <__swhatbuf_r>
 8003de0:	9900      	ldr	r1, [sp, #0]
 8003de2:	4605      	mov	r5, r0
 8003de4:	4630      	mov	r0, r6
 8003de6:	f000 f87f 	bl	8003ee8 <_malloc_r>
 8003dea:	b948      	cbnz	r0, 8003e00 <__smakebuf_r+0x44>
 8003dec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003df0:	059a      	lsls	r2, r3, #22
 8003df2:	d4ef      	bmi.n	8003dd4 <__smakebuf_r+0x18>
 8003df4:	f023 0303 	bic.w	r3, r3, #3
 8003df8:	f043 0302 	orr.w	r3, r3, #2
 8003dfc:	81a3      	strh	r3, [r4, #12]
 8003dfe:	e7e3      	b.n	8003dc8 <__smakebuf_r+0xc>
 8003e00:	4b0d      	ldr	r3, [pc, #52]	; (8003e38 <__smakebuf_r+0x7c>)
 8003e02:	62b3      	str	r3, [r6, #40]	; 0x28
 8003e04:	89a3      	ldrh	r3, [r4, #12]
 8003e06:	6020      	str	r0, [r4, #0]
 8003e08:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003e0c:	81a3      	strh	r3, [r4, #12]
 8003e0e:	9b00      	ldr	r3, [sp, #0]
 8003e10:	6163      	str	r3, [r4, #20]
 8003e12:	9b01      	ldr	r3, [sp, #4]
 8003e14:	6120      	str	r0, [r4, #16]
 8003e16:	b15b      	cbz	r3, 8003e30 <__smakebuf_r+0x74>
 8003e18:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003e1c:	4630      	mov	r0, r6
 8003e1e:	f001 f987 	bl	8005130 <_isatty_r>
 8003e22:	b128      	cbz	r0, 8003e30 <__smakebuf_r+0x74>
 8003e24:	89a3      	ldrh	r3, [r4, #12]
 8003e26:	f023 0303 	bic.w	r3, r3, #3
 8003e2a:	f043 0301 	orr.w	r3, r3, #1
 8003e2e:	81a3      	strh	r3, [r4, #12]
 8003e30:	89a3      	ldrh	r3, [r4, #12]
 8003e32:	431d      	orrs	r5, r3
 8003e34:	81a5      	strh	r5, [r4, #12]
 8003e36:	e7cd      	b.n	8003dd4 <__smakebuf_r+0x18>
 8003e38:	08003ba9 	.word	0x08003ba9

08003e3c <malloc>:
 8003e3c:	4b02      	ldr	r3, [pc, #8]	; (8003e48 <malloc+0xc>)
 8003e3e:	4601      	mov	r1, r0
 8003e40:	6818      	ldr	r0, [r3, #0]
 8003e42:	f000 b851 	b.w	8003ee8 <_malloc_r>
 8003e46:	bf00      	nop
 8003e48:	2000000c 	.word	0x2000000c

08003e4c <_free_r>:
 8003e4c:	b538      	push	{r3, r4, r5, lr}
 8003e4e:	4605      	mov	r5, r0
 8003e50:	2900      	cmp	r1, #0
 8003e52:	d045      	beq.n	8003ee0 <_free_r+0x94>
 8003e54:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003e58:	1f0c      	subs	r4, r1, #4
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	bfb8      	it	lt
 8003e5e:	18e4      	addlt	r4, r4, r3
 8003e60:	f001 f9ac 	bl	80051bc <__malloc_lock>
 8003e64:	4a1f      	ldr	r2, [pc, #124]	; (8003ee4 <_free_r+0x98>)
 8003e66:	6813      	ldr	r3, [r2, #0]
 8003e68:	4610      	mov	r0, r2
 8003e6a:	b933      	cbnz	r3, 8003e7a <_free_r+0x2e>
 8003e6c:	6063      	str	r3, [r4, #4]
 8003e6e:	6014      	str	r4, [r2, #0]
 8003e70:	4628      	mov	r0, r5
 8003e72:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003e76:	f001 b9a2 	b.w	80051be <__malloc_unlock>
 8003e7a:	42a3      	cmp	r3, r4
 8003e7c:	d90c      	bls.n	8003e98 <_free_r+0x4c>
 8003e7e:	6821      	ldr	r1, [r4, #0]
 8003e80:	1862      	adds	r2, r4, r1
 8003e82:	4293      	cmp	r3, r2
 8003e84:	bf04      	itt	eq
 8003e86:	681a      	ldreq	r2, [r3, #0]
 8003e88:	685b      	ldreq	r3, [r3, #4]
 8003e8a:	6063      	str	r3, [r4, #4]
 8003e8c:	bf04      	itt	eq
 8003e8e:	1852      	addeq	r2, r2, r1
 8003e90:	6022      	streq	r2, [r4, #0]
 8003e92:	6004      	str	r4, [r0, #0]
 8003e94:	e7ec      	b.n	8003e70 <_free_r+0x24>
 8003e96:	4613      	mov	r3, r2
 8003e98:	685a      	ldr	r2, [r3, #4]
 8003e9a:	b10a      	cbz	r2, 8003ea0 <_free_r+0x54>
 8003e9c:	42a2      	cmp	r2, r4
 8003e9e:	d9fa      	bls.n	8003e96 <_free_r+0x4a>
 8003ea0:	6819      	ldr	r1, [r3, #0]
 8003ea2:	1858      	adds	r0, r3, r1
 8003ea4:	42a0      	cmp	r0, r4
 8003ea6:	d10b      	bne.n	8003ec0 <_free_r+0x74>
 8003ea8:	6820      	ldr	r0, [r4, #0]
 8003eaa:	4401      	add	r1, r0
 8003eac:	1858      	adds	r0, r3, r1
 8003eae:	4282      	cmp	r2, r0
 8003eb0:	6019      	str	r1, [r3, #0]
 8003eb2:	d1dd      	bne.n	8003e70 <_free_r+0x24>
 8003eb4:	6810      	ldr	r0, [r2, #0]
 8003eb6:	6852      	ldr	r2, [r2, #4]
 8003eb8:	605a      	str	r2, [r3, #4]
 8003eba:	4401      	add	r1, r0
 8003ebc:	6019      	str	r1, [r3, #0]
 8003ebe:	e7d7      	b.n	8003e70 <_free_r+0x24>
 8003ec0:	d902      	bls.n	8003ec8 <_free_r+0x7c>
 8003ec2:	230c      	movs	r3, #12
 8003ec4:	602b      	str	r3, [r5, #0]
 8003ec6:	e7d3      	b.n	8003e70 <_free_r+0x24>
 8003ec8:	6820      	ldr	r0, [r4, #0]
 8003eca:	1821      	adds	r1, r4, r0
 8003ecc:	428a      	cmp	r2, r1
 8003ece:	bf04      	itt	eq
 8003ed0:	6811      	ldreq	r1, [r2, #0]
 8003ed2:	6852      	ldreq	r2, [r2, #4]
 8003ed4:	6062      	str	r2, [r4, #4]
 8003ed6:	bf04      	itt	eq
 8003ed8:	1809      	addeq	r1, r1, r0
 8003eda:	6021      	streq	r1, [r4, #0]
 8003edc:	605c      	str	r4, [r3, #4]
 8003ede:	e7c7      	b.n	8003e70 <_free_r+0x24>
 8003ee0:	bd38      	pop	{r3, r4, r5, pc}
 8003ee2:	bf00      	nop
 8003ee4:	20000204 	.word	0x20000204

08003ee8 <_malloc_r>:
 8003ee8:	b570      	push	{r4, r5, r6, lr}
 8003eea:	1ccd      	adds	r5, r1, #3
 8003eec:	f025 0503 	bic.w	r5, r5, #3
 8003ef0:	3508      	adds	r5, #8
 8003ef2:	2d0c      	cmp	r5, #12
 8003ef4:	bf38      	it	cc
 8003ef6:	250c      	movcc	r5, #12
 8003ef8:	2d00      	cmp	r5, #0
 8003efa:	4606      	mov	r6, r0
 8003efc:	db01      	blt.n	8003f02 <_malloc_r+0x1a>
 8003efe:	42a9      	cmp	r1, r5
 8003f00:	d903      	bls.n	8003f0a <_malloc_r+0x22>
 8003f02:	230c      	movs	r3, #12
 8003f04:	6033      	str	r3, [r6, #0]
 8003f06:	2000      	movs	r0, #0
 8003f08:	bd70      	pop	{r4, r5, r6, pc}
 8003f0a:	f001 f957 	bl	80051bc <__malloc_lock>
 8003f0e:	4a23      	ldr	r2, [pc, #140]	; (8003f9c <_malloc_r+0xb4>)
 8003f10:	6814      	ldr	r4, [r2, #0]
 8003f12:	4621      	mov	r1, r4
 8003f14:	b991      	cbnz	r1, 8003f3c <_malloc_r+0x54>
 8003f16:	4c22      	ldr	r4, [pc, #136]	; (8003fa0 <_malloc_r+0xb8>)
 8003f18:	6823      	ldr	r3, [r4, #0]
 8003f1a:	b91b      	cbnz	r3, 8003f24 <_malloc_r+0x3c>
 8003f1c:	4630      	mov	r0, r6
 8003f1e:	f000 fe7f 	bl	8004c20 <_sbrk_r>
 8003f22:	6020      	str	r0, [r4, #0]
 8003f24:	4629      	mov	r1, r5
 8003f26:	4630      	mov	r0, r6
 8003f28:	f000 fe7a 	bl	8004c20 <_sbrk_r>
 8003f2c:	1c43      	adds	r3, r0, #1
 8003f2e:	d126      	bne.n	8003f7e <_malloc_r+0x96>
 8003f30:	230c      	movs	r3, #12
 8003f32:	6033      	str	r3, [r6, #0]
 8003f34:	4630      	mov	r0, r6
 8003f36:	f001 f942 	bl	80051be <__malloc_unlock>
 8003f3a:	e7e4      	b.n	8003f06 <_malloc_r+0x1e>
 8003f3c:	680b      	ldr	r3, [r1, #0]
 8003f3e:	1b5b      	subs	r3, r3, r5
 8003f40:	d41a      	bmi.n	8003f78 <_malloc_r+0x90>
 8003f42:	2b0b      	cmp	r3, #11
 8003f44:	d90f      	bls.n	8003f66 <_malloc_r+0x7e>
 8003f46:	600b      	str	r3, [r1, #0]
 8003f48:	50cd      	str	r5, [r1, r3]
 8003f4a:	18cc      	adds	r4, r1, r3
 8003f4c:	4630      	mov	r0, r6
 8003f4e:	f001 f936 	bl	80051be <__malloc_unlock>
 8003f52:	f104 000b 	add.w	r0, r4, #11
 8003f56:	1d23      	adds	r3, r4, #4
 8003f58:	f020 0007 	bic.w	r0, r0, #7
 8003f5c:	1ac3      	subs	r3, r0, r3
 8003f5e:	d01b      	beq.n	8003f98 <_malloc_r+0xb0>
 8003f60:	425a      	negs	r2, r3
 8003f62:	50e2      	str	r2, [r4, r3]
 8003f64:	bd70      	pop	{r4, r5, r6, pc}
 8003f66:	428c      	cmp	r4, r1
 8003f68:	bf0d      	iteet	eq
 8003f6a:	6863      	ldreq	r3, [r4, #4]
 8003f6c:	684b      	ldrne	r3, [r1, #4]
 8003f6e:	6063      	strne	r3, [r4, #4]
 8003f70:	6013      	streq	r3, [r2, #0]
 8003f72:	bf18      	it	ne
 8003f74:	460c      	movne	r4, r1
 8003f76:	e7e9      	b.n	8003f4c <_malloc_r+0x64>
 8003f78:	460c      	mov	r4, r1
 8003f7a:	6849      	ldr	r1, [r1, #4]
 8003f7c:	e7ca      	b.n	8003f14 <_malloc_r+0x2c>
 8003f7e:	1cc4      	adds	r4, r0, #3
 8003f80:	f024 0403 	bic.w	r4, r4, #3
 8003f84:	42a0      	cmp	r0, r4
 8003f86:	d005      	beq.n	8003f94 <_malloc_r+0xac>
 8003f88:	1a21      	subs	r1, r4, r0
 8003f8a:	4630      	mov	r0, r6
 8003f8c:	f000 fe48 	bl	8004c20 <_sbrk_r>
 8003f90:	3001      	adds	r0, #1
 8003f92:	d0cd      	beq.n	8003f30 <_malloc_r+0x48>
 8003f94:	6025      	str	r5, [r4, #0]
 8003f96:	e7d9      	b.n	8003f4c <_malloc_r+0x64>
 8003f98:	bd70      	pop	{r4, r5, r6, pc}
 8003f9a:	bf00      	nop
 8003f9c:	20000204 	.word	0x20000204
 8003fa0:	20000208 	.word	0x20000208

08003fa4 <__sfputc_r>:
 8003fa4:	6893      	ldr	r3, [r2, #8]
 8003fa6:	3b01      	subs	r3, #1
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	b410      	push	{r4}
 8003fac:	6093      	str	r3, [r2, #8]
 8003fae:	da09      	bge.n	8003fc4 <__sfputc_r+0x20>
 8003fb0:	6994      	ldr	r4, [r2, #24]
 8003fb2:	42a3      	cmp	r3, r4
 8003fb4:	db02      	blt.n	8003fbc <__sfputc_r+0x18>
 8003fb6:	b2cb      	uxtb	r3, r1
 8003fb8:	2b0a      	cmp	r3, #10
 8003fba:	d103      	bne.n	8003fc4 <__sfputc_r+0x20>
 8003fbc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003fc0:	f7ff bc6e 	b.w	80038a0 <__swbuf_r>
 8003fc4:	6813      	ldr	r3, [r2, #0]
 8003fc6:	1c58      	adds	r0, r3, #1
 8003fc8:	6010      	str	r0, [r2, #0]
 8003fca:	7019      	strb	r1, [r3, #0]
 8003fcc:	b2c8      	uxtb	r0, r1
 8003fce:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003fd2:	4770      	bx	lr

08003fd4 <__sfputs_r>:
 8003fd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003fd6:	4606      	mov	r6, r0
 8003fd8:	460f      	mov	r7, r1
 8003fda:	4614      	mov	r4, r2
 8003fdc:	18d5      	adds	r5, r2, r3
 8003fde:	42ac      	cmp	r4, r5
 8003fe0:	d101      	bne.n	8003fe6 <__sfputs_r+0x12>
 8003fe2:	2000      	movs	r0, #0
 8003fe4:	e007      	b.n	8003ff6 <__sfputs_r+0x22>
 8003fe6:	463a      	mov	r2, r7
 8003fe8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003fec:	4630      	mov	r0, r6
 8003fee:	f7ff ffd9 	bl	8003fa4 <__sfputc_r>
 8003ff2:	1c43      	adds	r3, r0, #1
 8003ff4:	d1f3      	bne.n	8003fde <__sfputs_r+0xa>
 8003ff6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08003ff8 <_vfiprintf_r>:
 8003ff8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003ffc:	b09d      	sub	sp, #116	; 0x74
 8003ffe:	460c      	mov	r4, r1
 8004000:	4617      	mov	r7, r2
 8004002:	9303      	str	r3, [sp, #12]
 8004004:	4606      	mov	r6, r0
 8004006:	b118      	cbz	r0, 8004010 <_vfiprintf_r+0x18>
 8004008:	6983      	ldr	r3, [r0, #24]
 800400a:	b90b      	cbnz	r3, 8004010 <_vfiprintf_r+0x18>
 800400c:	f7ff fe0c 	bl	8003c28 <__sinit>
 8004010:	4b7c      	ldr	r3, [pc, #496]	; (8004204 <_vfiprintf_r+0x20c>)
 8004012:	429c      	cmp	r4, r3
 8004014:	d157      	bne.n	80040c6 <_vfiprintf_r+0xce>
 8004016:	6874      	ldr	r4, [r6, #4]
 8004018:	89a3      	ldrh	r3, [r4, #12]
 800401a:	0718      	lsls	r0, r3, #28
 800401c:	d55d      	bpl.n	80040da <_vfiprintf_r+0xe2>
 800401e:	6923      	ldr	r3, [r4, #16]
 8004020:	2b00      	cmp	r3, #0
 8004022:	d05a      	beq.n	80040da <_vfiprintf_r+0xe2>
 8004024:	2300      	movs	r3, #0
 8004026:	9309      	str	r3, [sp, #36]	; 0x24
 8004028:	2320      	movs	r3, #32
 800402a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800402e:	2330      	movs	r3, #48	; 0x30
 8004030:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004034:	f04f 0b01 	mov.w	fp, #1
 8004038:	46b8      	mov	r8, r7
 800403a:	4645      	mov	r5, r8
 800403c:	f815 3b01 	ldrb.w	r3, [r5], #1
 8004040:	2b00      	cmp	r3, #0
 8004042:	d155      	bne.n	80040f0 <_vfiprintf_r+0xf8>
 8004044:	ebb8 0a07 	subs.w	sl, r8, r7
 8004048:	d00b      	beq.n	8004062 <_vfiprintf_r+0x6a>
 800404a:	4653      	mov	r3, sl
 800404c:	463a      	mov	r2, r7
 800404e:	4621      	mov	r1, r4
 8004050:	4630      	mov	r0, r6
 8004052:	f7ff ffbf 	bl	8003fd4 <__sfputs_r>
 8004056:	3001      	adds	r0, #1
 8004058:	f000 80c4 	beq.w	80041e4 <_vfiprintf_r+0x1ec>
 800405c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800405e:	4453      	add	r3, sl
 8004060:	9309      	str	r3, [sp, #36]	; 0x24
 8004062:	f898 3000 	ldrb.w	r3, [r8]
 8004066:	2b00      	cmp	r3, #0
 8004068:	f000 80bc 	beq.w	80041e4 <_vfiprintf_r+0x1ec>
 800406c:	2300      	movs	r3, #0
 800406e:	f04f 32ff 	mov.w	r2, #4294967295
 8004072:	9304      	str	r3, [sp, #16]
 8004074:	9307      	str	r3, [sp, #28]
 8004076:	9205      	str	r2, [sp, #20]
 8004078:	9306      	str	r3, [sp, #24]
 800407a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800407e:	931a      	str	r3, [sp, #104]	; 0x68
 8004080:	2205      	movs	r2, #5
 8004082:	7829      	ldrb	r1, [r5, #0]
 8004084:	4860      	ldr	r0, [pc, #384]	; (8004208 <_vfiprintf_r+0x210>)
 8004086:	f7fc f8a3 	bl	80001d0 <memchr>
 800408a:	f105 0801 	add.w	r8, r5, #1
 800408e:	9b04      	ldr	r3, [sp, #16]
 8004090:	2800      	cmp	r0, #0
 8004092:	d131      	bne.n	80040f8 <_vfiprintf_r+0x100>
 8004094:	06d9      	lsls	r1, r3, #27
 8004096:	bf44      	itt	mi
 8004098:	2220      	movmi	r2, #32
 800409a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800409e:	071a      	lsls	r2, r3, #28
 80040a0:	bf44      	itt	mi
 80040a2:	222b      	movmi	r2, #43	; 0x2b
 80040a4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80040a8:	782a      	ldrb	r2, [r5, #0]
 80040aa:	2a2a      	cmp	r2, #42	; 0x2a
 80040ac:	d02c      	beq.n	8004108 <_vfiprintf_r+0x110>
 80040ae:	9a07      	ldr	r2, [sp, #28]
 80040b0:	2100      	movs	r1, #0
 80040b2:	200a      	movs	r0, #10
 80040b4:	46a8      	mov	r8, r5
 80040b6:	3501      	adds	r5, #1
 80040b8:	f898 3000 	ldrb.w	r3, [r8]
 80040bc:	3b30      	subs	r3, #48	; 0x30
 80040be:	2b09      	cmp	r3, #9
 80040c0:	d96d      	bls.n	800419e <_vfiprintf_r+0x1a6>
 80040c2:	b371      	cbz	r1, 8004122 <_vfiprintf_r+0x12a>
 80040c4:	e026      	b.n	8004114 <_vfiprintf_r+0x11c>
 80040c6:	4b51      	ldr	r3, [pc, #324]	; (800420c <_vfiprintf_r+0x214>)
 80040c8:	429c      	cmp	r4, r3
 80040ca:	d101      	bne.n	80040d0 <_vfiprintf_r+0xd8>
 80040cc:	68b4      	ldr	r4, [r6, #8]
 80040ce:	e7a3      	b.n	8004018 <_vfiprintf_r+0x20>
 80040d0:	4b4f      	ldr	r3, [pc, #316]	; (8004210 <_vfiprintf_r+0x218>)
 80040d2:	429c      	cmp	r4, r3
 80040d4:	bf08      	it	eq
 80040d6:	68f4      	ldreq	r4, [r6, #12]
 80040d8:	e79e      	b.n	8004018 <_vfiprintf_r+0x20>
 80040da:	4621      	mov	r1, r4
 80040dc:	4630      	mov	r0, r6
 80040de:	f7ff fc31 	bl	8003944 <__swsetup_r>
 80040e2:	2800      	cmp	r0, #0
 80040e4:	d09e      	beq.n	8004024 <_vfiprintf_r+0x2c>
 80040e6:	f04f 30ff 	mov.w	r0, #4294967295
 80040ea:	b01d      	add	sp, #116	; 0x74
 80040ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80040f0:	2b25      	cmp	r3, #37	; 0x25
 80040f2:	d0a7      	beq.n	8004044 <_vfiprintf_r+0x4c>
 80040f4:	46a8      	mov	r8, r5
 80040f6:	e7a0      	b.n	800403a <_vfiprintf_r+0x42>
 80040f8:	4a43      	ldr	r2, [pc, #268]	; (8004208 <_vfiprintf_r+0x210>)
 80040fa:	1a80      	subs	r0, r0, r2
 80040fc:	fa0b f000 	lsl.w	r0, fp, r0
 8004100:	4318      	orrs	r0, r3
 8004102:	9004      	str	r0, [sp, #16]
 8004104:	4645      	mov	r5, r8
 8004106:	e7bb      	b.n	8004080 <_vfiprintf_r+0x88>
 8004108:	9a03      	ldr	r2, [sp, #12]
 800410a:	1d11      	adds	r1, r2, #4
 800410c:	6812      	ldr	r2, [r2, #0]
 800410e:	9103      	str	r1, [sp, #12]
 8004110:	2a00      	cmp	r2, #0
 8004112:	db01      	blt.n	8004118 <_vfiprintf_r+0x120>
 8004114:	9207      	str	r2, [sp, #28]
 8004116:	e004      	b.n	8004122 <_vfiprintf_r+0x12a>
 8004118:	4252      	negs	r2, r2
 800411a:	f043 0302 	orr.w	r3, r3, #2
 800411e:	9207      	str	r2, [sp, #28]
 8004120:	9304      	str	r3, [sp, #16]
 8004122:	f898 3000 	ldrb.w	r3, [r8]
 8004126:	2b2e      	cmp	r3, #46	; 0x2e
 8004128:	d110      	bne.n	800414c <_vfiprintf_r+0x154>
 800412a:	f898 3001 	ldrb.w	r3, [r8, #1]
 800412e:	2b2a      	cmp	r3, #42	; 0x2a
 8004130:	f108 0101 	add.w	r1, r8, #1
 8004134:	d137      	bne.n	80041a6 <_vfiprintf_r+0x1ae>
 8004136:	9b03      	ldr	r3, [sp, #12]
 8004138:	1d1a      	adds	r2, r3, #4
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	9203      	str	r2, [sp, #12]
 800413e:	2b00      	cmp	r3, #0
 8004140:	bfb8      	it	lt
 8004142:	f04f 33ff 	movlt.w	r3, #4294967295
 8004146:	f108 0802 	add.w	r8, r8, #2
 800414a:	9305      	str	r3, [sp, #20]
 800414c:	4d31      	ldr	r5, [pc, #196]	; (8004214 <_vfiprintf_r+0x21c>)
 800414e:	f898 1000 	ldrb.w	r1, [r8]
 8004152:	2203      	movs	r2, #3
 8004154:	4628      	mov	r0, r5
 8004156:	f7fc f83b 	bl	80001d0 <memchr>
 800415a:	b140      	cbz	r0, 800416e <_vfiprintf_r+0x176>
 800415c:	2340      	movs	r3, #64	; 0x40
 800415e:	1b40      	subs	r0, r0, r5
 8004160:	fa03 f000 	lsl.w	r0, r3, r0
 8004164:	9b04      	ldr	r3, [sp, #16]
 8004166:	4303      	orrs	r3, r0
 8004168:	9304      	str	r3, [sp, #16]
 800416a:	f108 0801 	add.w	r8, r8, #1
 800416e:	f898 1000 	ldrb.w	r1, [r8]
 8004172:	4829      	ldr	r0, [pc, #164]	; (8004218 <_vfiprintf_r+0x220>)
 8004174:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004178:	2206      	movs	r2, #6
 800417a:	f108 0701 	add.w	r7, r8, #1
 800417e:	f7fc f827 	bl	80001d0 <memchr>
 8004182:	2800      	cmp	r0, #0
 8004184:	d034      	beq.n	80041f0 <_vfiprintf_r+0x1f8>
 8004186:	4b25      	ldr	r3, [pc, #148]	; (800421c <_vfiprintf_r+0x224>)
 8004188:	bb03      	cbnz	r3, 80041cc <_vfiprintf_r+0x1d4>
 800418a:	9b03      	ldr	r3, [sp, #12]
 800418c:	3307      	adds	r3, #7
 800418e:	f023 0307 	bic.w	r3, r3, #7
 8004192:	3308      	adds	r3, #8
 8004194:	9303      	str	r3, [sp, #12]
 8004196:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004198:	444b      	add	r3, r9
 800419a:	9309      	str	r3, [sp, #36]	; 0x24
 800419c:	e74c      	b.n	8004038 <_vfiprintf_r+0x40>
 800419e:	fb00 3202 	mla	r2, r0, r2, r3
 80041a2:	2101      	movs	r1, #1
 80041a4:	e786      	b.n	80040b4 <_vfiprintf_r+0xbc>
 80041a6:	2300      	movs	r3, #0
 80041a8:	9305      	str	r3, [sp, #20]
 80041aa:	4618      	mov	r0, r3
 80041ac:	250a      	movs	r5, #10
 80041ae:	4688      	mov	r8, r1
 80041b0:	3101      	adds	r1, #1
 80041b2:	f898 2000 	ldrb.w	r2, [r8]
 80041b6:	3a30      	subs	r2, #48	; 0x30
 80041b8:	2a09      	cmp	r2, #9
 80041ba:	d903      	bls.n	80041c4 <_vfiprintf_r+0x1cc>
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d0c5      	beq.n	800414c <_vfiprintf_r+0x154>
 80041c0:	9005      	str	r0, [sp, #20]
 80041c2:	e7c3      	b.n	800414c <_vfiprintf_r+0x154>
 80041c4:	fb05 2000 	mla	r0, r5, r0, r2
 80041c8:	2301      	movs	r3, #1
 80041ca:	e7f0      	b.n	80041ae <_vfiprintf_r+0x1b6>
 80041cc:	ab03      	add	r3, sp, #12
 80041ce:	9300      	str	r3, [sp, #0]
 80041d0:	4622      	mov	r2, r4
 80041d2:	4b13      	ldr	r3, [pc, #76]	; (8004220 <_vfiprintf_r+0x228>)
 80041d4:	a904      	add	r1, sp, #16
 80041d6:	4630      	mov	r0, r6
 80041d8:	f3af 8000 	nop.w
 80041dc:	f1b0 3fff 	cmp.w	r0, #4294967295
 80041e0:	4681      	mov	r9, r0
 80041e2:	d1d8      	bne.n	8004196 <_vfiprintf_r+0x19e>
 80041e4:	89a3      	ldrh	r3, [r4, #12]
 80041e6:	065b      	lsls	r3, r3, #25
 80041e8:	f53f af7d 	bmi.w	80040e6 <_vfiprintf_r+0xee>
 80041ec:	9809      	ldr	r0, [sp, #36]	; 0x24
 80041ee:	e77c      	b.n	80040ea <_vfiprintf_r+0xf2>
 80041f0:	ab03      	add	r3, sp, #12
 80041f2:	9300      	str	r3, [sp, #0]
 80041f4:	4622      	mov	r2, r4
 80041f6:	4b0a      	ldr	r3, [pc, #40]	; (8004220 <_vfiprintf_r+0x228>)
 80041f8:	a904      	add	r1, sp, #16
 80041fa:	4630      	mov	r0, r6
 80041fc:	f000 f888 	bl	8004310 <_printf_i>
 8004200:	e7ec      	b.n	80041dc <_vfiprintf_r+0x1e4>
 8004202:	bf00      	nop
 8004204:	0800535c 	.word	0x0800535c
 8004208:	0800539c 	.word	0x0800539c
 800420c:	0800537c 	.word	0x0800537c
 8004210:	0800533c 	.word	0x0800533c
 8004214:	080053a2 	.word	0x080053a2
 8004218:	080053a6 	.word	0x080053a6
 800421c:	00000000 	.word	0x00000000
 8004220:	08003fd5 	.word	0x08003fd5

08004224 <_printf_common>:
 8004224:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004228:	4691      	mov	r9, r2
 800422a:	461f      	mov	r7, r3
 800422c:	688a      	ldr	r2, [r1, #8]
 800422e:	690b      	ldr	r3, [r1, #16]
 8004230:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004234:	4293      	cmp	r3, r2
 8004236:	bfb8      	it	lt
 8004238:	4613      	movlt	r3, r2
 800423a:	f8c9 3000 	str.w	r3, [r9]
 800423e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004242:	4606      	mov	r6, r0
 8004244:	460c      	mov	r4, r1
 8004246:	b112      	cbz	r2, 800424e <_printf_common+0x2a>
 8004248:	3301      	adds	r3, #1
 800424a:	f8c9 3000 	str.w	r3, [r9]
 800424e:	6823      	ldr	r3, [r4, #0]
 8004250:	0699      	lsls	r1, r3, #26
 8004252:	bf42      	ittt	mi
 8004254:	f8d9 3000 	ldrmi.w	r3, [r9]
 8004258:	3302      	addmi	r3, #2
 800425a:	f8c9 3000 	strmi.w	r3, [r9]
 800425e:	6825      	ldr	r5, [r4, #0]
 8004260:	f015 0506 	ands.w	r5, r5, #6
 8004264:	d107      	bne.n	8004276 <_printf_common+0x52>
 8004266:	f104 0a19 	add.w	sl, r4, #25
 800426a:	68e3      	ldr	r3, [r4, #12]
 800426c:	f8d9 2000 	ldr.w	r2, [r9]
 8004270:	1a9b      	subs	r3, r3, r2
 8004272:	429d      	cmp	r5, r3
 8004274:	db29      	blt.n	80042ca <_printf_common+0xa6>
 8004276:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800427a:	6822      	ldr	r2, [r4, #0]
 800427c:	3300      	adds	r3, #0
 800427e:	bf18      	it	ne
 8004280:	2301      	movne	r3, #1
 8004282:	0692      	lsls	r2, r2, #26
 8004284:	d42e      	bmi.n	80042e4 <_printf_common+0xc0>
 8004286:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800428a:	4639      	mov	r1, r7
 800428c:	4630      	mov	r0, r6
 800428e:	47c0      	blx	r8
 8004290:	3001      	adds	r0, #1
 8004292:	d021      	beq.n	80042d8 <_printf_common+0xb4>
 8004294:	6823      	ldr	r3, [r4, #0]
 8004296:	68e5      	ldr	r5, [r4, #12]
 8004298:	f8d9 2000 	ldr.w	r2, [r9]
 800429c:	f003 0306 	and.w	r3, r3, #6
 80042a0:	2b04      	cmp	r3, #4
 80042a2:	bf08      	it	eq
 80042a4:	1aad      	subeq	r5, r5, r2
 80042a6:	68a3      	ldr	r3, [r4, #8]
 80042a8:	6922      	ldr	r2, [r4, #16]
 80042aa:	bf0c      	ite	eq
 80042ac:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80042b0:	2500      	movne	r5, #0
 80042b2:	4293      	cmp	r3, r2
 80042b4:	bfc4      	itt	gt
 80042b6:	1a9b      	subgt	r3, r3, r2
 80042b8:	18ed      	addgt	r5, r5, r3
 80042ba:	f04f 0900 	mov.w	r9, #0
 80042be:	341a      	adds	r4, #26
 80042c0:	454d      	cmp	r5, r9
 80042c2:	d11b      	bne.n	80042fc <_printf_common+0xd8>
 80042c4:	2000      	movs	r0, #0
 80042c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80042ca:	2301      	movs	r3, #1
 80042cc:	4652      	mov	r2, sl
 80042ce:	4639      	mov	r1, r7
 80042d0:	4630      	mov	r0, r6
 80042d2:	47c0      	blx	r8
 80042d4:	3001      	adds	r0, #1
 80042d6:	d103      	bne.n	80042e0 <_printf_common+0xbc>
 80042d8:	f04f 30ff 	mov.w	r0, #4294967295
 80042dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80042e0:	3501      	adds	r5, #1
 80042e2:	e7c2      	b.n	800426a <_printf_common+0x46>
 80042e4:	18e1      	adds	r1, r4, r3
 80042e6:	1c5a      	adds	r2, r3, #1
 80042e8:	2030      	movs	r0, #48	; 0x30
 80042ea:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80042ee:	4422      	add	r2, r4
 80042f0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80042f4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80042f8:	3302      	adds	r3, #2
 80042fa:	e7c4      	b.n	8004286 <_printf_common+0x62>
 80042fc:	2301      	movs	r3, #1
 80042fe:	4622      	mov	r2, r4
 8004300:	4639      	mov	r1, r7
 8004302:	4630      	mov	r0, r6
 8004304:	47c0      	blx	r8
 8004306:	3001      	adds	r0, #1
 8004308:	d0e6      	beq.n	80042d8 <_printf_common+0xb4>
 800430a:	f109 0901 	add.w	r9, r9, #1
 800430e:	e7d7      	b.n	80042c0 <_printf_common+0x9c>

08004310 <_printf_i>:
 8004310:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004314:	4617      	mov	r7, r2
 8004316:	7e0a      	ldrb	r2, [r1, #24]
 8004318:	b085      	sub	sp, #20
 800431a:	2a6e      	cmp	r2, #110	; 0x6e
 800431c:	4698      	mov	r8, r3
 800431e:	4606      	mov	r6, r0
 8004320:	460c      	mov	r4, r1
 8004322:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004324:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 8004328:	f000 80bc 	beq.w	80044a4 <_printf_i+0x194>
 800432c:	d81a      	bhi.n	8004364 <_printf_i+0x54>
 800432e:	2a63      	cmp	r2, #99	; 0x63
 8004330:	d02e      	beq.n	8004390 <_printf_i+0x80>
 8004332:	d80a      	bhi.n	800434a <_printf_i+0x3a>
 8004334:	2a00      	cmp	r2, #0
 8004336:	f000 80c8 	beq.w	80044ca <_printf_i+0x1ba>
 800433a:	2a58      	cmp	r2, #88	; 0x58
 800433c:	f000 808a 	beq.w	8004454 <_printf_i+0x144>
 8004340:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004344:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 8004348:	e02a      	b.n	80043a0 <_printf_i+0x90>
 800434a:	2a64      	cmp	r2, #100	; 0x64
 800434c:	d001      	beq.n	8004352 <_printf_i+0x42>
 800434e:	2a69      	cmp	r2, #105	; 0x69
 8004350:	d1f6      	bne.n	8004340 <_printf_i+0x30>
 8004352:	6821      	ldr	r1, [r4, #0]
 8004354:	681a      	ldr	r2, [r3, #0]
 8004356:	f011 0f80 	tst.w	r1, #128	; 0x80
 800435a:	d023      	beq.n	80043a4 <_printf_i+0x94>
 800435c:	1d11      	adds	r1, r2, #4
 800435e:	6019      	str	r1, [r3, #0]
 8004360:	6813      	ldr	r3, [r2, #0]
 8004362:	e027      	b.n	80043b4 <_printf_i+0xa4>
 8004364:	2a73      	cmp	r2, #115	; 0x73
 8004366:	f000 80b4 	beq.w	80044d2 <_printf_i+0x1c2>
 800436a:	d808      	bhi.n	800437e <_printf_i+0x6e>
 800436c:	2a6f      	cmp	r2, #111	; 0x6f
 800436e:	d02a      	beq.n	80043c6 <_printf_i+0xb6>
 8004370:	2a70      	cmp	r2, #112	; 0x70
 8004372:	d1e5      	bne.n	8004340 <_printf_i+0x30>
 8004374:	680a      	ldr	r2, [r1, #0]
 8004376:	f042 0220 	orr.w	r2, r2, #32
 800437a:	600a      	str	r2, [r1, #0]
 800437c:	e003      	b.n	8004386 <_printf_i+0x76>
 800437e:	2a75      	cmp	r2, #117	; 0x75
 8004380:	d021      	beq.n	80043c6 <_printf_i+0xb6>
 8004382:	2a78      	cmp	r2, #120	; 0x78
 8004384:	d1dc      	bne.n	8004340 <_printf_i+0x30>
 8004386:	2278      	movs	r2, #120	; 0x78
 8004388:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 800438c:	496e      	ldr	r1, [pc, #440]	; (8004548 <_printf_i+0x238>)
 800438e:	e064      	b.n	800445a <_printf_i+0x14a>
 8004390:	681a      	ldr	r2, [r3, #0]
 8004392:	f101 0542 	add.w	r5, r1, #66	; 0x42
 8004396:	1d11      	adds	r1, r2, #4
 8004398:	6019      	str	r1, [r3, #0]
 800439a:	6813      	ldr	r3, [r2, #0]
 800439c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80043a0:	2301      	movs	r3, #1
 80043a2:	e0a3      	b.n	80044ec <_printf_i+0x1dc>
 80043a4:	f011 0f40 	tst.w	r1, #64	; 0x40
 80043a8:	f102 0104 	add.w	r1, r2, #4
 80043ac:	6019      	str	r1, [r3, #0]
 80043ae:	d0d7      	beq.n	8004360 <_printf_i+0x50>
 80043b0:	f9b2 3000 	ldrsh.w	r3, [r2]
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	da03      	bge.n	80043c0 <_printf_i+0xb0>
 80043b8:	222d      	movs	r2, #45	; 0x2d
 80043ba:	425b      	negs	r3, r3
 80043bc:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80043c0:	4962      	ldr	r1, [pc, #392]	; (800454c <_printf_i+0x23c>)
 80043c2:	220a      	movs	r2, #10
 80043c4:	e017      	b.n	80043f6 <_printf_i+0xe6>
 80043c6:	6820      	ldr	r0, [r4, #0]
 80043c8:	6819      	ldr	r1, [r3, #0]
 80043ca:	f010 0f80 	tst.w	r0, #128	; 0x80
 80043ce:	d003      	beq.n	80043d8 <_printf_i+0xc8>
 80043d0:	1d08      	adds	r0, r1, #4
 80043d2:	6018      	str	r0, [r3, #0]
 80043d4:	680b      	ldr	r3, [r1, #0]
 80043d6:	e006      	b.n	80043e6 <_printf_i+0xd6>
 80043d8:	f010 0f40 	tst.w	r0, #64	; 0x40
 80043dc:	f101 0004 	add.w	r0, r1, #4
 80043e0:	6018      	str	r0, [r3, #0]
 80043e2:	d0f7      	beq.n	80043d4 <_printf_i+0xc4>
 80043e4:	880b      	ldrh	r3, [r1, #0]
 80043e6:	4959      	ldr	r1, [pc, #356]	; (800454c <_printf_i+0x23c>)
 80043e8:	2a6f      	cmp	r2, #111	; 0x6f
 80043ea:	bf14      	ite	ne
 80043ec:	220a      	movne	r2, #10
 80043ee:	2208      	moveq	r2, #8
 80043f0:	2000      	movs	r0, #0
 80043f2:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 80043f6:	6865      	ldr	r5, [r4, #4]
 80043f8:	60a5      	str	r5, [r4, #8]
 80043fa:	2d00      	cmp	r5, #0
 80043fc:	f2c0 809c 	blt.w	8004538 <_printf_i+0x228>
 8004400:	6820      	ldr	r0, [r4, #0]
 8004402:	f020 0004 	bic.w	r0, r0, #4
 8004406:	6020      	str	r0, [r4, #0]
 8004408:	2b00      	cmp	r3, #0
 800440a:	d13f      	bne.n	800448c <_printf_i+0x17c>
 800440c:	2d00      	cmp	r5, #0
 800440e:	f040 8095 	bne.w	800453c <_printf_i+0x22c>
 8004412:	4675      	mov	r5, lr
 8004414:	2a08      	cmp	r2, #8
 8004416:	d10b      	bne.n	8004430 <_printf_i+0x120>
 8004418:	6823      	ldr	r3, [r4, #0]
 800441a:	07da      	lsls	r2, r3, #31
 800441c:	d508      	bpl.n	8004430 <_printf_i+0x120>
 800441e:	6923      	ldr	r3, [r4, #16]
 8004420:	6862      	ldr	r2, [r4, #4]
 8004422:	429a      	cmp	r2, r3
 8004424:	bfde      	ittt	le
 8004426:	2330      	movle	r3, #48	; 0x30
 8004428:	f805 3c01 	strble.w	r3, [r5, #-1]
 800442c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004430:	ebae 0305 	sub.w	r3, lr, r5
 8004434:	6123      	str	r3, [r4, #16]
 8004436:	f8cd 8000 	str.w	r8, [sp]
 800443a:	463b      	mov	r3, r7
 800443c:	aa03      	add	r2, sp, #12
 800443e:	4621      	mov	r1, r4
 8004440:	4630      	mov	r0, r6
 8004442:	f7ff feef 	bl	8004224 <_printf_common>
 8004446:	3001      	adds	r0, #1
 8004448:	d155      	bne.n	80044f6 <_printf_i+0x1e6>
 800444a:	f04f 30ff 	mov.w	r0, #4294967295
 800444e:	b005      	add	sp, #20
 8004450:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004454:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 8004458:	493c      	ldr	r1, [pc, #240]	; (800454c <_printf_i+0x23c>)
 800445a:	6822      	ldr	r2, [r4, #0]
 800445c:	6818      	ldr	r0, [r3, #0]
 800445e:	f012 0f80 	tst.w	r2, #128	; 0x80
 8004462:	f100 0504 	add.w	r5, r0, #4
 8004466:	601d      	str	r5, [r3, #0]
 8004468:	d001      	beq.n	800446e <_printf_i+0x15e>
 800446a:	6803      	ldr	r3, [r0, #0]
 800446c:	e002      	b.n	8004474 <_printf_i+0x164>
 800446e:	0655      	lsls	r5, r2, #25
 8004470:	d5fb      	bpl.n	800446a <_printf_i+0x15a>
 8004472:	8803      	ldrh	r3, [r0, #0]
 8004474:	07d0      	lsls	r0, r2, #31
 8004476:	bf44      	itt	mi
 8004478:	f042 0220 	orrmi.w	r2, r2, #32
 800447c:	6022      	strmi	r2, [r4, #0]
 800447e:	b91b      	cbnz	r3, 8004488 <_printf_i+0x178>
 8004480:	6822      	ldr	r2, [r4, #0]
 8004482:	f022 0220 	bic.w	r2, r2, #32
 8004486:	6022      	str	r2, [r4, #0]
 8004488:	2210      	movs	r2, #16
 800448a:	e7b1      	b.n	80043f0 <_printf_i+0xe0>
 800448c:	4675      	mov	r5, lr
 800448e:	fbb3 f0f2 	udiv	r0, r3, r2
 8004492:	fb02 3310 	mls	r3, r2, r0, r3
 8004496:	5ccb      	ldrb	r3, [r1, r3]
 8004498:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800449c:	4603      	mov	r3, r0
 800449e:	2800      	cmp	r0, #0
 80044a0:	d1f5      	bne.n	800448e <_printf_i+0x17e>
 80044a2:	e7b7      	b.n	8004414 <_printf_i+0x104>
 80044a4:	6808      	ldr	r0, [r1, #0]
 80044a6:	681a      	ldr	r2, [r3, #0]
 80044a8:	6949      	ldr	r1, [r1, #20]
 80044aa:	f010 0f80 	tst.w	r0, #128	; 0x80
 80044ae:	d004      	beq.n	80044ba <_printf_i+0x1aa>
 80044b0:	1d10      	adds	r0, r2, #4
 80044b2:	6018      	str	r0, [r3, #0]
 80044b4:	6813      	ldr	r3, [r2, #0]
 80044b6:	6019      	str	r1, [r3, #0]
 80044b8:	e007      	b.n	80044ca <_printf_i+0x1ba>
 80044ba:	f010 0f40 	tst.w	r0, #64	; 0x40
 80044be:	f102 0004 	add.w	r0, r2, #4
 80044c2:	6018      	str	r0, [r3, #0]
 80044c4:	6813      	ldr	r3, [r2, #0]
 80044c6:	d0f6      	beq.n	80044b6 <_printf_i+0x1a6>
 80044c8:	8019      	strh	r1, [r3, #0]
 80044ca:	2300      	movs	r3, #0
 80044cc:	6123      	str	r3, [r4, #16]
 80044ce:	4675      	mov	r5, lr
 80044d0:	e7b1      	b.n	8004436 <_printf_i+0x126>
 80044d2:	681a      	ldr	r2, [r3, #0]
 80044d4:	1d11      	adds	r1, r2, #4
 80044d6:	6019      	str	r1, [r3, #0]
 80044d8:	6815      	ldr	r5, [r2, #0]
 80044da:	6862      	ldr	r2, [r4, #4]
 80044dc:	2100      	movs	r1, #0
 80044de:	4628      	mov	r0, r5
 80044e0:	f7fb fe76 	bl	80001d0 <memchr>
 80044e4:	b108      	cbz	r0, 80044ea <_printf_i+0x1da>
 80044e6:	1b40      	subs	r0, r0, r5
 80044e8:	6060      	str	r0, [r4, #4]
 80044ea:	6863      	ldr	r3, [r4, #4]
 80044ec:	6123      	str	r3, [r4, #16]
 80044ee:	2300      	movs	r3, #0
 80044f0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80044f4:	e79f      	b.n	8004436 <_printf_i+0x126>
 80044f6:	6923      	ldr	r3, [r4, #16]
 80044f8:	462a      	mov	r2, r5
 80044fa:	4639      	mov	r1, r7
 80044fc:	4630      	mov	r0, r6
 80044fe:	47c0      	blx	r8
 8004500:	3001      	adds	r0, #1
 8004502:	d0a2      	beq.n	800444a <_printf_i+0x13a>
 8004504:	6823      	ldr	r3, [r4, #0]
 8004506:	079b      	lsls	r3, r3, #30
 8004508:	d507      	bpl.n	800451a <_printf_i+0x20a>
 800450a:	2500      	movs	r5, #0
 800450c:	f104 0919 	add.w	r9, r4, #25
 8004510:	68e3      	ldr	r3, [r4, #12]
 8004512:	9a03      	ldr	r2, [sp, #12]
 8004514:	1a9b      	subs	r3, r3, r2
 8004516:	429d      	cmp	r5, r3
 8004518:	db05      	blt.n	8004526 <_printf_i+0x216>
 800451a:	68e0      	ldr	r0, [r4, #12]
 800451c:	9b03      	ldr	r3, [sp, #12]
 800451e:	4298      	cmp	r0, r3
 8004520:	bfb8      	it	lt
 8004522:	4618      	movlt	r0, r3
 8004524:	e793      	b.n	800444e <_printf_i+0x13e>
 8004526:	2301      	movs	r3, #1
 8004528:	464a      	mov	r2, r9
 800452a:	4639      	mov	r1, r7
 800452c:	4630      	mov	r0, r6
 800452e:	47c0      	blx	r8
 8004530:	3001      	adds	r0, #1
 8004532:	d08a      	beq.n	800444a <_printf_i+0x13a>
 8004534:	3501      	adds	r5, #1
 8004536:	e7eb      	b.n	8004510 <_printf_i+0x200>
 8004538:	2b00      	cmp	r3, #0
 800453a:	d1a7      	bne.n	800448c <_printf_i+0x17c>
 800453c:	780b      	ldrb	r3, [r1, #0]
 800453e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004542:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004546:	e765      	b.n	8004414 <_printf_i+0x104>
 8004548:	080053be 	.word	0x080053be
 800454c:	080053ad 	.word	0x080053ad

08004550 <__svfiscanf_r>:
 8004550:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004554:	f5ad 7d25 	sub.w	sp, sp, #660	; 0x294
 8004558:	f10d 080c 	add.w	r8, sp, #12
 800455c:	9301      	str	r3, [sp, #4]
 800455e:	2300      	movs	r3, #0
 8004560:	9346      	str	r3, [sp, #280]	; 0x118
 8004562:	9347      	str	r3, [sp, #284]	; 0x11c
 8004564:	4ba0      	ldr	r3, [pc, #640]	; (80047e8 <__svfiscanf_r+0x298>)
 8004566:	93a2      	str	r3, [sp, #648]	; 0x288
 8004568:	f8df 9284 	ldr.w	r9, [pc, #644]	; 80047f0 <__svfiscanf_r+0x2a0>
 800456c:	4b9f      	ldr	r3, [pc, #636]	; (80047ec <__svfiscanf_r+0x29c>)
 800456e:	f8cd 8120 	str.w	r8, [sp, #288]	; 0x120
 8004572:	4606      	mov	r6, r0
 8004574:	460c      	mov	r4, r1
 8004576:	93a3      	str	r3, [sp, #652]	; 0x28c
 8004578:	4692      	mov	sl, r2
 800457a:	270a      	movs	r7, #10
 800457c:	f89a 3000 	ldrb.w	r3, [sl]
 8004580:	2b00      	cmp	r3, #0
 8004582:	f000 812f 	beq.w	80047e4 <__svfiscanf_r+0x294>
 8004586:	f000 fde7 	bl	8005158 <__locale_ctype_ptr>
 800458a:	f89a b000 	ldrb.w	fp, [sl]
 800458e:	4458      	add	r0, fp
 8004590:	7843      	ldrb	r3, [r0, #1]
 8004592:	f013 0308 	ands.w	r3, r3, #8
 8004596:	d143      	bne.n	8004620 <__svfiscanf_r+0xd0>
 8004598:	f1bb 0f25 	cmp.w	fp, #37	; 0x25
 800459c:	f10a 0501 	add.w	r5, sl, #1
 80045a0:	f040 8099 	bne.w	80046d6 <__svfiscanf_r+0x186>
 80045a4:	9345      	str	r3, [sp, #276]	; 0x114
 80045a6:	9343      	str	r3, [sp, #268]	; 0x10c
 80045a8:	f89a 3001 	ldrb.w	r3, [sl, #1]
 80045ac:	2b2a      	cmp	r3, #42	; 0x2a
 80045ae:	d103      	bne.n	80045b8 <__svfiscanf_r+0x68>
 80045b0:	2310      	movs	r3, #16
 80045b2:	9343      	str	r3, [sp, #268]	; 0x10c
 80045b4:	f10a 0502 	add.w	r5, sl, #2
 80045b8:	7829      	ldrb	r1, [r5, #0]
 80045ba:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 80045be:	2a09      	cmp	r2, #9
 80045c0:	46aa      	mov	sl, r5
 80045c2:	f105 0501 	add.w	r5, r5, #1
 80045c6:	d941      	bls.n	800464c <__svfiscanf_r+0xfc>
 80045c8:	2203      	movs	r2, #3
 80045ca:	4889      	ldr	r0, [pc, #548]	; (80047f0 <__svfiscanf_r+0x2a0>)
 80045cc:	f7fb fe00 	bl	80001d0 <memchr>
 80045d0:	b138      	cbz	r0, 80045e2 <__svfiscanf_r+0x92>
 80045d2:	eba0 0309 	sub.w	r3, r0, r9
 80045d6:	2001      	movs	r0, #1
 80045d8:	4098      	lsls	r0, r3
 80045da:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 80045dc:	4318      	orrs	r0, r3
 80045de:	9043      	str	r0, [sp, #268]	; 0x10c
 80045e0:	46aa      	mov	sl, r5
 80045e2:	f89a 3000 	ldrb.w	r3, [sl]
 80045e6:	2b67      	cmp	r3, #103	; 0x67
 80045e8:	f10a 0501 	add.w	r5, sl, #1
 80045ec:	d84a      	bhi.n	8004684 <__svfiscanf_r+0x134>
 80045ee:	2b65      	cmp	r3, #101	; 0x65
 80045f0:	f080 80b7 	bcs.w	8004762 <__svfiscanf_r+0x212>
 80045f4:	2b47      	cmp	r3, #71	; 0x47
 80045f6:	d82f      	bhi.n	8004658 <__svfiscanf_r+0x108>
 80045f8:	2b45      	cmp	r3, #69	; 0x45
 80045fa:	f080 80b2 	bcs.w	8004762 <__svfiscanf_r+0x212>
 80045fe:	2b00      	cmp	r3, #0
 8004600:	f000 8082 	beq.w	8004708 <__svfiscanf_r+0x1b8>
 8004604:	2b25      	cmp	r3, #37	; 0x25
 8004606:	d066      	beq.n	80046d6 <__svfiscanf_r+0x186>
 8004608:	2303      	movs	r3, #3
 800460a:	9349      	str	r3, [sp, #292]	; 0x124
 800460c:	9744      	str	r7, [sp, #272]	; 0x110
 800460e:	e045      	b.n	800469c <__svfiscanf_r+0x14c>
 8004610:	9947      	ldr	r1, [sp, #284]	; 0x11c
 8004612:	3101      	adds	r1, #1
 8004614:	9147      	str	r1, [sp, #284]	; 0x11c
 8004616:	6861      	ldr	r1, [r4, #4]
 8004618:	3301      	adds	r3, #1
 800461a:	3901      	subs	r1, #1
 800461c:	6061      	str	r1, [r4, #4]
 800461e:	6023      	str	r3, [r4, #0]
 8004620:	6863      	ldr	r3, [r4, #4]
 8004622:	2b00      	cmp	r3, #0
 8004624:	dd0b      	ble.n	800463e <__svfiscanf_r+0xee>
 8004626:	f000 fd97 	bl	8005158 <__locale_ctype_ptr>
 800462a:	6823      	ldr	r3, [r4, #0]
 800462c:	7819      	ldrb	r1, [r3, #0]
 800462e:	4408      	add	r0, r1
 8004630:	7841      	ldrb	r1, [r0, #1]
 8004632:	070d      	lsls	r5, r1, #28
 8004634:	d4ec      	bmi.n	8004610 <__svfiscanf_r+0xc0>
 8004636:	f10a 0501 	add.w	r5, sl, #1
 800463a:	46aa      	mov	sl, r5
 800463c:	e79e      	b.n	800457c <__svfiscanf_r+0x2c>
 800463e:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 8004640:	4621      	mov	r1, r4
 8004642:	4630      	mov	r0, r6
 8004644:	4798      	blx	r3
 8004646:	2800      	cmp	r0, #0
 8004648:	d0ed      	beq.n	8004626 <__svfiscanf_r+0xd6>
 800464a:	e7f4      	b.n	8004636 <__svfiscanf_r+0xe6>
 800464c:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800464e:	fb07 1303 	mla	r3, r7, r3, r1
 8004652:	3b30      	subs	r3, #48	; 0x30
 8004654:	9345      	str	r3, [sp, #276]	; 0x114
 8004656:	e7af      	b.n	80045b8 <__svfiscanf_r+0x68>
 8004658:	2b5b      	cmp	r3, #91	; 0x5b
 800465a:	d061      	beq.n	8004720 <__svfiscanf_r+0x1d0>
 800465c:	d80c      	bhi.n	8004678 <__svfiscanf_r+0x128>
 800465e:	2b58      	cmp	r3, #88	; 0x58
 8004660:	d1d2      	bne.n	8004608 <__svfiscanf_r+0xb8>
 8004662:	9a43      	ldr	r2, [sp, #268]	; 0x10c
 8004664:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004668:	9243      	str	r2, [sp, #268]	; 0x10c
 800466a:	2210      	movs	r2, #16
 800466c:	9244      	str	r2, [sp, #272]	; 0x110
 800466e:	2b6f      	cmp	r3, #111	; 0x6f
 8004670:	bfb4      	ite	lt
 8004672:	2303      	movlt	r3, #3
 8004674:	2304      	movge	r3, #4
 8004676:	e010      	b.n	800469a <__svfiscanf_r+0x14a>
 8004678:	2b63      	cmp	r3, #99	; 0x63
 800467a:	d05c      	beq.n	8004736 <__svfiscanf_r+0x1e6>
 800467c:	2b64      	cmp	r3, #100	; 0x64
 800467e:	d1c3      	bne.n	8004608 <__svfiscanf_r+0xb8>
 8004680:	9744      	str	r7, [sp, #272]	; 0x110
 8004682:	e7f4      	b.n	800466e <__svfiscanf_r+0x11e>
 8004684:	2b70      	cmp	r3, #112	; 0x70
 8004686:	d042      	beq.n	800470e <__svfiscanf_r+0x1be>
 8004688:	d81d      	bhi.n	80046c6 <__svfiscanf_r+0x176>
 800468a:	2b6e      	cmp	r3, #110	; 0x6e
 800468c:	d059      	beq.n	8004742 <__svfiscanf_r+0x1f2>
 800468e:	d843      	bhi.n	8004718 <__svfiscanf_r+0x1c8>
 8004690:	2b69      	cmp	r3, #105	; 0x69
 8004692:	d1b9      	bne.n	8004608 <__svfiscanf_r+0xb8>
 8004694:	2300      	movs	r3, #0
 8004696:	9344      	str	r3, [sp, #272]	; 0x110
 8004698:	2303      	movs	r3, #3
 800469a:	9349      	str	r3, [sp, #292]	; 0x124
 800469c:	6863      	ldr	r3, [r4, #4]
 800469e:	2b00      	cmp	r3, #0
 80046a0:	dd61      	ble.n	8004766 <__svfiscanf_r+0x216>
 80046a2:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 80046a4:	0659      	lsls	r1, r3, #25
 80046a6:	d56f      	bpl.n	8004788 <__svfiscanf_r+0x238>
 80046a8:	9b49      	ldr	r3, [sp, #292]	; 0x124
 80046aa:	2b02      	cmp	r3, #2
 80046ac:	dc7c      	bgt.n	80047a8 <__svfiscanf_r+0x258>
 80046ae:	ab01      	add	r3, sp, #4
 80046b0:	4622      	mov	r2, r4
 80046b2:	a943      	add	r1, sp, #268	; 0x10c
 80046b4:	4630      	mov	r0, r6
 80046b6:	f000 f8c7 	bl	8004848 <_scanf_chars>
 80046ba:	2801      	cmp	r0, #1
 80046bc:	f000 8092 	beq.w	80047e4 <__svfiscanf_r+0x294>
 80046c0:	2802      	cmp	r0, #2
 80046c2:	d1ba      	bne.n	800463a <__svfiscanf_r+0xea>
 80046c4:	e01d      	b.n	8004702 <__svfiscanf_r+0x1b2>
 80046c6:	2b75      	cmp	r3, #117	; 0x75
 80046c8:	d0da      	beq.n	8004680 <__svfiscanf_r+0x130>
 80046ca:	2b78      	cmp	r3, #120	; 0x78
 80046cc:	d0c9      	beq.n	8004662 <__svfiscanf_r+0x112>
 80046ce:	2b73      	cmp	r3, #115	; 0x73
 80046d0:	d19a      	bne.n	8004608 <__svfiscanf_r+0xb8>
 80046d2:	2302      	movs	r3, #2
 80046d4:	e7e1      	b.n	800469a <__svfiscanf_r+0x14a>
 80046d6:	6863      	ldr	r3, [r4, #4]
 80046d8:	2b00      	cmp	r3, #0
 80046da:	dd0c      	ble.n	80046f6 <__svfiscanf_r+0x1a6>
 80046dc:	6823      	ldr	r3, [r4, #0]
 80046de:	781a      	ldrb	r2, [r3, #0]
 80046e0:	4593      	cmp	fp, r2
 80046e2:	d17f      	bne.n	80047e4 <__svfiscanf_r+0x294>
 80046e4:	3301      	adds	r3, #1
 80046e6:	6862      	ldr	r2, [r4, #4]
 80046e8:	6023      	str	r3, [r4, #0]
 80046ea:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 80046ec:	3a01      	subs	r2, #1
 80046ee:	3301      	adds	r3, #1
 80046f0:	6062      	str	r2, [r4, #4]
 80046f2:	9347      	str	r3, [sp, #284]	; 0x11c
 80046f4:	e7a1      	b.n	800463a <__svfiscanf_r+0xea>
 80046f6:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 80046f8:	4621      	mov	r1, r4
 80046fa:	4630      	mov	r0, r6
 80046fc:	4798      	blx	r3
 80046fe:	2800      	cmp	r0, #0
 8004700:	d0ec      	beq.n	80046dc <__svfiscanf_r+0x18c>
 8004702:	9846      	ldr	r0, [sp, #280]	; 0x118
 8004704:	2800      	cmp	r0, #0
 8004706:	d163      	bne.n	80047d0 <__svfiscanf_r+0x280>
 8004708:	f04f 30ff 	mov.w	r0, #4294967295
 800470c:	e066      	b.n	80047dc <__svfiscanf_r+0x28c>
 800470e:	9a43      	ldr	r2, [sp, #268]	; 0x10c
 8004710:	f042 0220 	orr.w	r2, r2, #32
 8004714:	9243      	str	r2, [sp, #268]	; 0x10c
 8004716:	e7a4      	b.n	8004662 <__svfiscanf_r+0x112>
 8004718:	2308      	movs	r3, #8
 800471a:	9344      	str	r3, [sp, #272]	; 0x110
 800471c:	2304      	movs	r3, #4
 800471e:	e7bc      	b.n	800469a <__svfiscanf_r+0x14a>
 8004720:	4629      	mov	r1, r5
 8004722:	4640      	mov	r0, r8
 8004724:	f000 fa8c 	bl	8004c40 <__sccl>
 8004728:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800472a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800472e:	9343      	str	r3, [sp, #268]	; 0x10c
 8004730:	4605      	mov	r5, r0
 8004732:	2301      	movs	r3, #1
 8004734:	e7b1      	b.n	800469a <__svfiscanf_r+0x14a>
 8004736:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8004738:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800473c:	9343      	str	r3, [sp, #268]	; 0x10c
 800473e:	2300      	movs	r3, #0
 8004740:	e7ab      	b.n	800469a <__svfiscanf_r+0x14a>
 8004742:	9a43      	ldr	r2, [sp, #268]	; 0x10c
 8004744:	06d0      	lsls	r0, r2, #27
 8004746:	f53f af78 	bmi.w	800463a <__svfiscanf_r+0xea>
 800474a:	f012 0f01 	tst.w	r2, #1
 800474e:	9a01      	ldr	r2, [sp, #4]
 8004750:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8004752:	f102 0104 	add.w	r1, r2, #4
 8004756:	9101      	str	r1, [sp, #4]
 8004758:	6812      	ldr	r2, [r2, #0]
 800475a:	bf14      	ite	ne
 800475c:	8013      	strhne	r3, [r2, #0]
 800475e:	6013      	streq	r3, [r2, #0]
 8004760:	e76b      	b.n	800463a <__svfiscanf_r+0xea>
 8004762:	2305      	movs	r3, #5
 8004764:	e799      	b.n	800469a <__svfiscanf_r+0x14a>
 8004766:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 8004768:	4621      	mov	r1, r4
 800476a:	4630      	mov	r0, r6
 800476c:	4798      	blx	r3
 800476e:	2800      	cmp	r0, #0
 8004770:	d097      	beq.n	80046a2 <__svfiscanf_r+0x152>
 8004772:	e7c6      	b.n	8004702 <__svfiscanf_r+0x1b2>
 8004774:	9a47      	ldr	r2, [sp, #284]	; 0x11c
 8004776:	3201      	adds	r2, #1
 8004778:	9247      	str	r2, [sp, #284]	; 0x11c
 800477a:	6862      	ldr	r2, [r4, #4]
 800477c:	3a01      	subs	r2, #1
 800477e:	2a00      	cmp	r2, #0
 8004780:	6062      	str	r2, [r4, #4]
 8004782:	dd0a      	ble.n	800479a <__svfiscanf_r+0x24a>
 8004784:	3301      	adds	r3, #1
 8004786:	6023      	str	r3, [r4, #0]
 8004788:	f000 fce6 	bl	8005158 <__locale_ctype_ptr>
 800478c:	6823      	ldr	r3, [r4, #0]
 800478e:	781a      	ldrb	r2, [r3, #0]
 8004790:	4410      	add	r0, r2
 8004792:	7842      	ldrb	r2, [r0, #1]
 8004794:	0712      	lsls	r2, r2, #28
 8004796:	d4ed      	bmi.n	8004774 <__svfiscanf_r+0x224>
 8004798:	e786      	b.n	80046a8 <__svfiscanf_r+0x158>
 800479a:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 800479c:	4621      	mov	r1, r4
 800479e:	4630      	mov	r0, r6
 80047a0:	4798      	blx	r3
 80047a2:	2800      	cmp	r0, #0
 80047a4:	d0f0      	beq.n	8004788 <__svfiscanf_r+0x238>
 80047a6:	e7ac      	b.n	8004702 <__svfiscanf_r+0x1b2>
 80047a8:	2b04      	cmp	r3, #4
 80047aa:	dc06      	bgt.n	80047ba <__svfiscanf_r+0x26a>
 80047ac:	ab01      	add	r3, sp, #4
 80047ae:	4622      	mov	r2, r4
 80047b0:	a943      	add	r1, sp, #268	; 0x10c
 80047b2:	4630      	mov	r0, r6
 80047b4:	f000 f8ac 	bl	8004910 <_scanf_i>
 80047b8:	e77f      	b.n	80046ba <__svfiscanf_r+0x16a>
 80047ba:	4b0e      	ldr	r3, [pc, #56]	; (80047f4 <__svfiscanf_r+0x2a4>)
 80047bc:	2b00      	cmp	r3, #0
 80047be:	f43f af3c 	beq.w	800463a <__svfiscanf_r+0xea>
 80047c2:	ab01      	add	r3, sp, #4
 80047c4:	4622      	mov	r2, r4
 80047c6:	a943      	add	r1, sp, #268	; 0x10c
 80047c8:	4630      	mov	r0, r6
 80047ca:	f3af 8000 	nop.w
 80047ce:	e774      	b.n	80046ba <__svfiscanf_r+0x16a>
 80047d0:	89a3      	ldrh	r3, [r4, #12]
 80047d2:	f013 0f40 	tst.w	r3, #64	; 0x40
 80047d6:	bf18      	it	ne
 80047d8:	f04f 30ff 	movne.w	r0, #4294967295
 80047dc:	f50d 7d25 	add.w	sp, sp, #660	; 0x294
 80047e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80047e4:	9846      	ldr	r0, [sp, #280]	; 0x118
 80047e6:	e7f9      	b.n	80047dc <__svfiscanf_r+0x28c>
 80047e8:	08004fe5 	.word	0x08004fe5
 80047ec:	08004b0d 	.word	0x08004b0d
 80047f0:	080053a2 	.word	0x080053a2
 80047f4:	00000000 	.word	0x00000000

080047f8 <_vfiscanf_r>:
 80047f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80047fc:	460c      	mov	r4, r1
 80047fe:	4616      	mov	r6, r2
 8004800:	461f      	mov	r7, r3
 8004802:	4605      	mov	r5, r0
 8004804:	b118      	cbz	r0, 800480e <_vfiscanf_r+0x16>
 8004806:	6983      	ldr	r3, [r0, #24]
 8004808:	b90b      	cbnz	r3, 800480e <_vfiscanf_r+0x16>
 800480a:	f7ff fa0d 	bl	8003c28 <__sinit>
 800480e:	4b0b      	ldr	r3, [pc, #44]	; (800483c <_vfiscanf_r+0x44>)
 8004810:	429c      	cmp	r4, r3
 8004812:	d108      	bne.n	8004826 <_vfiscanf_r+0x2e>
 8004814:	686c      	ldr	r4, [r5, #4]
 8004816:	463b      	mov	r3, r7
 8004818:	4632      	mov	r2, r6
 800481a:	4621      	mov	r1, r4
 800481c:	4628      	mov	r0, r5
 800481e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004822:	f7ff be95 	b.w	8004550 <__svfiscanf_r>
 8004826:	4b06      	ldr	r3, [pc, #24]	; (8004840 <_vfiscanf_r+0x48>)
 8004828:	429c      	cmp	r4, r3
 800482a:	d101      	bne.n	8004830 <_vfiscanf_r+0x38>
 800482c:	68ac      	ldr	r4, [r5, #8]
 800482e:	e7f2      	b.n	8004816 <_vfiscanf_r+0x1e>
 8004830:	4b04      	ldr	r3, [pc, #16]	; (8004844 <_vfiscanf_r+0x4c>)
 8004832:	429c      	cmp	r4, r3
 8004834:	bf08      	it	eq
 8004836:	68ec      	ldreq	r4, [r5, #12]
 8004838:	e7ed      	b.n	8004816 <_vfiscanf_r+0x1e>
 800483a:	bf00      	nop
 800483c:	0800535c 	.word	0x0800535c
 8004840:	0800537c 	.word	0x0800537c
 8004844:	0800533c 	.word	0x0800533c

08004848 <_scanf_chars>:
 8004848:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800484c:	4615      	mov	r5, r2
 800484e:	688a      	ldr	r2, [r1, #8]
 8004850:	4680      	mov	r8, r0
 8004852:	460c      	mov	r4, r1
 8004854:	b932      	cbnz	r2, 8004864 <_scanf_chars+0x1c>
 8004856:	698a      	ldr	r2, [r1, #24]
 8004858:	2a00      	cmp	r2, #0
 800485a:	bf0c      	ite	eq
 800485c:	2201      	moveq	r2, #1
 800485e:	f04f 32ff 	movne.w	r2, #4294967295
 8004862:	608a      	str	r2, [r1, #8]
 8004864:	6822      	ldr	r2, [r4, #0]
 8004866:	06d1      	lsls	r1, r2, #27
 8004868:	bf5f      	itttt	pl
 800486a:	681a      	ldrpl	r2, [r3, #0]
 800486c:	1d11      	addpl	r1, r2, #4
 800486e:	6019      	strpl	r1, [r3, #0]
 8004870:	6817      	ldrpl	r7, [r2, #0]
 8004872:	2600      	movs	r6, #0
 8004874:	69a3      	ldr	r3, [r4, #24]
 8004876:	b1db      	cbz	r3, 80048b0 <_scanf_chars+0x68>
 8004878:	2b01      	cmp	r3, #1
 800487a:	d107      	bne.n	800488c <_scanf_chars+0x44>
 800487c:	682b      	ldr	r3, [r5, #0]
 800487e:	6962      	ldr	r2, [r4, #20]
 8004880:	781b      	ldrb	r3, [r3, #0]
 8004882:	5cd3      	ldrb	r3, [r2, r3]
 8004884:	b9a3      	cbnz	r3, 80048b0 <_scanf_chars+0x68>
 8004886:	2e00      	cmp	r6, #0
 8004888:	d132      	bne.n	80048f0 <_scanf_chars+0xa8>
 800488a:	e006      	b.n	800489a <_scanf_chars+0x52>
 800488c:	2b02      	cmp	r3, #2
 800488e:	d007      	beq.n	80048a0 <_scanf_chars+0x58>
 8004890:	2e00      	cmp	r6, #0
 8004892:	d12d      	bne.n	80048f0 <_scanf_chars+0xa8>
 8004894:	69a3      	ldr	r3, [r4, #24]
 8004896:	2b01      	cmp	r3, #1
 8004898:	d12a      	bne.n	80048f0 <_scanf_chars+0xa8>
 800489a:	2001      	movs	r0, #1
 800489c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80048a0:	f000 fc5a 	bl	8005158 <__locale_ctype_ptr>
 80048a4:	682b      	ldr	r3, [r5, #0]
 80048a6:	781b      	ldrb	r3, [r3, #0]
 80048a8:	4418      	add	r0, r3
 80048aa:	7843      	ldrb	r3, [r0, #1]
 80048ac:	071b      	lsls	r3, r3, #28
 80048ae:	d4ef      	bmi.n	8004890 <_scanf_chars+0x48>
 80048b0:	6823      	ldr	r3, [r4, #0]
 80048b2:	06da      	lsls	r2, r3, #27
 80048b4:	bf5e      	ittt	pl
 80048b6:	682b      	ldrpl	r3, [r5, #0]
 80048b8:	781b      	ldrbpl	r3, [r3, #0]
 80048ba:	703b      	strbpl	r3, [r7, #0]
 80048bc:	682a      	ldr	r2, [r5, #0]
 80048be:	686b      	ldr	r3, [r5, #4]
 80048c0:	f102 0201 	add.w	r2, r2, #1
 80048c4:	602a      	str	r2, [r5, #0]
 80048c6:	68a2      	ldr	r2, [r4, #8]
 80048c8:	f103 33ff 	add.w	r3, r3, #4294967295
 80048cc:	f102 32ff 	add.w	r2, r2, #4294967295
 80048d0:	606b      	str	r3, [r5, #4]
 80048d2:	f106 0601 	add.w	r6, r6, #1
 80048d6:	bf58      	it	pl
 80048d8:	3701      	addpl	r7, #1
 80048da:	60a2      	str	r2, [r4, #8]
 80048dc:	b142      	cbz	r2, 80048f0 <_scanf_chars+0xa8>
 80048de:	2b00      	cmp	r3, #0
 80048e0:	dcc8      	bgt.n	8004874 <_scanf_chars+0x2c>
 80048e2:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80048e6:	4629      	mov	r1, r5
 80048e8:	4640      	mov	r0, r8
 80048ea:	4798      	blx	r3
 80048ec:	2800      	cmp	r0, #0
 80048ee:	d0c1      	beq.n	8004874 <_scanf_chars+0x2c>
 80048f0:	6823      	ldr	r3, [r4, #0]
 80048f2:	f013 0310 	ands.w	r3, r3, #16
 80048f6:	d105      	bne.n	8004904 <_scanf_chars+0xbc>
 80048f8:	68e2      	ldr	r2, [r4, #12]
 80048fa:	3201      	adds	r2, #1
 80048fc:	60e2      	str	r2, [r4, #12]
 80048fe:	69a2      	ldr	r2, [r4, #24]
 8004900:	b102      	cbz	r2, 8004904 <_scanf_chars+0xbc>
 8004902:	703b      	strb	r3, [r7, #0]
 8004904:	6923      	ldr	r3, [r4, #16]
 8004906:	441e      	add	r6, r3
 8004908:	6126      	str	r6, [r4, #16]
 800490a:	2000      	movs	r0, #0
 800490c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08004910 <_scanf_i>:
 8004910:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004914:	469a      	mov	sl, r3
 8004916:	4b74      	ldr	r3, [pc, #464]	; (8004ae8 <_scanf_i+0x1d8>)
 8004918:	460c      	mov	r4, r1
 800491a:	4683      	mov	fp, r0
 800491c:	4616      	mov	r6, r2
 800491e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8004922:	b087      	sub	sp, #28
 8004924:	ab03      	add	r3, sp, #12
 8004926:	68a7      	ldr	r7, [r4, #8]
 8004928:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800492c:	4b6f      	ldr	r3, [pc, #444]	; (8004aec <_scanf_i+0x1dc>)
 800492e:	69a1      	ldr	r1, [r4, #24]
 8004930:	4a6f      	ldr	r2, [pc, #444]	; (8004af0 <_scanf_i+0x1e0>)
 8004932:	2903      	cmp	r1, #3
 8004934:	bf18      	it	ne
 8004936:	461a      	movne	r2, r3
 8004938:	1e7b      	subs	r3, r7, #1
 800493a:	f5b3 7fae 	cmp.w	r3, #348	; 0x15c
 800493e:	bf84      	itt	hi
 8004940:	f240 135d 	movwhi	r3, #349	; 0x15d
 8004944:	60a3      	strhi	r3, [r4, #8]
 8004946:	6823      	ldr	r3, [r4, #0]
 8004948:	9200      	str	r2, [sp, #0]
 800494a:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 800494e:	bf88      	it	hi
 8004950:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8004954:	f104 091c 	add.w	r9, r4, #28
 8004958:	6023      	str	r3, [r4, #0]
 800495a:	bf8c      	ite	hi
 800495c:	197f      	addhi	r7, r7, r5
 800495e:	2700      	movls	r7, #0
 8004960:	464b      	mov	r3, r9
 8004962:	f04f 0800 	mov.w	r8, #0
 8004966:	9301      	str	r3, [sp, #4]
 8004968:	6831      	ldr	r1, [r6, #0]
 800496a:	ab03      	add	r3, sp, #12
 800496c:	2202      	movs	r2, #2
 800496e:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8004972:	7809      	ldrb	r1, [r1, #0]
 8004974:	f7fb fc2c 	bl	80001d0 <memchr>
 8004978:	9b01      	ldr	r3, [sp, #4]
 800497a:	b328      	cbz	r0, 80049c8 <_scanf_i+0xb8>
 800497c:	f1b8 0f01 	cmp.w	r8, #1
 8004980:	d156      	bne.n	8004a30 <_scanf_i+0x120>
 8004982:	6862      	ldr	r2, [r4, #4]
 8004984:	b92a      	cbnz	r2, 8004992 <_scanf_i+0x82>
 8004986:	2208      	movs	r2, #8
 8004988:	6062      	str	r2, [r4, #4]
 800498a:	6822      	ldr	r2, [r4, #0]
 800498c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004990:	6022      	str	r2, [r4, #0]
 8004992:	6822      	ldr	r2, [r4, #0]
 8004994:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8004998:	6022      	str	r2, [r4, #0]
 800499a:	68a2      	ldr	r2, [r4, #8]
 800499c:	1e51      	subs	r1, r2, #1
 800499e:	60a1      	str	r1, [r4, #8]
 80049a0:	b192      	cbz	r2, 80049c8 <_scanf_i+0xb8>
 80049a2:	6832      	ldr	r2, [r6, #0]
 80049a4:	1c51      	adds	r1, r2, #1
 80049a6:	6031      	str	r1, [r6, #0]
 80049a8:	7812      	ldrb	r2, [r2, #0]
 80049aa:	701a      	strb	r2, [r3, #0]
 80049ac:	1c5d      	adds	r5, r3, #1
 80049ae:	6873      	ldr	r3, [r6, #4]
 80049b0:	3b01      	subs	r3, #1
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	6073      	str	r3, [r6, #4]
 80049b6:	dc06      	bgt.n	80049c6 <_scanf_i+0xb6>
 80049b8:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80049bc:	4631      	mov	r1, r6
 80049be:	4658      	mov	r0, fp
 80049c0:	4798      	blx	r3
 80049c2:	2800      	cmp	r0, #0
 80049c4:	d176      	bne.n	8004ab4 <_scanf_i+0x1a4>
 80049c6:	462b      	mov	r3, r5
 80049c8:	f108 0801 	add.w	r8, r8, #1
 80049cc:	f1b8 0f03 	cmp.w	r8, #3
 80049d0:	d1c9      	bne.n	8004966 <_scanf_i+0x56>
 80049d2:	6862      	ldr	r2, [r4, #4]
 80049d4:	b90a      	cbnz	r2, 80049da <_scanf_i+0xca>
 80049d6:	220a      	movs	r2, #10
 80049d8:	6062      	str	r2, [r4, #4]
 80049da:	6862      	ldr	r2, [r4, #4]
 80049dc:	4945      	ldr	r1, [pc, #276]	; (8004af4 <_scanf_i+0x1e4>)
 80049de:	6960      	ldr	r0, [r4, #20]
 80049e0:	9301      	str	r3, [sp, #4]
 80049e2:	1a89      	subs	r1, r1, r2
 80049e4:	f000 f92c 	bl	8004c40 <__sccl>
 80049e8:	9b01      	ldr	r3, [sp, #4]
 80049ea:	f04f 0800 	mov.w	r8, #0
 80049ee:	461d      	mov	r5, r3
 80049f0:	68a3      	ldr	r3, [r4, #8]
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d038      	beq.n	8004a68 <_scanf_i+0x158>
 80049f6:	6831      	ldr	r1, [r6, #0]
 80049f8:	6960      	ldr	r0, [r4, #20]
 80049fa:	780a      	ldrb	r2, [r1, #0]
 80049fc:	5c80      	ldrb	r0, [r0, r2]
 80049fe:	2800      	cmp	r0, #0
 8004a00:	d032      	beq.n	8004a68 <_scanf_i+0x158>
 8004a02:	2a30      	cmp	r2, #48	; 0x30
 8004a04:	6822      	ldr	r2, [r4, #0]
 8004a06:	d121      	bne.n	8004a4c <_scanf_i+0x13c>
 8004a08:	0510      	lsls	r0, r2, #20
 8004a0a:	d51f      	bpl.n	8004a4c <_scanf_i+0x13c>
 8004a0c:	f108 0801 	add.w	r8, r8, #1
 8004a10:	b117      	cbz	r7, 8004a18 <_scanf_i+0x108>
 8004a12:	3301      	adds	r3, #1
 8004a14:	3f01      	subs	r7, #1
 8004a16:	60a3      	str	r3, [r4, #8]
 8004a18:	6873      	ldr	r3, [r6, #4]
 8004a1a:	3b01      	subs	r3, #1
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	6073      	str	r3, [r6, #4]
 8004a20:	dd1b      	ble.n	8004a5a <_scanf_i+0x14a>
 8004a22:	6833      	ldr	r3, [r6, #0]
 8004a24:	3301      	adds	r3, #1
 8004a26:	6033      	str	r3, [r6, #0]
 8004a28:	68a3      	ldr	r3, [r4, #8]
 8004a2a:	3b01      	subs	r3, #1
 8004a2c:	60a3      	str	r3, [r4, #8]
 8004a2e:	e7df      	b.n	80049f0 <_scanf_i+0xe0>
 8004a30:	f1b8 0f02 	cmp.w	r8, #2
 8004a34:	d1b1      	bne.n	800499a <_scanf_i+0x8a>
 8004a36:	6822      	ldr	r2, [r4, #0]
 8004a38:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8004a3c:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8004a40:	d1c2      	bne.n	80049c8 <_scanf_i+0xb8>
 8004a42:	2110      	movs	r1, #16
 8004a44:	6061      	str	r1, [r4, #4]
 8004a46:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004a4a:	e7a5      	b.n	8004998 <_scanf_i+0x88>
 8004a4c:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8004a50:	6022      	str	r2, [r4, #0]
 8004a52:	780b      	ldrb	r3, [r1, #0]
 8004a54:	702b      	strb	r3, [r5, #0]
 8004a56:	3501      	adds	r5, #1
 8004a58:	e7de      	b.n	8004a18 <_scanf_i+0x108>
 8004a5a:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8004a5e:	4631      	mov	r1, r6
 8004a60:	4658      	mov	r0, fp
 8004a62:	4798      	blx	r3
 8004a64:	2800      	cmp	r0, #0
 8004a66:	d0df      	beq.n	8004a28 <_scanf_i+0x118>
 8004a68:	6823      	ldr	r3, [r4, #0]
 8004a6a:	05d9      	lsls	r1, r3, #23
 8004a6c:	d50c      	bpl.n	8004a88 <_scanf_i+0x178>
 8004a6e:	454d      	cmp	r5, r9
 8004a70:	d908      	bls.n	8004a84 <_scanf_i+0x174>
 8004a72:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8004a76:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004a7a:	4632      	mov	r2, r6
 8004a7c:	4658      	mov	r0, fp
 8004a7e:	4798      	blx	r3
 8004a80:	1e6f      	subs	r7, r5, #1
 8004a82:	463d      	mov	r5, r7
 8004a84:	454d      	cmp	r5, r9
 8004a86:	d02c      	beq.n	8004ae2 <_scanf_i+0x1d2>
 8004a88:	6822      	ldr	r2, [r4, #0]
 8004a8a:	f012 0210 	ands.w	r2, r2, #16
 8004a8e:	d11e      	bne.n	8004ace <_scanf_i+0x1be>
 8004a90:	702a      	strb	r2, [r5, #0]
 8004a92:	6863      	ldr	r3, [r4, #4]
 8004a94:	9e00      	ldr	r6, [sp, #0]
 8004a96:	4649      	mov	r1, r9
 8004a98:	4658      	mov	r0, fp
 8004a9a:	47b0      	blx	r6
 8004a9c:	6822      	ldr	r2, [r4, #0]
 8004a9e:	f8da 3000 	ldr.w	r3, [sl]
 8004aa2:	f012 0f20 	tst.w	r2, #32
 8004aa6:	d008      	beq.n	8004aba <_scanf_i+0x1aa>
 8004aa8:	1d1a      	adds	r2, r3, #4
 8004aaa:	f8ca 2000 	str.w	r2, [sl]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	6018      	str	r0, [r3, #0]
 8004ab2:	e009      	b.n	8004ac8 <_scanf_i+0x1b8>
 8004ab4:	f04f 0800 	mov.w	r8, #0
 8004ab8:	e7d6      	b.n	8004a68 <_scanf_i+0x158>
 8004aba:	07d2      	lsls	r2, r2, #31
 8004abc:	d5f4      	bpl.n	8004aa8 <_scanf_i+0x198>
 8004abe:	1d1a      	adds	r2, r3, #4
 8004ac0:	f8ca 2000 	str.w	r2, [sl]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	8018      	strh	r0, [r3, #0]
 8004ac8:	68e3      	ldr	r3, [r4, #12]
 8004aca:	3301      	adds	r3, #1
 8004acc:	60e3      	str	r3, [r4, #12]
 8004ace:	eba5 0509 	sub.w	r5, r5, r9
 8004ad2:	44a8      	add	r8, r5
 8004ad4:	6925      	ldr	r5, [r4, #16]
 8004ad6:	4445      	add	r5, r8
 8004ad8:	6125      	str	r5, [r4, #16]
 8004ada:	2000      	movs	r0, #0
 8004adc:	b007      	add	sp, #28
 8004ade:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004ae2:	2001      	movs	r0, #1
 8004ae4:	e7fa      	b.n	8004adc <_scanf_i+0x1cc>
 8004ae6:	bf00      	nop
 8004ae8:	08005314 	.word	0x08005314
 8004aec:	08004f49 	.word	0x08004f49
 8004af0:	08004e29 	.word	0x08004e29
 8004af4:	080053df 	.word	0x080053df

08004af8 <lflush>:
 8004af8:	8983      	ldrh	r3, [r0, #12]
 8004afa:	f003 0309 	and.w	r3, r3, #9
 8004afe:	2b09      	cmp	r3, #9
 8004b00:	d101      	bne.n	8004b06 <lflush+0xe>
 8004b02:	f7ff b83f 	b.w	8003b84 <fflush>
 8004b06:	2000      	movs	r0, #0
 8004b08:	4770      	bx	lr
	...

08004b0c <__srefill_r>:
 8004b0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b0e:	460c      	mov	r4, r1
 8004b10:	4605      	mov	r5, r0
 8004b12:	b118      	cbz	r0, 8004b1c <__srefill_r+0x10>
 8004b14:	6983      	ldr	r3, [r0, #24]
 8004b16:	b90b      	cbnz	r3, 8004b1c <__srefill_r+0x10>
 8004b18:	f7ff f886 	bl	8003c28 <__sinit>
 8004b1c:	4b3b      	ldr	r3, [pc, #236]	; (8004c0c <__srefill_r+0x100>)
 8004b1e:	429c      	cmp	r4, r3
 8004b20:	d10a      	bne.n	8004b38 <__srefill_r+0x2c>
 8004b22:	686c      	ldr	r4, [r5, #4]
 8004b24:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004b28:	2300      	movs	r3, #0
 8004b2a:	6063      	str	r3, [r4, #4]
 8004b2c:	b293      	uxth	r3, r2
 8004b2e:	069e      	lsls	r6, r3, #26
 8004b30:	d50c      	bpl.n	8004b4c <__srefill_r+0x40>
 8004b32:	f04f 30ff 	mov.w	r0, #4294967295
 8004b36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004b38:	4b35      	ldr	r3, [pc, #212]	; (8004c10 <__srefill_r+0x104>)
 8004b3a:	429c      	cmp	r4, r3
 8004b3c:	d101      	bne.n	8004b42 <__srefill_r+0x36>
 8004b3e:	68ac      	ldr	r4, [r5, #8]
 8004b40:	e7f0      	b.n	8004b24 <__srefill_r+0x18>
 8004b42:	4b34      	ldr	r3, [pc, #208]	; (8004c14 <__srefill_r+0x108>)
 8004b44:	429c      	cmp	r4, r3
 8004b46:	bf08      	it	eq
 8004b48:	68ec      	ldreq	r4, [r5, #12]
 8004b4a:	e7eb      	b.n	8004b24 <__srefill_r+0x18>
 8004b4c:	0758      	lsls	r0, r3, #29
 8004b4e:	d448      	bmi.n	8004be2 <__srefill_r+0xd6>
 8004b50:	06d9      	lsls	r1, r3, #27
 8004b52:	d405      	bmi.n	8004b60 <__srefill_r+0x54>
 8004b54:	2309      	movs	r3, #9
 8004b56:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004b5a:	602b      	str	r3, [r5, #0]
 8004b5c:	81a2      	strh	r2, [r4, #12]
 8004b5e:	e7e8      	b.n	8004b32 <__srefill_r+0x26>
 8004b60:	071a      	lsls	r2, r3, #28
 8004b62:	d50b      	bpl.n	8004b7c <__srefill_r+0x70>
 8004b64:	4621      	mov	r1, r4
 8004b66:	4628      	mov	r0, r5
 8004b68:	f7fe ffe2 	bl	8003b30 <_fflush_r>
 8004b6c:	2800      	cmp	r0, #0
 8004b6e:	d1e0      	bne.n	8004b32 <__srefill_r+0x26>
 8004b70:	89a3      	ldrh	r3, [r4, #12]
 8004b72:	60a0      	str	r0, [r4, #8]
 8004b74:	f023 0308 	bic.w	r3, r3, #8
 8004b78:	81a3      	strh	r3, [r4, #12]
 8004b7a:	61a0      	str	r0, [r4, #24]
 8004b7c:	89a3      	ldrh	r3, [r4, #12]
 8004b7e:	f043 0304 	orr.w	r3, r3, #4
 8004b82:	81a3      	strh	r3, [r4, #12]
 8004b84:	6923      	ldr	r3, [r4, #16]
 8004b86:	b91b      	cbnz	r3, 8004b90 <__srefill_r+0x84>
 8004b88:	4621      	mov	r1, r4
 8004b8a:	4628      	mov	r0, r5
 8004b8c:	f7ff f916 	bl	8003dbc <__smakebuf_r>
 8004b90:	f9b4 700c 	ldrsh.w	r7, [r4, #12]
 8004b94:	b2be      	uxth	r6, r7
 8004b96:	07b3      	lsls	r3, r6, #30
 8004b98:	d00f      	beq.n	8004bba <__srefill_r+0xae>
 8004b9a:	2301      	movs	r3, #1
 8004b9c:	81a3      	strh	r3, [r4, #12]
 8004b9e:	4b1e      	ldr	r3, [pc, #120]	; (8004c18 <__srefill_r+0x10c>)
 8004ba0:	491e      	ldr	r1, [pc, #120]	; (8004c1c <__srefill_r+0x110>)
 8004ba2:	6818      	ldr	r0, [r3, #0]
 8004ba4:	f006 0609 	and.w	r6, r6, #9
 8004ba8:	f7ff f8aa 	bl	8003d00 <_fwalk>
 8004bac:	2e09      	cmp	r6, #9
 8004bae:	81a7      	strh	r7, [r4, #12]
 8004bb0:	d103      	bne.n	8004bba <__srefill_r+0xae>
 8004bb2:	4621      	mov	r1, r4
 8004bb4:	4628      	mov	r0, r5
 8004bb6:	f7fe ff33 	bl	8003a20 <__sflush_r>
 8004bba:	6922      	ldr	r2, [r4, #16]
 8004bbc:	6022      	str	r2, [r4, #0]
 8004bbe:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8004bc0:	6963      	ldr	r3, [r4, #20]
 8004bc2:	6a21      	ldr	r1, [r4, #32]
 8004bc4:	4628      	mov	r0, r5
 8004bc6:	47b0      	blx	r6
 8004bc8:	2800      	cmp	r0, #0
 8004bca:	6060      	str	r0, [r4, #4]
 8004bcc:	dc1c      	bgt.n	8004c08 <__srefill_r+0xfc>
 8004bce:	89a3      	ldrh	r3, [r4, #12]
 8004bd0:	bf17      	itett	ne
 8004bd2:	2200      	movne	r2, #0
 8004bd4:	f043 0320 	orreq.w	r3, r3, #32
 8004bd8:	f043 0340 	orrne.w	r3, r3, #64	; 0x40
 8004bdc:	6062      	strne	r2, [r4, #4]
 8004bde:	81a3      	strh	r3, [r4, #12]
 8004be0:	e7a7      	b.n	8004b32 <__srefill_r+0x26>
 8004be2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004be4:	2900      	cmp	r1, #0
 8004be6:	d0cd      	beq.n	8004b84 <__srefill_r+0x78>
 8004be8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004bec:	4299      	cmp	r1, r3
 8004bee:	d002      	beq.n	8004bf6 <__srefill_r+0xea>
 8004bf0:	4628      	mov	r0, r5
 8004bf2:	f7ff f92b 	bl	8003e4c <_free_r>
 8004bf6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004bf8:	6063      	str	r3, [r4, #4]
 8004bfa:	2000      	movs	r0, #0
 8004bfc:	6360      	str	r0, [r4, #52]	; 0x34
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d0c0      	beq.n	8004b84 <__srefill_r+0x78>
 8004c02:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8004c04:	6023      	str	r3, [r4, #0]
 8004c06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004c08:	2000      	movs	r0, #0
 8004c0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004c0c:	0800535c 	.word	0x0800535c
 8004c10:	0800537c 	.word	0x0800537c
 8004c14:	0800533c 	.word	0x0800533c
 8004c18:	08005338 	.word	0x08005338
 8004c1c:	08004af9 	.word	0x08004af9

08004c20 <_sbrk_r>:
 8004c20:	b538      	push	{r3, r4, r5, lr}
 8004c22:	4c06      	ldr	r4, [pc, #24]	; (8004c3c <_sbrk_r+0x1c>)
 8004c24:	2300      	movs	r3, #0
 8004c26:	4605      	mov	r5, r0
 8004c28:	4608      	mov	r0, r1
 8004c2a:	6023      	str	r3, [r4, #0]
 8004c2c:	f000 fb16 	bl	800525c <_sbrk>
 8004c30:	1c43      	adds	r3, r0, #1
 8004c32:	d102      	bne.n	8004c3a <_sbrk_r+0x1a>
 8004c34:	6823      	ldr	r3, [r4, #0]
 8004c36:	b103      	cbz	r3, 8004c3a <_sbrk_r+0x1a>
 8004c38:	602b      	str	r3, [r5, #0]
 8004c3a:	bd38      	pop	{r3, r4, r5, pc}
 8004c3c:	2000035c 	.word	0x2000035c

08004c40 <__sccl>:
 8004c40:	b570      	push	{r4, r5, r6, lr}
 8004c42:	780b      	ldrb	r3, [r1, #0]
 8004c44:	2b5e      	cmp	r3, #94	; 0x5e
 8004c46:	bf13      	iteet	ne
 8004c48:	1c4a      	addne	r2, r1, #1
 8004c4a:	1c8a      	addeq	r2, r1, #2
 8004c4c:	784b      	ldrbeq	r3, [r1, #1]
 8004c4e:	2100      	movne	r1, #0
 8004c50:	bf08      	it	eq
 8004c52:	2101      	moveq	r1, #1
 8004c54:	1e44      	subs	r4, r0, #1
 8004c56:	f100 05ff 	add.w	r5, r0, #255	; 0xff
 8004c5a:	f804 1f01 	strb.w	r1, [r4, #1]!
 8004c5e:	42a5      	cmp	r5, r4
 8004c60:	d1fb      	bne.n	8004c5a <__sccl+0x1a>
 8004c62:	b913      	cbnz	r3, 8004c6a <__sccl+0x2a>
 8004c64:	3a01      	subs	r2, #1
 8004c66:	4610      	mov	r0, r2
 8004c68:	bd70      	pop	{r4, r5, r6, pc}
 8004c6a:	f081 0401 	eor.w	r4, r1, #1
 8004c6e:	54c4      	strb	r4, [r0, r3]
 8004c70:	4611      	mov	r1, r2
 8004c72:	780d      	ldrb	r5, [r1, #0]
 8004c74:	2d2d      	cmp	r5, #45	; 0x2d
 8004c76:	f101 0201 	add.w	r2, r1, #1
 8004c7a:	d006      	beq.n	8004c8a <__sccl+0x4a>
 8004c7c:	2d5d      	cmp	r5, #93	; 0x5d
 8004c7e:	d0f2      	beq.n	8004c66 <__sccl+0x26>
 8004c80:	b90d      	cbnz	r5, 8004c86 <__sccl+0x46>
 8004c82:	460a      	mov	r2, r1
 8004c84:	e7ef      	b.n	8004c66 <__sccl+0x26>
 8004c86:	462b      	mov	r3, r5
 8004c88:	e7f1      	b.n	8004c6e <__sccl+0x2e>
 8004c8a:	784e      	ldrb	r6, [r1, #1]
 8004c8c:	2e5d      	cmp	r6, #93	; 0x5d
 8004c8e:	d0fa      	beq.n	8004c86 <__sccl+0x46>
 8004c90:	42b3      	cmp	r3, r6
 8004c92:	dcf8      	bgt.n	8004c86 <__sccl+0x46>
 8004c94:	3102      	adds	r1, #2
 8004c96:	3301      	adds	r3, #1
 8004c98:	429e      	cmp	r6, r3
 8004c9a:	54c4      	strb	r4, [r0, r3]
 8004c9c:	dcfb      	bgt.n	8004c96 <__sccl+0x56>
 8004c9e:	e7e8      	b.n	8004c72 <__sccl+0x32>

08004ca0 <__sread>:
 8004ca0:	b510      	push	{r4, lr}
 8004ca2:	460c      	mov	r4, r1
 8004ca4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004ca8:	f000 fab0 	bl	800520c <_read_r>
 8004cac:	2800      	cmp	r0, #0
 8004cae:	bfab      	itete	ge
 8004cb0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004cb2:	89a3      	ldrhlt	r3, [r4, #12]
 8004cb4:	181b      	addge	r3, r3, r0
 8004cb6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004cba:	bfac      	ite	ge
 8004cbc:	6563      	strge	r3, [r4, #84]	; 0x54
 8004cbe:	81a3      	strhlt	r3, [r4, #12]
 8004cc0:	bd10      	pop	{r4, pc}

08004cc2 <__swrite>:
 8004cc2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004cc6:	461f      	mov	r7, r3
 8004cc8:	898b      	ldrh	r3, [r1, #12]
 8004cca:	05db      	lsls	r3, r3, #23
 8004ccc:	4605      	mov	r5, r0
 8004cce:	460c      	mov	r4, r1
 8004cd0:	4616      	mov	r6, r2
 8004cd2:	d505      	bpl.n	8004ce0 <__swrite+0x1e>
 8004cd4:	2302      	movs	r3, #2
 8004cd6:	2200      	movs	r2, #0
 8004cd8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004cdc:	f000 fa4a 	bl	8005174 <_lseek_r>
 8004ce0:	89a3      	ldrh	r3, [r4, #12]
 8004ce2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004ce6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004cea:	81a3      	strh	r3, [r4, #12]
 8004cec:	4632      	mov	r2, r6
 8004cee:	463b      	mov	r3, r7
 8004cf0:	4628      	mov	r0, r5
 8004cf2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004cf6:	f000 b9e7 	b.w	80050c8 <_write_r>

08004cfa <__sseek>:
 8004cfa:	b510      	push	{r4, lr}
 8004cfc:	460c      	mov	r4, r1
 8004cfe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004d02:	f000 fa37 	bl	8005174 <_lseek_r>
 8004d06:	1c43      	adds	r3, r0, #1
 8004d08:	89a3      	ldrh	r3, [r4, #12]
 8004d0a:	bf15      	itete	ne
 8004d0c:	6560      	strne	r0, [r4, #84]	; 0x54
 8004d0e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004d12:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004d16:	81a3      	strheq	r3, [r4, #12]
 8004d18:	bf18      	it	ne
 8004d1a:	81a3      	strhne	r3, [r4, #12]
 8004d1c:	bd10      	pop	{r4, pc}

08004d1e <__sclose>:
 8004d1e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004d22:	f000 b9e3 	b.w	80050ec <_close_r>

08004d26 <_strtol_l.isra.0>:
 8004d26:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d2a:	4680      	mov	r8, r0
 8004d2c:	4689      	mov	r9, r1
 8004d2e:	4692      	mov	sl, r2
 8004d30:	461f      	mov	r7, r3
 8004d32:	468b      	mov	fp, r1
 8004d34:	465d      	mov	r5, fp
 8004d36:	980a      	ldr	r0, [sp, #40]	; 0x28
 8004d38:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004d3c:	f000 fa08 	bl	8005150 <__locale_ctype_ptr_l>
 8004d40:	4420      	add	r0, r4
 8004d42:	7846      	ldrb	r6, [r0, #1]
 8004d44:	f016 0608 	ands.w	r6, r6, #8
 8004d48:	d10b      	bne.n	8004d62 <_strtol_l.isra.0+0x3c>
 8004d4a:	2c2d      	cmp	r4, #45	; 0x2d
 8004d4c:	d10b      	bne.n	8004d66 <_strtol_l.isra.0+0x40>
 8004d4e:	782c      	ldrb	r4, [r5, #0]
 8004d50:	2601      	movs	r6, #1
 8004d52:	f10b 0502 	add.w	r5, fp, #2
 8004d56:	b167      	cbz	r7, 8004d72 <_strtol_l.isra.0+0x4c>
 8004d58:	2f10      	cmp	r7, #16
 8004d5a:	d114      	bne.n	8004d86 <_strtol_l.isra.0+0x60>
 8004d5c:	2c30      	cmp	r4, #48	; 0x30
 8004d5e:	d00a      	beq.n	8004d76 <_strtol_l.isra.0+0x50>
 8004d60:	e011      	b.n	8004d86 <_strtol_l.isra.0+0x60>
 8004d62:	46ab      	mov	fp, r5
 8004d64:	e7e6      	b.n	8004d34 <_strtol_l.isra.0+0xe>
 8004d66:	2c2b      	cmp	r4, #43	; 0x2b
 8004d68:	bf04      	itt	eq
 8004d6a:	782c      	ldrbeq	r4, [r5, #0]
 8004d6c:	f10b 0502 	addeq.w	r5, fp, #2
 8004d70:	e7f1      	b.n	8004d56 <_strtol_l.isra.0+0x30>
 8004d72:	2c30      	cmp	r4, #48	; 0x30
 8004d74:	d127      	bne.n	8004dc6 <_strtol_l.isra.0+0xa0>
 8004d76:	782b      	ldrb	r3, [r5, #0]
 8004d78:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8004d7c:	2b58      	cmp	r3, #88	; 0x58
 8004d7e:	d14b      	bne.n	8004e18 <_strtol_l.isra.0+0xf2>
 8004d80:	786c      	ldrb	r4, [r5, #1]
 8004d82:	2710      	movs	r7, #16
 8004d84:	3502      	adds	r5, #2
 8004d86:	2e00      	cmp	r6, #0
 8004d88:	bf0c      	ite	eq
 8004d8a:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8004d8e:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 8004d92:	2200      	movs	r2, #0
 8004d94:	fbb1 fef7 	udiv	lr, r1, r7
 8004d98:	4610      	mov	r0, r2
 8004d9a:	fb07 1c1e 	mls	ip, r7, lr, r1
 8004d9e:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8004da2:	2b09      	cmp	r3, #9
 8004da4:	d811      	bhi.n	8004dca <_strtol_l.isra.0+0xa4>
 8004da6:	461c      	mov	r4, r3
 8004da8:	42a7      	cmp	r7, r4
 8004daa:	dd1d      	ble.n	8004de8 <_strtol_l.isra.0+0xc2>
 8004dac:	1c53      	adds	r3, r2, #1
 8004dae:	d007      	beq.n	8004dc0 <_strtol_l.isra.0+0x9a>
 8004db0:	4586      	cmp	lr, r0
 8004db2:	d316      	bcc.n	8004de2 <_strtol_l.isra.0+0xbc>
 8004db4:	d101      	bne.n	8004dba <_strtol_l.isra.0+0x94>
 8004db6:	45a4      	cmp	ip, r4
 8004db8:	db13      	blt.n	8004de2 <_strtol_l.isra.0+0xbc>
 8004dba:	fb00 4007 	mla	r0, r0, r7, r4
 8004dbe:	2201      	movs	r2, #1
 8004dc0:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004dc4:	e7eb      	b.n	8004d9e <_strtol_l.isra.0+0x78>
 8004dc6:	270a      	movs	r7, #10
 8004dc8:	e7dd      	b.n	8004d86 <_strtol_l.isra.0+0x60>
 8004dca:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8004dce:	2b19      	cmp	r3, #25
 8004dd0:	d801      	bhi.n	8004dd6 <_strtol_l.isra.0+0xb0>
 8004dd2:	3c37      	subs	r4, #55	; 0x37
 8004dd4:	e7e8      	b.n	8004da8 <_strtol_l.isra.0+0x82>
 8004dd6:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8004dda:	2b19      	cmp	r3, #25
 8004ddc:	d804      	bhi.n	8004de8 <_strtol_l.isra.0+0xc2>
 8004dde:	3c57      	subs	r4, #87	; 0x57
 8004de0:	e7e2      	b.n	8004da8 <_strtol_l.isra.0+0x82>
 8004de2:	f04f 32ff 	mov.w	r2, #4294967295
 8004de6:	e7eb      	b.n	8004dc0 <_strtol_l.isra.0+0x9a>
 8004de8:	1c53      	adds	r3, r2, #1
 8004dea:	d108      	bne.n	8004dfe <_strtol_l.isra.0+0xd8>
 8004dec:	2322      	movs	r3, #34	; 0x22
 8004dee:	f8c8 3000 	str.w	r3, [r8]
 8004df2:	4608      	mov	r0, r1
 8004df4:	f1ba 0f00 	cmp.w	sl, #0
 8004df8:	d107      	bne.n	8004e0a <_strtol_l.isra.0+0xe4>
 8004dfa:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004dfe:	b106      	cbz	r6, 8004e02 <_strtol_l.isra.0+0xdc>
 8004e00:	4240      	negs	r0, r0
 8004e02:	f1ba 0f00 	cmp.w	sl, #0
 8004e06:	d00c      	beq.n	8004e22 <_strtol_l.isra.0+0xfc>
 8004e08:	b122      	cbz	r2, 8004e14 <_strtol_l.isra.0+0xee>
 8004e0a:	3d01      	subs	r5, #1
 8004e0c:	f8ca 5000 	str.w	r5, [sl]
 8004e10:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004e14:	464d      	mov	r5, r9
 8004e16:	e7f9      	b.n	8004e0c <_strtol_l.isra.0+0xe6>
 8004e18:	2430      	movs	r4, #48	; 0x30
 8004e1a:	2f00      	cmp	r7, #0
 8004e1c:	d1b3      	bne.n	8004d86 <_strtol_l.isra.0+0x60>
 8004e1e:	2708      	movs	r7, #8
 8004e20:	e7b1      	b.n	8004d86 <_strtol_l.isra.0+0x60>
 8004e22:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08004e28 <_strtol_r>:
 8004e28:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004e2a:	4c06      	ldr	r4, [pc, #24]	; (8004e44 <_strtol_r+0x1c>)
 8004e2c:	4d06      	ldr	r5, [pc, #24]	; (8004e48 <_strtol_r+0x20>)
 8004e2e:	6824      	ldr	r4, [r4, #0]
 8004e30:	6a24      	ldr	r4, [r4, #32]
 8004e32:	2c00      	cmp	r4, #0
 8004e34:	bf08      	it	eq
 8004e36:	462c      	moveq	r4, r5
 8004e38:	9400      	str	r4, [sp, #0]
 8004e3a:	f7ff ff74 	bl	8004d26 <_strtol_l.isra.0>
 8004e3e:	b003      	add	sp, #12
 8004e40:	bd30      	pop	{r4, r5, pc}
 8004e42:	bf00      	nop
 8004e44:	2000000c 	.word	0x2000000c
 8004e48:	20000070 	.word	0x20000070

08004e4c <_strtoul_l.isra.0>:
 8004e4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004e50:	4680      	mov	r8, r0
 8004e52:	4689      	mov	r9, r1
 8004e54:	4692      	mov	sl, r2
 8004e56:	461e      	mov	r6, r3
 8004e58:	460f      	mov	r7, r1
 8004e5a:	463d      	mov	r5, r7
 8004e5c:	9808      	ldr	r0, [sp, #32]
 8004e5e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004e62:	f000 f975 	bl	8005150 <__locale_ctype_ptr_l>
 8004e66:	4420      	add	r0, r4
 8004e68:	7843      	ldrb	r3, [r0, #1]
 8004e6a:	f013 0308 	ands.w	r3, r3, #8
 8004e6e:	d10a      	bne.n	8004e86 <_strtoul_l.isra.0+0x3a>
 8004e70:	2c2d      	cmp	r4, #45	; 0x2d
 8004e72:	d10a      	bne.n	8004e8a <_strtoul_l.isra.0+0x3e>
 8004e74:	782c      	ldrb	r4, [r5, #0]
 8004e76:	2301      	movs	r3, #1
 8004e78:	1cbd      	adds	r5, r7, #2
 8004e7a:	b15e      	cbz	r6, 8004e94 <_strtoul_l.isra.0+0x48>
 8004e7c:	2e10      	cmp	r6, #16
 8004e7e:	d113      	bne.n	8004ea8 <_strtoul_l.isra.0+0x5c>
 8004e80:	2c30      	cmp	r4, #48	; 0x30
 8004e82:	d009      	beq.n	8004e98 <_strtoul_l.isra.0+0x4c>
 8004e84:	e010      	b.n	8004ea8 <_strtoul_l.isra.0+0x5c>
 8004e86:	462f      	mov	r7, r5
 8004e88:	e7e7      	b.n	8004e5a <_strtoul_l.isra.0+0xe>
 8004e8a:	2c2b      	cmp	r4, #43	; 0x2b
 8004e8c:	bf04      	itt	eq
 8004e8e:	782c      	ldrbeq	r4, [r5, #0]
 8004e90:	1cbd      	addeq	r5, r7, #2
 8004e92:	e7f2      	b.n	8004e7a <_strtoul_l.isra.0+0x2e>
 8004e94:	2c30      	cmp	r4, #48	; 0x30
 8004e96:	d125      	bne.n	8004ee4 <_strtoul_l.isra.0+0x98>
 8004e98:	782a      	ldrb	r2, [r5, #0]
 8004e9a:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8004e9e:	2a58      	cmp	r2, #88	; 0x58
 8004ea0:	d14a      	bne.n	8004f38 <_strtoul_l.isra.0+0xec>
 8004ea2:	786c      	ldrb	r4, [r5, #1]
 8004ea4:	2610      	movs	r6, #16
 8004ea6:	3502      	adds	r5, #2
 8004ea8:	f04f 31ff 	mov.w	r1, #4294967295
 8004eac:	2700      	movs	r7, #0
 8004eae:	fbb1 f1f6 	udiv	r1, r1, r6
 8004eb2:	fb06 fe01 	mul.w	lr, r6, r1
 8004eb6:	ea6f 0e0e 	mvn.w	lr, lr
 8004eba:	4638      	mov	r0, r7
 8004ebc:	f1a4 0230 	sub.w	r2, r4, #48	; 0x30
 8004ec0:	2a09      	cmp	r2, #9
 8004ec2:	d811      	bhi.n	8004ee8 <_strtoul_l.isra.0+0x9c>
 8004ec4:	4614      	mov	r4, r2
 8004ec6:	42a6      	cmp	r6, r4
 8004ec8:	dd1d      	ble.n	8004f06 <_strtoul_l.isra.0+0xba>
 8004eca:	2f00      	cmp	r7, #0
 8004ecc:	db18      	blt.n	8004f00 <_strtoul_l.isra.0+0xb4>
 8004ece:	4281      	cmp	r1, r0
 8004ed0:	d316      	bcc.n	8004f00 <_strtoul_l.isra.0+0xb4>
 8004ed2:	d101      	bne.n	8004ed8 <_strtoul_l.isra.0+0x8c>
 8004ed4:	45a6      	cmp	lr, r4
 8004ed6:	db13      	blt.n	8004f00 <_strtoul_l.isra.0+0xb4>
 8004ed8:	fb00 4006 	mla	r0, r0, r6, r4
 8004edc:	2701      	movs	r7, #1
 8004ede:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004ee2:	e7eb      	b.n	8004ebc <_strtoul_l.isra.0+0x70>
 8004ee4:	260a      	movs	r6, #10
 8004ee6:	e7df      	b.n	8004ea8 <_strtoul_l.isra.0+0x5c>
 8004ee8:	f1a4 0241 	sub.w	r2, r4, #65	; 0x41
 8004eec:	2a19      	cmp	r2, #25
 8004eee:	d801      	bhi.n	8004ef4 <_strtoul_l.isra.0+0xa8>
 8004ef0:	3c37      	subs	r4, #55	; 0x37
 8004ef2:	e7e8      	b.n	8004ec6 <_strtoul_l.isra.0+0x7a>
 8004ef4:	f1a4 0261 	sub.w	r2, r4, #97	; 0x61
 8004ef8:	2a19      	cmp	r2, #25
 8004efa:	d804      	bhi.n	8004f06 <_strtoul_l.isra.0+0xba>
 8004efc:	3c57      	subs	r4, #87	; 0x57
 8004efe:	e7e2      	b.n	8004ec6 <_strtoul_l.isra.0+0x7a>
 8004f00:	f04f 37ff 	mov.w	r7, #4294967295
 8004f04:	e7eb      	b.n	8004ede <_strtoul_l.isra.0+0x92>
 8004f06:	2f00      	cmp	r7, #0
 8004f08:	da09      	bge.n	8004f1e <_strtoul_l.isra.0+0xd2>
 8004f0a:	2322      	movs	r3, #34	; 0x22
 8004f0c:	f8c8 3000 	str.w	r3, [r8]
 8004f10:	f04f 30ff 	mov.w	r0, #4294967295
 8004f14:	f1ba 0f00 	cmp.w	sl, #0
 8004f18:	d107      	bne.n	8004f2a <_strtoul_l.isra.0+0xde>
 8004f1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004f1e:	b103      	cbz	r3, 8004f22 <_strtoul_l.isra.0+0xd6>
 8004f20:	4240      	negs	r0, r0
 8004f22:	f1ba 0f00 	cmp.w	sl, #0
 8004f26:	d00c      	beq.n	8004f42 <_strtoul_l.isra.0+0xf6>
 8004f28:	b127      	cbz	r7, 8004f34 <_strtoul_l.isra.0+0xe8>
 8004f2a:	3d01      	subs	r5, #1
 8004f2c:	f8ca 5000 	str.w	r5, [sl]
 8004f30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004f34:	464d      	mov	r5, r9
 8004f36:	e7f9      	b.n	8004f2c <_strtoul_l.isra.0+0xe0>
 8004f38:	2430      	movs	r4, #48	; 0x30
 8004f3a:	2e00      	cmp	r6, #0
 8004f3c:	d1b4      	bne.n	8004ea8 <_strtoul_l.isra.0+0x5c>
 8004f3e:	2608      	movs	r6, #8
 8004f40:	e7b2      	b.n	8004ea8 <_strtoul_l.isra.0+0x5c>
 8004f42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

08004f48 <_strtoul_r>:
 8004f48:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004f4a:	4c06      	ldr	r4, [pc, #24]	; (8004f64 <_strtoul_r+0x1c>)
 8004f4c:	4d06      	ldr	r5, [pc, #24]	; (8004f68 <_strtoul_r+0x20>)
 8004f4e:	6824      	ldr	r4, [r4, #0]
 8004f50:	6a24      	ldr	r4, [r4, #32]
 8004f52:	2c00      	cmp	r4, #0
 8004f54:	bf08      	it	eq
 8004f56:	462c      	moveq	r4, r5
 8004f58:	9400      	str	r4, [sp, #0]
 8004f5a:	f7ff ff77 	bl	8004e4c <_strtoul_l.isra.0>
 8004f5e:	b003      	add	sp, #12
 8004f60:	bd30      	pop	{r4, r5, pc}
 8004f62:	bf00      	nop
 8004f64:	2000000c 	.word	0x2000000c
 8004f68:	20000070 	.word	0x20000070

08004f6c <__submore>:
 8004f6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004f70:	460c      	mov	r4, r1
 8004f72:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8004f74:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004f78:	4299      	cmp	r1, r3
 8004f7a:	d11e      	bne.n	8004fba <__submore+0x4e>
 8004f7c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004f80:	f7fe ffb2 	bl	8003ee8 <_malloc_r>
 8004f84:	b918      	cbnz	r0, 8004f8e <__submore+0x22>
 8004f86:	f04f 30ff 	mov.w	r0, #4294967295
 8004f8a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004f8e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004f92:	63a3      	str	r3, [r4, #56]	; 0x38
 8004f94:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8004f98:	6360      	str	r0, [r4, #52]	; 0x34
 8004f9a:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8004f9e:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8004fa2:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 8004fa6:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8004faa:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 8004fae:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8004fb2:	6020      	str	r0, [r4, #0]
 8004fb4:	2000      	movs	r0, #0
 8004fb6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004fba:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8004fbc:	0077      	lsls	r7, r6, #1
 8004fbe:	463a      	mov	r2, r7
 8004fc0:	f000 f8fe 	bl	80051c0 <_realloc_r>
 8004fc4:	4605      	mov	r5, r0
 8004fc6:	2800      	cmp	r0, #0
 8004fc8:	d0dd      	beq.n	8004f86 <__submore+0x1a>
 8004fca:	eb00 0806 	add.w	r8, r0, r6
 8004fce:	4601      	mov	r1, r0
 8004fd0:	4632      	mov	r2, r6
 8004fd2:	4640      	mov	r0, r8
 8004fd4:	f7fe fb0e 	bl	80035f4 <memcpy>
 8004fd8:	f8c4 8000 	str.w	r8, [r4]
 8004fdc:	6365      	str	r5, [r4, #52]	; 0x34
 8004fde:	63a7      	str	r7, [r4, #56]	; 0x38
 8004fe0:	e7e8      	b.n	8004fb4 <__submore+0x48>
	...

08004fe4 <_ungetc_r>:
 8004fe4:	1c4b      	adds	r3, r1, #1
 8004fe6:	b570      	push	{r4, r5, r6, lr}
 8004fe8:	4606      	mov	r6, r0
 8004fea:	460d      	mov	r5, r1
 8004fec:	4614      	mov	r4, r2
 8004fee:	d103      	bne.n	8004ff8 <_ungetc_r+0x14>
 8004ff0:	f04f 35ff 	mov.w	r5, #4294967295
 8004ff4:	4628      	mov	r0, r5
 8004ff6:	bd70      	pop	{r4, r5, r6, pc}
 8004ff8:	b118      	cbz	r0, 8005002 <_ungetc_r+0x1e>
 8004ffa:	6983      	ldr	r3, [r0, #24]
 8004ffc:	b90b      	cbnz	r3, 8005002 <_ungetc_r+0x1e>
 8004ffe:	f7fe fe13 	bl	8003c28 <__sinit>
 8005002:	4b2e      	ldr	r3, [pc, #184]	; (80050bc <_ungetc_r+0xd8>)
 8005004:	429c      	cmp	r4, r3
 8005006:	d12c      	bne.n	8005062 <_ungetc_r+0x7e>
 8005008:	6874      	ldr	r4, [r6, #4]
 800500a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800500e:	f023 0320 	bic.w	r3, r3, #32
 8005012:	81a3      	strh	r3, [r4, #12]
 8005014:	b29b      	uxth	r3, r3
 8005016:	0759      	lsls	r1, r3, #29
 8005018:	d413      	bmi.n	8005042 <_ungetc_r+0x5e>
 800501a:	06da      	lsls	r2, r3, #27
 800501c:	d5e8      	bpl.n	8004ff0 <_ungetc_r+0xc>
 800501e:	071b      	lsls	r3, r3, #28
 8005020:	d50b      	bpl.n	800503a <_ungetc_r+0x56>
 8005022:	4621      	mov	r1, r4
 8005024:	4630      	mov	r0, r6
 8005026:	f7fe fd83 	bl	8003b30 <_fflush_r>
 800502a:	2800      	cmp	r0, #0
 800502c:	d1e0      	bne.n	8004ff0 <_ungetc_r+0xc>
 800502e:	89a3      	ldrh	r3, [r4, #12]
 8005030:	60a0      	str	r0, [r4, #8]
 8005032:	f023 0308 	bic.w	r3, r3, #8
 8005036:	81a3      	strh	r3, [r4, #12]
 8005038:	61a0      	str	r0, [r4, #24]
 800503a:	89a3      	ldrh	r3, [r4, #12]
 800503c:	f043 0304 	orr.w	r3, r3, #4
 8005040:	81a3      	strh	r3, [r4, #12]
 8005042:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005044:	6862      	ldr	r2, [r4, #4]
 8005046:	b2ed      	uxtb	r5, r5
 8005048:	b1e3      	cbz	r3, 8005084 <_ungetc_r+0xa0>
 800504a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800504c:	429a      	cmp	r2, r3
 800504e:	da12      	bge.n	8005076 <_ungetc_r+0x92>
 8005050:	6823      	ldr	r3, [r4, #0]
 8005052:	1e5a      	subs	r2, r3, #1
 8005054:	6022      	str	r2, [r4, #0]
 8005056:	f803 5c01 	strb.w	r5, [r3, #-1]
 800505a:	6863      	ldr	r3, [r4, #4]
 800505c:	3301      	adds	r3, #1
 800505e:	6063      	str	r3, [r4, #4]
 8005060:	e7c8      	b.n	8004ff4 <_ungetc_r+0x10>
 8005062:	4b17      	ldr	r3, [pc, #92]	; (80050c0 <_ungetc_r+0xdc>)
 8005064:	429c      	cmp	r4, r3
 8005066:	d101      	bne.n	800506c <_ungetc_r+0x88>
 8005068:	68b4      	ldr	r4, [r6, #8]
 800506a:	e7ce      	b.n	800500a <_ungetc_r+0x26>
 800506c:	4b15      	ldr	r3, [pc, #84]	; (80050c4 <_ungetc_r+0xe0>)
 800506e:	429c      	cmp	r4, r3
 8005070:	bf08      	it	eq
 8005072:	68f4      	ldreq	r4, [r6, #12]
 8005074:	e7c9      	b.n	800500a <_ungetc_r+0x26>
 8005076:	4621      	mov	r1, r4
 8005078:	4630      	mov	r0, r6
 800507a:	f7ff ff77 	bl	8004f6c <__submore>
 800507e:	2800      	cmp	r0, #0
 8005080:	d0e6      	beq.n	8005050 <_ungetc_r+0x6c>
 8005082:	e7b5      	b.n	8004ff0 <_ungetc_r+0xc>
 8005084:	6921      	ldr	r1, [r4, #16]
 8005086:	6823      	ldr	r3, [r4, #0]
 8005088:	b151      	cbz	r1, 80050a0 <_ungetc_r+0xbc>
 800508a:	4299      	cmp	r1, r3
 800508c:	d208      	bcs.n	80050a0 <_ungetc_r+0xbc>
 800508e:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8005092:	428d      	cmp	r5, r1
 8005094:	d104      	bne.n	80050a0 <_ungetc_r+0xbc>
 8005096:	3b01      	subs	r3, #1
 8005098:	3201      	adds	r2, #1
 800509a:	6023      	str	r3, [r4, #0]
 800509c:	6062      	str	r2, [r4, #4]
 800509e:	e7a9      	b.n	8004ff4 <_ungetc_r+0x10>
 80050a0:	63e3      	str	r3, [r4, #60]	; 0x3c
 80050a2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80050a6:	6363      	str	r3, [r4, #52]	; 0x34
 80050a8:	2303      	movs	r3, #3
 80050aa:	63a3      	str	r3, [r4, #56]	; 0x38
 80050ac:	4623      	mov	r3, r4
 80050ae:	6422      	str	r2, [r4, #64]	; 0x40
 80050b0:	f803 5f46 	strb.w	r5, [r3, #70]!
 80050b4:	6023      	str	r3, [r4, #0]
 80050b6:	2301      	movs	r3, #1
 80050b8:	e7d1      	b.n	800505e <_ungetc_r+0x7a>
 80050ba:	bf00      	nop
 80050bc:	0800535c 	.word	0x0800535c
 80050c0:	0800537c 	.word	0x0800537c
 80050c4:	0800533c 	.word	0x0800533c

080050c8 <_write_r>:
 80050c8:	b538      	push	{r3, r4, r5, lr}
 80050ca:	4c07      	ldr	r4, [pc, #28]	; (80050e8 <_write_r+0x20>)
 80050cc:	4605      	mov	r5, r0
 80050ce:	4608      	mov	r0, r1
 80050d0:	4611      	mov	r1, r2
 80050d2:	2200      	movs	r2, #0
 80050d4:	6022      	str	r2, [r4, #0]
 80050d6:	461a      	mov	r2, r3
 80050d8:	f7fd ffee 	bl	80030b8 <_write>
 80050dc:	1c43      	adds	r3, r0, #1
 80050de:	d102      	bne.n	80050e6 <_write_r+0x1e>
 80050e0:	6823      	ldr	r3, [r4, #0]
 80050e2:	b103      	cbz	r3, 80050e6 <_write_r+0x1e>
 80050e4:	602b      	str	r3, [r5, #0]
 80050e6:	bd38      	pop	{r3, r4, r5, pc}
 80050e8:	2000035c 	.word	0x2000035c

080050ec <_close_r>:
 80050ec:	b538      	push	{r3, r4, r5, lr}
 80050ee:	4c06      	ldr	r4, [pc, #24]	; (8005108 <_close_r+0x1c>)
 80050f0:	2300      	movs	r3, #0
 80050f2:	4605      	mov	r5, r0
 80050f4:	4608      	mov	r0, r1
 80050f6:	6023      	str	r3, [r4, #0]
 80050f8:	f7fe f80a 	bl	8003110 <_close>
 80050fc:	1c43      	adds	r3, r0, #1
 80050fe:	d102      	bne.n	8005106 <_close_r+0x1a>
 8005100:	6823      	ldr	r3, [r4, #0]
 8005102:	b103      	cbz	r3, 8005106 <_close_r+0x1a>
 8005104:	602b      	str	r3, [r5, #0]
 8005106:	bd38      	pop	{r3, r4, r5, pc}
 8005108:	2000035c 	.word	0x2000035c

0800510c <_fstat_r>:
 800510c:	b538      	push	{r3, r4, r5, lr}
 800510e:	4c07      	ldr	r4, [pc, #28]	; (800512c <_fstat_r+0x20>)
 8005110:	2300      	movs	r3, #0
 8005112:	4605      	mov	r5, r0
 8005114:	4608      	mov	r0, r1
 8005116:	4611      	mov	r1, r2
 8005118:	6023      	str	r3, [r4, #0]
 800511a:	f7fe f849 	bl	80031b0 <_fstat>
 800511e:	1c43      	adds	r3, r0, #1
 8005120:	d102      	bne.n	8005128 <_fstat_r+0x1c>
 8005122:	6823      	ldr	r3, [r4, #0]
 8005124:	b103      	cbz	r3, 8005128 <_fstat_r+0x1c>
 8005126:	602b      	str	r3, [r5, #0]
 8005128:	bd38      	pop	{r3, r4, r5, pc}
 800512a:	bf00      	nop
 800512c:	2000035c 	.word	0x2000035c

08005130 <_isatty_r>:
 8005130:	b538      	push	{r3, r4, r5, lr}
 8005132:	4c06      	ldr	r4, [pc, #24]	; (800514c <_isatty_r+0x1c>)
 8005134:	2300      	movs	r3, #0
 8005136:	4605      	mov	r5, r0
 8005138:	4608      	mov	r0, r1
 800513a:	6023      	str	r3, [r4, #0]
 800513c:	f7fd ffa6 	bl	800308c <_isatty>
 8005140:	1c43      	adds	r3, r0, #1
 8005142:	d102      	bne.n	800514a <_isatty_r+0x1a>
 8005144:	6823      	ldr	r3, [r4, #0]
 8005146:	b103      	cbz	r3, 800514a <_isatty_r+0x1a>
 8005148:	602b      	str	r3, [r5, #0]
 800514a:	bd38      	pop	{r3, r4, r5, pc}
 800514c:	2000035c 	.word	0x2000035c

08005150 <__locale_ctype_ptr_l>:
 8005150:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8005154:	4770      	bx	lr
	...

08005158 <__locale_ctype_ptr>:
 8005158:	4b04      	ldr	r3, [pc, #16]	; (800516c <__locale_ctype_ptr+0x14>)
 800515a:	4a05      	ldr	r2, [pc, #20]	; (8005170 <__locale_ctype_ptr+0x18>)
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	6a1b      	ldr	r3, [r3, #32]
 8005160:	2b00      	cmp	r3, #0
 8005162:	bf08      	it	eq
 8005164:	4613      	moveq	r3, r2
 8005166:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
 800516a:	4770      	bx	lr
 800516c:	2000000c 	.word	0x2000000c
 8005170:	20000070 	.word	0x20000070

08005174 <_lseek_r>:
 8005174:	b538      	push	{r3, r4, r5, lr}
 8005176:	4c07      	ldr	r4, [pc, #28]	; (8005194 <_lseek_r+0x20>)
 8005178:	4605      	mov	r5, r0
 800517a:	4608      	mov	r0, r1
 800517c:	4611      	mov	r1, r2
 800517e:	2200      	movs	r2, #0
 8005180:	6022      	str	r2, [r4, #0]
 8005182:	461a      	mov	r2, r3
 8005184:	f7fd ffdb 	bl	800313e <_lseek>
 8005188:	1c43      	adds	r3, r0, #1
 800518a:	d102      	bne.n	8005192 <_lseek_r+0x1e>
 800518c:	6823      	ldr	r3, [r4, #0]
 800518e:	b103      	cbz	r3, 8005192 <_lseek_r+0x1e>
 8005190:	602b      	str	r3, [r5, #0]
 8005192:	bd38      	pop	{r3, r4, r5, pc}
 8005194:	2000035c 	.word	0x2000035c

08005198 <__ascii_mbtowc>:
 8005198:	b082      	sub	sp, #8
 800519a:	b901      	cbnz	r1, 800519e <__ascii_mbtowc+0x6>
 800519c:	a901      	add	r1, sp, #4
 800519e:	b142      	cbz	r2, 80051b2 <__ascii_mbtowc+0x1a>
 80051a0:	b14b      	cbz	r3, 80051b6 <__ascii_mbtowc+0x1e>
 80051a2:	7813      	ldrb	r3, [r2, #0]
 80051a4:	600b      	str	r3, [r1, #0]
 80051a6:	7812      	ldrb	r2, [r2, #0]
 80051a8:	1c10      	adds	r0, r2, #0
 80051aa:	bf18      	it	ne
 80051ac:	2001      	movne	r0, #1
 80051ae:	b002      	add	sp, #8
 80051b0:	4770      	bx	lr
 80051b2:	4610      	mov	r0, r2
 80051b4:	e7fb      	b.n	80051ae <__ascii_mbtowc+0x16>
 80051b6:	f06f 0001 	mvn.w	r0, #1
 80051ba:	e7f8      	b.n	80051ae <__ascii_mbtowc+0x16>

080051bc <__malloc_lock>:
 80051bc:	4770      	bx	lr

080051be <__malloc_unlock>:
 80051be:	4770      	bx	lr

080051c0 <_realloc_r>:
 80051c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80051c2:	4607      	mov	r7, r0
 80051c4:	4614      	mov	r4, r2
 80051c6:	460e      	mov	r6, r1
 80051c8:	b921      	cbnz	r1, 80051d4 <_realloc_r+0x14>
 80051ca:	4611      	mov	r1, r2
 80051cc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80051d0:	f7fe be8a 	b.w	8003ee8 <_malloc_r>
 80051d4:	b922      	cbnz	r2, 80051e0 <_realloc_r+0x20>
 80051d6:	f7fe fe39 	bl	8003e4c <_free_r>
 80051da:	4625      	mov	r5, r4
 80051dc:	4628      	mov	r0, r5
 80051de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80051e0:	f000 f833 	bl	800524a <_malloc_usable_size_r>
 80051e4:	4284      	cmp	r4, r0
 80051e6:	d90f      	bls.n	8005208 <_realloc_r+0x48>
 80051e8:	4621      	mov	r1, r4
 80051ea:	4638      	mov	r0, r7
 80051ec:	f7fe fe7c 	bl	8003ee8 <_malloc_r>
 80051f0:	4605      	mov	r5, r0
 80051f2:	2800      	cmp	r0, #0
 80051f4:	d0f2      	beq.n	80051dc <_realloc_r+0x1c>
 80051f6:	4631      	mov	r1, r6
 80051f8:	4622      	mov	r2, r4
 80051fa:	f7fe f9fb 	bl	80035f4 <memcpy>
 80051fe:	4631      	mov	r1, r6
 8005200:	4638      	mov	r0, r7
 8005202:	f7fe fe23 	bl	8003e4c <_free_r>
 8005206:	e7e9      	b.n	80051dc <_realloc_r+0x1c>
 8005208:	4635      	mov	r5, r6
 800520a:	e7e7      	b.n	80051dc <_realloc_r+0x1c>

0800520c <_read_r>:
 800520c:	b538      	push	{r3, r4, r5, lr}
 800520e:	4c07      	ldr	r4, [pc, #28]	; (800522c <_read_r+0x20>)
 8005210:	4605      	mov	r5, r0
 8005212:	4608      	mov	r0, r1
 8005214:	4611      	mov	r1, r2
 8005216:	2200      	movs	r2, #0
 8005218:	6022      	str	r2, [r4, #0]
 800521a:	461a      	mov	r2, r3
 800521c:	f7fd ffa0 	bl	8003160 <_read>
 8005220:	1c43      	adds	r3, r0, #1
 8005222:	d102      	bne.n	800522a <_read_r+0x1e>
 8005224:	6823      	ldr	r3, [r4, #0]
 8005226:	b103      	cbz	r3, 800522a <_read_r+0x1e>
 8005228:	602b      	str	r3, [r5, #0]
 800522a:	bd38      	pop	{r3, r4, r5, pc}
 800522c:	2000035c 	.word	0x2000035c

08005230 <__ascii_wctomb>:
 8005230:	b149      	cbz	r1, 8005246 <__ascii_wctomb+0x16>
 8005232:	2aff      	cmp	r2, #255	; 0xff
 8005234:	bf85      	ittet	hi
 8005236:	238a      	movhi	r3, #138	; 0x8a
 8005238:	6003      	strhi	r3, [r0, #0]
 800523a:	700a      	strbls	r2, [r1, #0]
 800523c:	f04f 30ff 	movhi.w	r0, #4294967295
 8005240:	bf98      	it	ls
 8005242:	2001      	movls	r0, #1
 8005244:	4770      	bx	lr
 8005246:	4608      	mov	r0, r1
 8005248:	4770      	bx	lr

0800524a <_malloc_usable_size_r>:
 800524a:	f851 0c04 	ldr.w	r0, [r1, #-4]
 800524e:	2800      	cmp	r0, #0
 8005250:	f1a0 0004 	sub.w	r0, r0, #4
 8005254:	bfbc      	itt	lt
 8005256:	580b      	ldrlt	r3, [r1, r0]
 8005258:	18c0      	addlt	r0, r0, r3
 800525a:	4770      	bx	lr

0800525c <_sbrk>:
 800525c:	4b04      	ldr	r3, [pc, #16]	; (8005270 <_sbrk+0x14>)
 800525e:	6819      	ldr	r1, [r3, #0]
 8005260:	4602      	mov	r2, r0
 8005262:	b909      	cbnz	r1, 8005268 <_sbrk+0xc>
 8005264:	4903      	ldr	r1, [pc, #12]	; (8005274 <_sbrk+0x18>)
 8005266:	6019      	str	r1, [r3, #0]
 8005268:	6818      	ldr	r0, [r3, #0]
 800526a:	4402      	add	r2, r0
 800526c:	601a      	str	r2, [r3, #0]
 800526e:	4770      	bx	lr
 8005270:	2000020c 	.word	0x2000020c
 8005274:	20000360 	.word	0x20000360

08005278 <_init>:
 8005278:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800527a:	bf00      	nop
 800527c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800527e:	bc08      	pop	{r3}
 8005280:	469e      	mov	lr, r3
 8005282:	4770      	bx	lr

08005284 <_fini>:
 8005284:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005286:	bf00      	nop
 8005288:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800528a:	bc08      	pop	{r3}
 800528c:	469e      	mov	lr, r3
 800528e:	4770      	bx	lr
